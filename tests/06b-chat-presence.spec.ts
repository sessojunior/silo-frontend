import { test, expect } from './utils/auth-helpers'

test.describe('ðŸ’¬ SISTEMA DE CHAT - PRESENÃ‡A', () => {
	test.describe('ðŸ‘¤ Sistema de PresenÃ§a', () => {
		test('âœ… Estados de presenÃ§a - Online, Ausente, Ocupado, Offline', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/chat')

			// Aguardar carregamento
			await authenticatedPage.waitForTimeout(2000)

			// Verificar se indicador de presenÃ§a estÃ¡ visÃ­vel
			await expect(authenticatedPage.locator('[data-testid="presence-indicator"]')).toBeVisible()

			// Clicar no dropdown de status
			await authenticatedPage.locator('[data-testid="presence-dropdown"]').click()

			// Verificar se opÃ§Ãµes de status estÃ£o visÃ­veis
			await expect(authenticatedPage.getByText('Online')).toBeVisible()
			await expect(authenticatedPage.getByText('Ausente')).toBeVisible()
			await expect(authenticatedPage.getByText('Ocupado')).toBeVisible()
			await expect(authenticatedPage.getByText('Offline')).toBeVisible()
		})

		test('âœ… AlteraÃ§Ã£o de status - funciona corretamente', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/chat')

			// Aguardar carregamento
			await authenticatedPage.waitForTimeout(2000)

			// Clicar no dropdown de status
			await authenticatedPage.locator('[data-testid="presence-dropdown"]').click()

			// Selecionar status "Ocupado"
			await authenticatedPage.getByText('Ocupado').click()

			// Verificar se status foi alterado
			await expect(authenticatedPage.locator('[data-testid="presence-indicator"]')).toContainText('Ocupado')

			// Alterar para "Online"
			await authenticatedPage.locator('[data-testid="presence-dropdown"]').click()
			await authenticatedPage.getByText('Online').click()

			// Verificar se status voltou para "Online"
			await expect(authenticatedPage.locator('[data-testid="presence-indicator"]')).toContainText('Online')
		})

		test('âœ… Reflexo na UI - status visÃ­vel para outros usuÃ¡rios', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/chat')

			// Aguardar carregamento
			await authenticatedPage.waitForTimeout(2000)

			// Verificar se status de outros usuÃ¡rios estÃ¡ visÃ­vel na sidebar
			const userStatuses = authenticatedPage.locator('[data-testid="user-status"]')
			if ((await userStatuses.count()) > 0) {
				await expect(userStatuses.first()).toBeVisible()
			}

			// Verificar se hÃ¡ indicadores visuais de status
			const statusIndicators = authenticatedPage.locator('[data-testid="status-indicator"]')
			if ((await statusIndicators.count()) > 0) {
				await expect(statusIndicators.first()).toBeVisible()
			}
		})

		test('âœ… Heartbeat automÃ¡tico - mantÃ©m status atualizado', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/chat')

			// Aguardar carregamento
			await authenticatedPage.waitForTimeout(2000)

			// Verificar se indicador de presenÃ§a estÃ¡ visÃ­vel
			await expect(authenticatedPage.locator('[data-testid="presence-indicator"]')).toBeVisible()

			// Aguardar alguns ciclos de heartbeat
			await authenticatedPage.waitForTimeout(10000)

			// Verificar se status ainda estÃ¡ visÃ­vel
			await expect(authenticatedPage.locator('[data-testid="presence-indicator"]')).toBeVisible()

			// Verificar se nÃ£o hÃ¡ erros de conexÃ£o
			await expect(authenticatedPage.locator('[data-testid="chat-area"]')).toBeVisible()
		})

		test('âœ… Status offline - quando usuÃ¡rio fecha navegador', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/chat')

			// Aguardar carregamento
			await authenticatedPage.waitForTimeout(2000)

			// Verificar se indicador de presenÃ§a estÃ¡ visÃ­vel
			await expect(authenticatedPage.locator('[data-testid="presence-indicator"]')).toBeVisible()

			// Simular usuÃ¡rio ficando inativo (nÃ£o move mouse)
			await authenticatedPage.waitForTimeout(15000)

			// Verificar se status ainda estÃ¡ visÃ­vel
			await expect(authenticatedPage.locator('[data-testid="presence-indicator"]')).toBeVisible()

			// Verificar se chat ainda funciona
			await expect(authenticatedPage.locator('[data-testid="chat-area"]')).toBeVisible()
		})

		test('âœ… SincronizaÃ§Ã£o de presenÃ§a - entre diferentes abas', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/chat')

			// Aguardar carregamento
			await authenticatedPage.waitForTimeout(2000)

			// Verificar status inicial
			await expect(authenticatedPage.locator('[data-testid="presence-indicator"]')).toBeVisible()

			// Abrir nova aba
			const newPage = await authenticatedPage.context().newPage()
			await newPage.goto('/admin/chat')
			await newPage.waitForTimeout(2000)

			// Verificar se status Ã© o mesmo na nova aba
			await expect(newPage.locator('[data-testid="presence-indicator"]')).toBeVisible()

			// Fechar nova aba
			await newPage.close()

			// Verificar se aba original ainda funciona
			await expect(authenticatedPage.locator('[data-testid="presence-indicator"]')).toBeVisible()
		})
	})
})
