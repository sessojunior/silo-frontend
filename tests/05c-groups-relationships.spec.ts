import { test, expect } from './utils/auth-helpers'

test.describe('üë• Grupos - Relacionamentos e Valida√ß√µes', () => {
	test('‚úÖ Associar usu√°rios a grupos - funciona corretamente', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/groups')

		// Clicar em um grupo
		const groupItem = authenticatedPage.locator('[data-testid="group-item"]').first()
		await groupItem.click()

		// Verificar se se√ß√£o de usu√°rios est√° vis√≠vel
		await expect(authenticatedPage.getByText(/usu√°rios do grupo|membros/i)).toBeVisible()

		// Clicar em adicionar usu√°rio
		await authenticatedPage.getByRole('button', { name: /adicionar|associar/i }).click()

		// Verificar se seletor de usu√°rios abriu
		await expect(authenticatedPage.getByText(/selecionar usu√°rio/i)).toBeVisible()

		// Selecionar um usu√°rio
		const userCheckbox = authenticatedPage.locator('[data-testid="user-checkbox"]').first()
		await userCheckbox.check()

		// Confirmar associa√ß√£o
		await authenticatedPage.getByRole('button', { name: 'Confirmar' }).click()

		// Verificar toast de sucesso
		await expect(authenticatedPage.getByText(/usu√°rio associado|adicionado com sucesso/i)).toBeVisible()
	})

	test('‚úÖ Remover usu√°rios de grupos - desassocia√ß√£o', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/groups')

		// Clicar em um grupo que tenha usu√°rios
		const groupWithUsers = authenticatedPage.locator('[data-testid="group-item"]').first()
		await groupWithUsers.click()

		// Verificar se h√° usu√°rios no grupo
		const groupUsers = authenticatedPage.locator('[data-testid="group-user"]')
		if ((await groupUsers.count()) > 0) {
			// Clicar no bot√£o de remover do primeiro usu√°rio
			const removeButton = groupUsers.first().locator('[data-testid="remove-user"]')
			await removeButton.click()

			// Verificar se confirma√ß√£o apareceu
			await expect(authenticatedPage.getByText(/confirmar remo√ß√£o|remover usu√°rio/i)).toBeVisible()

			// Confirmar remo√ß√£o
			await authenticatedPage.getByRole('button', { name: 'Confirmar' }).click()

			// Verificar toast de sucesso
			await expect(authenticatedPage.getByText(/usu√°rio removido|desassociado com sucesso/i)).toBeVisible()
		}
	})

	test('‚úÖ Reflexo na UI - ambos lados mostram relacionamentos', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/groups')

		// Verificar um grupo
		const groupItem = authenticatedPage.locator('[data-testid="group-item"]').first()
		const groupName = await groupItem.locator('[data-testid="group-name"]').textContent()

		// Clicar no grupo
		await groupItem.click()

		// Verificar usu√°rios do grupo
		const groupUsers = authenticatedPage.locator('[data-testid="group-user"]')
		const userCount = await groupUsers.count()

		// Ir para p√°gina de usu√°rios
		await authenticatedPage.goto('/admin/groups/users')

		// Filtrar por grupo
		await authenticatedPage.getByRole('combobox', { name: /grupo/i }).selectOption(groupName || '')

		// Verificar se contagem de usu√°rios √© consistente
		const filteredUsers = authenticatedPage.locator('[data-testid="user-item"]')
		await expect(filteredUsers).toHaveCount(userCount)
	})

	test('‚úÖ Estat√≠sticas de usu√°rios por grupo', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/groups')

		// Verificar se estat√≠sticas est√£o vis√≠veis
		await expect(authenticatedPage.getByText(/total de grupos|total de usu√°rios/i)).toBeVisible()

		// Verificar se contadores s√£o n√∫meros v√°lidos
		const totalGroups = authenticatedPage.locator('[data-testid="total-groups"]')
		const totalUsers = authenticatedPage.locator('[data-testid="total-users"]')

		if ((await totalGroups.count()) > 0) {
			const groupsCount = await totalGroups.textContent()
			expect(parseInt(groupsCount || '0')).toBeGreaterThan(0)
		}

		if ((await totalUsers.count()) > 0) {
			const usersCount = await totalUsers.textContent()
			expect(parseInt(usersCount || '0')).toBeGreaterThan(0)
		}
	})

	test('‚úÖ Valida√ß√£o de campos obrigat√≥rios', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/groups')

		// Clicar em criar novo grupo
		await authenticatedPage.getByRole('button', { name: /criar|novo/i }).click()

		// Tentar salvar sem preencher campos obrigat√≥rios
		await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

		// Verificar se erro de campo obrigat√≥rio aparece
		await expect(authenticatedPage.getByText(/nome √© obrigat√≥rio|campo obrigat√≥rio/i)).toBeVisible()

		// Preencher campo obrigat√≥rio
		await authenticatedPage.getByLabel('Nome do grupo').fill('Grupo V√°lido')

		// Tentar salvar novamente
		await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

		// Deve salvar com sucesso
		await expect(authenticatedPage.getByText(/grupo criado|salvo com sucesso/i)).toBeVisible()
	})

	test('‚úÖ Confirma√ß√£o para a√ß√µes destrutivas', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/groups')

		// Tentar excluir um grupo (que n√£o seja padr√£o)
		const nonDefaultGroup = authenticatedPage.locator('[data-testid="group-item"]:not([data-default="true"])').first()
		if ((await nonDefaultGroup.count()) > 0) {
			await nonDefaultGroup.click()

			// Clicar em excluir
			await authenticatedPage.getByRole('button', { name: /excluir/i }).click()

			// Verificar se dialog de confirma√ß√£o apareceu
			await expect(authenticatedPage.getByText(/confirmar exclus√£o|excluir grupo/i)).toBeVisible()

			// Cancelar exclus√£o
			await authenticatedPage.getByRole('button', { name: 'Cancelar' }).click()

			// Verificar se dialog fechou
			await expect(authenticatedPage.getByText(/confirmar exclus√£o|excluir grupo/i)).not.toBeVisible()
		}
	})
})
