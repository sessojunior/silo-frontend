import { test, expect } from './utils/auth-helpers'

test.describe('üîó Integra√ß√£o - Navega√ß√£o Completa', () => {
	test('‚úÖ Todas as p√°ginas admin - acess√≠veis sem 404', async ({ authenticatedPage }) => {
		// Lista de todas as p√°ginas admin
		const adminPages = ['/admin/dashboard', '/admin/products', '/admin/contacts', '/admin/groups', '/admin/groups/users', '/admin/projects', '/admin/chat', '/admin/settings', '/admin/help']

		for (const pagePath of adminPages) {
			await authenticatedPage.goto(pagePath)

			// Verificar se p√°gina carregou sem 404
			await expect(authenticatedPage.locator('body')).not.toContainText('404')
			await expect(authenticatedPage.locator('body')).not.toContainText('Not Found')

			// Verificar se conte√∫do da p√°gina est√° vis√≠vel
			await expect(authenticatedPage.locator('main, [role="main"], .main, #main')).toBeVisible()

			console.log(`‚úÖ P√°gina ${pagePath} acess√≠vel`)
		}
	})

	test('‚úÖ Links corretos - Topbar e sidebar funcionam', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Verificar se topbar est√° vis√≠vel
		await expect(authenticatedPage.locator('[data-testid="topbar"]')).toBeVisible()

		// Verificar se sidebar est√° vis√≠vel
		await expect(authenticatedPage.locator('[data-testid="sidebar"]')).toBeVisible()

		// Testar links da topbar
		const topbarLinks = authenticatedPage.locator('[data-testid="topbar"] a, [data-testid="topbar"] button')
		if ((await topbarLinks.count()) > 0) {
			for (let i = 0; i < Math.min(await topbarLinks.count(), 3); i++) {
				const link = topbarLinks.nth(i)
				await expect(link).toBeVisible()
			}
		}

		// Testar links da sidebar
		const sidebarLinks = authenticatedPage.locator('[data-testid="sidebar"] a, [data-testid="sidebar"] button')
		if ((await sidebarLinks.count()) > 0) {
			for (let i = 0; i < Math.min(await sidebarLinks.count(), 5); i++) {
				const link = sidebarLinks.nth(i)
				await expect(link).toBeVisible()
			}
		}
	})

	test('‚úÖ Sem loops infinitos - navega√ß√£o est√°vel', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Aguardar carregamento inicial
		await authenticatedPage.waitForLoadState('networkidle')

		// Fazer algumas navega√ß√µes
		await authenticatedPage.goto('/admin/products')
		await authenticatedPage.waitForLoadState('networkidle')

		await authenticatedPage.goto('/admin/contacts')
		await authenticatedPage.waitForLoadState('networkidle')

		await authenticatedPage.goto('/admin/dashboard')
		await authenticatedPage.waitForLoadState('networkidle')

		// Verificar se n√£o h√° erros de loop infinito
		await expect(authenticatedPage.locator('body')).not.toContainText('Maximum update depth exceeded')
		await expect(authenticatedPage.locator('body')).not.toContainText('Too many re-renders')

		// Verificar se dashboard ainda est√° funcional
		await expect(authenticatedPage.getByRole('heading', { name: 'Dashboard' })).toBeVisible()
	})

	test('‚úÖ Prefetch desabilitado - rotas cr√≠ticas de sess√£o', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Verificar se n√£o h√° prefetch autom√°tico para rotas cr√≠ticas
		const criticalRoutes = ['/login', '/register', '/admin/settings']

		for (const route of criticalRoutes) {
			// Verificar se n√£o h√° links com prefetch para essas rotas
			const prefetchLinks = authenticatedPage.locator(`a[href="${route}"][data-prefetch="true"]`)
			await expect(prefetchLinks).toHaveCount(0)
		}
	})
})
