import { test, expect } from './utils/auth-helpers'

test.describe('üí° Sistema de Solu√ß√µes', () => {
	test.describe('üìù CRUD de Solu√ß√µes', () => {
		test('‚úÖ Estrutura b√°sica - p√°gina de solu√ß√µes', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/products/bam/problems')
			await authenticatedPage.waitForLoadState('networkidle')

			// Verificar se p√°gina carregou com estrutura b√°sica
			await expect(authenticatedPage.getByPlaceholder('Procurar problema...')).toBeVisible()
		})

		test('‚úÖ Interface de solu√ß√µes - elementos b√°sicos', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/products/bam/problems')
			await authenticatedPage.waitForLoadState('networkidle')

			// Verificar se estrutura de duas colunas est√° presente
			const leftColumn = authenticatedPage.locator('div.flex.w-full.flex-shrink-0.flex-col.border-r.border-zinc-200.sm\\:w-\\[480px\\]')
			await expect(leftColumn).toBeVisible()
		})
	})

	test.describe('üñºÔ∏è Upload de Imagens', () => {
		test('‚úÖ √Årea de upload - estrutura b√°sica', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/products/bam/problems')
			await authenticatedPage.waitForLoadState('networkidle')

			// Verificar se p√°gina carregou com estrutura b√°sica
			await expect(authenticatedPage.getByPlaceholder('Procurar problema...')).toBeVisible()
		})
	})

	test.describe('‚úÖ Valida√ß√£o de Solu√ß√µes', () => {
		test('‚úÖ Interface de valida√ß√£o - elementos b√°sicos', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/products/bam/problems')
			await authenticatedPage.waitForLoadState('networkidle')

			// Verificar se p√°gina carregou com estrutura b√°sica
			await expect(authenticatedPage.getByPlaceholder('Procurar problema...')).toBeVisible()
		})
	})
})
