import { test, expect } from './utils/auth-helpers'

test.describe('üí° Sistema de Solu√ß√µes', () => {
	test('‚úÖ Responder problema - cria√ß√£o de solu√ß√£o', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/products/bam/problems')
		await authenticatedPage.waitForLoadState('networkidle')

		await authenticatedPage.locator('span.text-base.font-semibold:has-text("Dificuldade na configura√ß√£o inicial")').first().click()
		await authenticatedPage.getByRole('button', { name: 'Responder' }).first().click()

		const solutionInput = authenticatedPage.locator('textarea').first()
		await solutionInput.fill('Solu√ß√£o teste via Playwright')
		await authenticatedPage.locator('button[type="submit"]:has-text("Responder")').click()
		await expect(authenticatedPage.getByText('Solu√ß√£o teste via Playwright')).toBeVisible()
	})

	test('‚úÖ Upload de imagens em solu√ß√µes via UploadThing', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/products/bam/problems')
		await authenticatedPage.waitForLoadState('networkidle')

		await authenticatedPage.locator('span.text-base.font-semibold:has-text("Dificuldade na configura√ß√£o inicial")').first().click()
		await authenticatedPage.getByRole('button', { name: 'Responder' }).first().click()

		const uploadButton = authenticatedPage.locator('[data-ut-element="upload-button"]')
		if (await uploadButton.isVisible()) {
			const fileInput = authenticatedPage.locator('input[type="file"]')
			await fileInput.setInputFiles('tests/fixtures/test-image.txt')
			await expect(authenticatedPage.locator('img')).toBeVisible()
		} else {
			console.log('‚ö†Ô∏è UploadThing n√£o est√° dispon√≠vel - pulando teste de upload')
		}
	})

	test('‚úÖ Marcar solu√ß√£o como correta', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/products/bam/problems')
		await authenticatedPage.waitForLoadState('networkidle')

		await authenticatedPage.locator('span.text-base.font-semibold:has-text("Dificuldade na configura√ß√£o inicial")').first().click()
		const verifyButton = authenticatedPage.locator('button:has-text("Verificar")').first()
		if (await verifyButton.isVisible()) {
			await verifyButton.click()
			await expect(authenticatedPage.getByText('Resposta verificada')).toBeVisible()
		} else {
			console.log('‚ö†Ô∏è Bot√£o "Verificar" n√£o encontrado - pulando teste')
		}
	})
})
