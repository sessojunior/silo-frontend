import { test, expect } from './utils/auth-helpers'

test.describe('üìö Manual do Produto', () => {
	test('‚úÖ Editor Markdown - funciona com preview', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/products/bam')
		await authenticatedPage.waitForLoadState('networkidle')

		// Verificar se a p√°gina carregou corretamente
		await expect(authenticatedPage.getByText('Base de conhecimento')).toBeVisible()

		// Verificar se a se√ß√£o do manual est√° vis√≠vel (deve estar na coluna direita)
		await expect(authenticatedPage.locator('h3:has-text("Manual do produto")')).toBeVisible()

		// Verificar se h√° conte√∫do do manual ou mensagem de "nenhum manual"
		await expect(authenticatedPage.locator('div:has-text("Documenta√ß√£o e refer√™ncia do produto")').first()).toBeVisible()
	})

	test('‚úÖ Editor Markdown - permite edi√ß√£o', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/products/bam')
		await authenticatedPage.waitForLoadState('networkidle')

		// Verificar se a p√°gina carregou corretamente
		await expect(authenticatedPage.getByText('Base de conhecimento')).toBeVisible()

		// Verificar se o bot√£o de editar manual est√° vis√≠vel
		await expect(authenticatedPage.locator('button:has-text("Editar manual")')).toBeVisible()

		// Clicar no bot√£o de editar manual
		await authenticatedPage.locator('button:has-text("Editar manual")').click()

		// Aguardar um pouco para o editor abrir
		await authenticatedPage.waitForTimeout(2000)

		// Verificar se o editor abriu (usar o t√≠tulo espec√≠fico)
		await expect(authenticatedPage.locator('div:has-text("Editar manual")').first()).toBeVisible()

		// Verificar se h√° campos de edi√ß√£o
		await expect(authenticatedPage.locator('textarea').first()).toBeVisible()

		// Preencher com conte√∫do de teste
		await authenticatedPage.locator('textarea').first().fill('# T√≠tulo Teste\n\nConte√∫do teste')

		// Verificar se h√° bot√£o de salvar
		await expect(authenticatedPage.locator('button:has-text("Salvar")')).toBeVisible()
	})

	test('‚úÖ Salvamento - persiste altera√ß√µes', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/products/bam')
		await authenticatedPage.waitForLoadState('networkidle')

		// Verificar se a p√°gina carregou corretamente
		await expect(authenticatedPage.getByText('Base de conhecimento')).toBeVisible()

		// Clicar no bot√£o de editar manual
		await authenticatedPage.locator('button:has-text("Editar manual")').click()

		// Aguardar um pouco para o editor abrir
		await authenticatedPage.waitForTimeout(2000)

		// Verificar se o editor abriu
		await expect(authenticatedPage.locator('div:has-text("Editar manual")').first()).toBeVisible()

		// Preencher com novo conte√∫do
		await authenticatedPage.locator('textarea').first().fill('# Novo T√≠tulo\n\nNovo conte√∫do')

		// Aguardar um pouco para o conte√∫do ser processado
		await authenticatedPage.waitForTimeout(1000)

		// Salvar usando force para evitar intercepta√ß√£o
		await authenticatedPage.locator('button:has-text("Salvar")').click({ force: true })

		// Aguardar salvamento
		await authenticatedPage.waitForTimeout(2000)

		// Verificar se foi salvo (pode ser um toast ou mudan√ßa na interface)
		await expect(authenticatedPage.locator('div:has-text("Novo T√≠tulo")').first()).toBeVisible()
	})

	test('‚úÖ Preview Markdown - renderiza corretamente', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/products/bam')
		await authenticatedPage.waitForLoadState('networkidle')

		// Verificar se a p√°gina carregou corretamente
		await expect(authenticatedPage.getByText('Base de conhecimento')).toBeVisible()

		// Clicar no bot√£o de editar manual
		await authenticatedPage.locator('button:has-text("Editar manual")').click()

		// Aguardar um pouco para o editor abrir
		await authenticatedPage.waitForTimeout(2000)

		// Verificar se o editor abriu
		await expect(authenticatedPage.locator('div:has-text("Editar manual")').first()).toBeVisible()

		// Preencher com markdown
		await authenticatedPage.locator('textarea').first().fill('# T√≠tulo H1\n\n## Subt√≠tulo H2\n\n**Texto em negrito**')

		// Verificar se h√° preview ou se o markdown √© renderizado
		// Aguardar um pouco para renderiza√ß√£o
		await authenticatedPage.waitForTimeout(1000)

		// Verificar se o conte√∫do est√° sendo exibido (usar .first() para evitar strict mode)
		await expect(authenticatedPage.locator('div:has-text("T√≠tulo H1")').first()).toBeVisible()
	})
})
