import { test, expect } from './utils/auth-helpers'

test.describe('üìö SISTEMA DE AJUDA - Funcionalidades B√°sicas', () => {
	test.describe('üîç Funcionalidades Principais', () => {
		test('‚úÖ Carregamento da p√°gina - estrutura e elementos b√°sicos', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/help')

			// Verificar se p√°gina carregou
			await expect(authenticatedPage.locator('h2:has-text("Ajuda")')).toBeVisible()
			await expect(authenticatedPage.getByText('Documenta√ß√£o do Silo')).toBeVisible()

			// Verificar se sidebar est√° presente
			await expect(authenticatedPage.locator('div.w-96.border-r')).toBeVisible()

			// Verificar se bot√£o de configura√ß√µes est√° presente (pode n√£o ter title)
			const settingsButton = authenticatedPage.locator('button:has(span.icon-\\[lucide--settings\\])')
			await expect(settingsButton).toBeVisible()
		})

		test('‚úÖ Navega√ß√£o por t√≠tulos - estrutura de navega√ß√£o lateral', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/help')

			// Verificar se √°rea de navega√ß√£o est√° presente
			await expect(authenticatedPage.locator('div.flex-1.overflow-y-auto.p-3')).toBeVisible()

			// Se n√£o houver t√≠tulos, verificar mensagem de ajuda
			const titlesArea = authenticatedPage.locator('div.space-y-0\\.5')
			if ((await titlesArea.count()) === 0) {
				await expect(authenticatedPage.getByText('Nenhum t√≠tulo encontrado')).toBeVisible()
				await expect(authenticatedPage.getByText('Use # ## ### para criar t√≠tulos')).toBeVisible()
			}
		})

		test('‚úÖ √Årea de conte√∫do - visualiza√ß√£o da documenta√ß√£o', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/help')

			// Verificar se √°rea de conte√∫do est√° presente
			await expect(authenticatedPage.locator('div.flex-1.flex.flex-col.min-w-0')).toBeVisible()

			// Verificar se √°rea de scroll est√° presente
			await expect(authenticatedPage.locator('div.flex-1.overflow-y-auto.bg-white.dark\\:bg-zinc-800')).toBeVisible()
		})

		test('‚úÖ Bot√£o de edi√ß√£o - presen√ßa do bot√£o', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/help')

			// Verificar se bot√£o de configura√ß√µes est√° presente (abre o editor)
			const settingsButton = authenticatedPage.locator('button:has(span.icon-\\[lucide--settings\\])')
			await expect(settingsButton).toBeVisible()

			// Verificar se bot√£o √© clic√°vel
			await expect(settingsButton).toBeEnabled()
		})
	})

	test.describe('üì± Responsividade e Layout', () => {
		test('‚úÖ Layout responsivo - sidebar e conte√∫do', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/help')

			// Verificar se layout flex est√° presente
			await expect(authenticatedPage.locator('div.flex.bg-zinc-50.dark\\:bg-zinc-900')).toBeVisible()

			// Verificar se sidebar tem largura fixa
			await expect(authenticatedPage.locator('div.w-96.border-r.border-zinc-200.dark\\:border-zinc-700')).toBeVisible()

			// Verificar se conte√∫do principal √© flex√≠vel
			await expect(authenticatedPage.locator('div.flex-1.flex.flex-col.min-w-0')).toBeVisible()
		})

		test('‚úÖ Scroll e overflow - navega√ß√£o e conte√∫do', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/help')

			// Verificar se √°reas de scroll est√£o configuradas
			await expect(authenticatedPage.locator('div.flex-1.overflow-y-auto.p-3')).toBeVisible()
			await expect(authenticatedPage.locator('div.flex-1.overflow-y-auto.bg-white.dark\\:bg-zinc-800')).toBeVisible()
		})
	})
})
