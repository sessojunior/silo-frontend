import { test, expect } from '@playwright/test'
import { fillFormField, clickButton } from './utils/auth-helpers'

test.describe('üë• SISTEMA DE GRUPOS E USU√ÅRIOS', () => {
	test.beforeEach(async ({ page }) => {
		// Fazer login como administrador
		await page.goto('/auth/login')
		await page.getByLabel('Email').fill('admin@inpe.br')
		await page.getByLabel('Senha').fill('admin123')
		await page.getByRole('button', { name: 'Entrar' }).click()
		await page.waitForURL('/admin/dashboard')
	})

	test.describe('üè∑Ô∏è Gest√£o de Grupos', () => {
		test('‚úÖ CRUD de grupos - criar/editar/excluir', async ({ page }) => {
			await page.goto('/admin/groups')

			// Clicar no bot√£o de criar grupo
			await clickButton(page, 'Criar Grupo')

			// Preencher formul√°rio
			await fillFormField(page, 'Nome', 'Grupo Teste Playwright')
			await fillFormField(page, 'Descri√ß√£o', 'Descri√ß√£o do grupo de teste')

			// Selecionar √≠cone
			await page.getByRole('button', { name: /selecionar √≠cone/i }).click()
			await page.locator('[data-icon="users"]').click()

			// Selecionar cor
			await page.getByRole('button', { name: /selecionar cor/i }).click()
			await page.locator('[data-color="blue"]').click()

			// Salvar grupo
			await clickButton(page, 'Salvar')

			// Verificar toast de sucesso
			await expect(page.getByText(/grupo criado|salvo com sucesso/i)).toBeVisible()

			// Verificar se grupo aparece na lista
			await expect(page.getByText('Grupo Teste Playwright')).toBeVisible()
		})

		test('‚úÖ 6 grupos padr√£o presentes', async ({ page }) => {
			await page.goto('/admin/groups')

			// Verificar se todos os grupos padr√£o est√£o presentes
			await expect(page.getByText('Administradores')).toBeVisible()
			await expect(page.getByText('Meteorologistas')).toBeVisible()
			await expect(page.getByText('Pesquisadores')).toBeVisible()
			await expect(page.getByText('Operadores')).toBeVisible()
			await expect(page.getByText('Suporte')).toBeVisible()
			await expect(page.getByText('Visitantes')).toBeVisible()
		})

		test('‚úÖ √çcones e cores - personaliza√ß√£o visual', async ({ page }) => {
			await page.goto('/admin/groups')

			// Clicar no bot√£o editar do primeiro grupo
			await page.locator('[data-testid="edit-group"]').first().click()

			// Verificar se seletor de √≠cones est√° vis√≠vel
			await expect(page.getByRole('button', { name: /selecionar √≠cone/i })).toBeVisible()

			// Verificar se seletor de cores est√° vis√≠vel
			await expect(page.getByRole('button', { name: /selecionar cor/i })).toBeVisible()

			// Selecionar novo √≠cone
			await page.getByRole('button', { name: /selecionar √≠cone/i }).click()
			await page.locator('[data-icon="shield"]').click()

			// Selecionar nova cor
			await page.getByRole('button', { name: /selecionar cor/i }).click()
			await page.locator('[data-color="red"]').click()

			// Salvar altera√ß√µes
			await clickButton(page, 'Salvar')

			// Verificar sucesso
			await expect(page.getByText(/grupo atualizado|alterado com sucesso/i)).toBeVisible()
		})

		test('‚úÖ Prote√ß√£o grupo padr√£o - n√£o pode ser exclu√≠do', async ({ page }) => {
			await page.goto('/admin/groups')

			// Tentar excluir grupo padr√£o (Meteorologistas)
			await page.getByText('Meteorologistas').locator('..').locator('[data-testid="delete-group"]').click()

			// Deve mostrar aviso de que n√£o pode ser exclu√≠do
			await expect(page.getByText(/n√£o pode ser exclu√≠do|grupo padr√£o/i)).toBeVisible()
		})
	})

	test.describe('üë§ Gest√£o de Usu√°rios', () => {
		test('‚úÖ CRUD de usu√°rios - criar/editar/excluir', async ({ page }) => {
			await page.goto('/admin/groups/users')

			// Clicar no bot√£o de criar usu√°rio
			await clickButton(page, 'Criar Usu√°rio')

			// Preencher formul√°rio
			await fillFormField(page, 'Nome completo', 'Usu√°rio Teste Playwright')
			await fillFormField(page, 'Email', 'usuario.teste@inpe.br')

			// Selecionar grupo
			await page.getByRole('combobox', { name: /grupo/i }).selectOption('Meteorologistas')

			// Marcar como ativo
			await page.getByRole('checkbox', { name: /ativo/i }).check()

			// Salvar usu√°rio
			await clickButton(page, 'Salvar')

			// Verificar toast de sucesso
			await expect(page.getByText(/usu√°rio criado|salvo com sucesso/i)).toBeVisible()

			// Verificar se usu√°rio aparece na lista
			await expect(page.getByText('Usu√°rio Teste Playwright')).toBeVisible()
		})

		test('‚úÖ Filtro ativos/inativos - funciona corretamente', async ({ page }) => {
			await page.goto('/admin/groups/users')

			// Verificar filtro por usu√°rios ativos
			await page.getByRole('combobox', { name: /status/i }).selectOption('Ativos')
			await page.waitForTimeout(1000)

			// Verificar se apenas usu√°rios ativos s√£o exibidos
			const activeUsers = page.locator('[data-testid="user-item"]')
			if ((await activeUsers.count()) > 0) {
				await expect(activeUsers.first()).toBeVisible()
			}

			// Verificar filtro por usu√°rios inativos
			await page.getByRole('combobox', { name: /status/i }).selectOption('Inativos')
			await page.waitForTimeout(1000)

			// Verificar se apenas usu√°rios inativos s√£o exibidos
			const inactiveUsers = page.locator('[data-testid="user-item"]')
			if ((await inactiveUsers.count()) > 0) {
				await expect(inactiveUsers.first()).toBeVisible()
			}

			// Verificar filtro "Todos"
			await page.getByRole('combobox', { name: /status/i }).selectOption('Todos')
			await page.waitForTimeout(1000)

			// Verificar se todos os usu√°rios s√£o exibidos
			const allUsers = page.locator('[data-testid="user-item"]')
			await expect(allUsers).toBeVisible()
		})

		test('‚úÖ Toggle de ativa√ß√£o - reflete no acesso do usu√°rio', async ({ page }) => {
			await page.goto('/admin/groups/users')

			// Encontrar um usu√°rio ativo
			const activeUser = page.locator('[data-testid="user-item"]').filter({ hasText: 'admin@inpe.br' })
			if ((await activeUser.count()) > 0) {
				// Clicar no toggle de ativa√ß√£o
				await activeUser.locator('[data-testid="activation-toggle"]').click()

				// Verificar se status mudou para inativo
				await expect(activeUser.locator('[data-testid="status-badge"]')).toContainText('Inativo')

				// Fazer logout
				await page.getByRole('button', { name: /configura√ß√µes|perfil/i }).click()
				await page.getByRole('menuitem', { name: 'Sair' }).click()

				// Tentar fazer login com usu√°rio desativado
				await page.getByLabel('Email').fill('admin@inpe.br')
				await page.getByLabel('Senha').fill('admin123')
				await page.getByRole('button', { name: 'Entrar' }).click()

				// Deve mostrar erro de conta inativa
				await expect(page.getByText(/conta inativa|n√£o autorizado|bloqueado/i)).toBeVisible()

				// Fazer login com outro usu√°rio para reativar
				await page.goto('/auth/login')
				await page.getByLabel('Email').fill('admin@inpe.br')
				await page.getByLabel('Senha').fill('admin123')
				await page.getByRole('button', { name: 'Entrar' }).click()

				// Reativar usu√°rio
				await page.goto('/admin/groups/users')
				await activeUser.locator('[data-testid="activation-toggle"]').click()

				// Verificar se status voltou para ativo
				await expect(activeUser.locator('[data-testid="status-badge"]')).toContainText('Ativo')
			}
		})

		test('‚úÖ Perfil completo - dados pessoais e prefer√™ncias', async ({ page }) => {
			await page.goto('/admin/groups/users')

			// Clicar no bot√£o editar do primeiro usu√°rio
			await page.locator('[data-testid="edit-user"]').first().click()

			// Verificar se todos os campos est√£o presentes
			await expect(page.getByLabel('Nome completo')).toBeVisible()
			await expect(page.getByLabel('Email')).toBeVisible()
			await expect(page.getByRole('combobox', { name: /grupo/i })).toBeVisible()
			await expect(page.getByRole('checkbox', { name: /ativo/i })).toBeVisible()

			// Verificar se campo de senha N√ÉO est√° presente (deve ser removido)
			await expect(page.getByLabel('Senha')).not.toBeVisible()

			// Modificar dados
			await page.getByLabel('Nome completo').clear()
			await fillFormField(page, 'Nome completo', 'Usu√°rio Editado Playwright')

			// Salvar altera√ß√µes
			await clickButton(page, 'Salvar')

			// Verificar sucesso
			await expect(page.getByText(/usu√°rio atualizado|alterado com sucesso/i)).toBeVisible()

			// Verificar se altera√ß√µes aparecem na lista
			await expect(page.getByText('Usu√°rio Editado Playwright')).toBeVisible()
		})
	})

	test.describe('üîó Rela√ß√£o Many-to-Many', () => {
		test('‚úÖ Associar usu√°rios a grupos - funciona corretamente', async ({ page }) => {
			await page.goto('/admin/groups')

			// Clicar no primeiro grupo
			await page.locator('[data-testid="group-item"]').first().click()

			// Verificar se se√ß√£o de usu√°rios est√° vis√≠vel
			await expect(page.getByText('Usu√°rios do Grupo')).toBeVisible()

			// Clicar em adicionar usu√°rios
			await clickButton(page, 'Adicionar Usu√°rios')

			// Verificar se seletor abre
			await expect(page.locator('[data-testid="user-selector"]')).toBeVisible()

			// Selecionar usu√°rios
			await page.locator('[data-testid="user-checkbox"]').nth(0).check()
			await page.locator('[data-testid="user-checkbox"]').nth(1).check()

			// Confirmar sele√ß√£o
			await clickButton(page, 'Confirmar')

			// Verificar se usu√°rios foram adicionados
			await expect(page.locator('[data-testid="group-user-item"]')).toHaveCount(2)
		})

		test('‚úÖ Remover usu√°rios de grupos - desassocia√ß√£o', async ({ page }) => {
			await page.goto('/admin/groups')

			// Clicar no primeiro grupo
			await page.locator('[data-testid="group-item"]').first().click()

			// Se houver usu√°rios no grupo, remover um
			const groupUsers = page.locator('[data-testid="group-user-item"]')
			if ((await groupUsers.count()) > 0) {
				// Clicar no bot√£o remover do primeiro usu√°rio
				await page.locator('[data-testid="remove-user"]').first().click()

				// Verificar se usu√°rio foi removido
				await expect(page.locator('[data-testid="group-user-item"]')).toHaveCount((await groupUsers.count()) - 1)
			}
		})

		test('‚úÖ Reflexo na UI - ambos lados mostram relacionamentos', async ({ page }) => {
			await page.goto('/admin/groups')

			// Clicar no primeiro grupo
			await page.locator('[data-testid="group-item"]').first().click()

			// Verificar usu√°rios do grupo
			const groupUsers = page.locator('[data-testid="group-user-item"]')
			const groupUserCount = await groupUsers.count()

			// Ir para p√°gina de usu√°rios
			await page.goto('/admin/groups/users')

			// Verificar se usu√°rios aparecem na lista
			const allUsers = page.locator('[data-testid="user-item"]')
			await expect(allUsers).toBeVisible()

			// Verificar se contagem est√° correta
			if (groupUserCount > 0) {
				await expect(allUsers).toHaveCount.greaterThanOrEqual(groupUserCount)
			}
		})

		test('‚úÖ Navega√ß√£o por abas - entre grupos e usu√°rios', async ({ page }) => {
			await page.goto('/admin/groups')

			// Verificar se aba de grupos est√° ativa
			await expect(page.getByRole('tab', { name: 'Grupos' })).toHaveAttribute('aria-selected', 'true')

			// Clicar na aba de usu√°rios
			await page.getByRole('tab', { name: 'Usu√°rios' }).click()

			// Verificar se redirecionou para p√°gina de usu√°rios
			await page.waitForURL('/admin/groups/users')
			await expect(page.getByRole('heading', { name: /usu√°rios/i })).toBeVisible()

			// Verificar se aba de usu√°rios est√° ativa
			await expect(page.getByRole('tab', { name: 'Usu√°rios' })).toHaveAttribute('aria-selected', 'true')

			// Voltar para grupos
			await page.getByRole('tab', { name: 'Grupos' }).click()

			// Verificar se redirecionou para p√°gina de grupos
			await page.waitForURL('/admin/groups')
			await expect(page.getByRole('heading', { name: /grupos/i })).toBeVisible()
		})
	})

	test.describe('üîç Funcionalidades Avan√ßadas', () => {
		test('‚úÖ Busca por nome e email', async ({ page }) => {
			await page.goto('/admin/groups/users')

			// Busca por nome
			await page.getByPlaceholder(/buscar usu√°rios/i).fill('admin')
			await page.waitForTimeout(1000)

			// Verificar se resultados cont√™m "admin"
			const nameResults = page.locator('[data-testid="user-item"]')
			if ((await nameResults.count()) > 0) {
				await expect(nameResults.first()).toBeVisible()
			}

			// Busca por email
			await page.getByPlaceholder(/buscar usu√°rios/i).clear()
			await page.getByPlaceholder(/buscar usu√°rios/i).fill('@inpe.br')
			await page.waitForTimeout(1000)

			// Verificar se resultados cont√™m emails @inpe.br
			const emailResults = page.locator('[data-testid="user-item"]')
			if ((await emailResults.count()) > 0) {
				await expect(emailResults.first()).toBeVisible()
			}
		})

		test('‚úÖ Filtro por grupo', async ({ page }) => {
			await page.goto('/admin/groups/users')

			// Verificar filtro por grupo espec√≠fico
			await page.getByRole('combobox', { name: /grupo/i }).selectOption('Meteorologistas')
			await page.waitForTimeout(1000)

			// Verificar se apenas usu√°rios do grupo selecionado s√£o exibidos
			const groupUsers = page.locator('[data-testid="user-item"]')
			if ((await groupUsers.count()) > 0) {
				await expect(groupUsers.first()).toBeVisible()
			}

			// Verificar filtro "Todos os grupos"
			await page.getByRole('combobox', { name: /grupo/i }).selectOption('Todos os grupos')
			await page.waitForTimeout(1000)

			// Verificar se todos os usu√°rios s√£o exibidos
			const allUsers = page.locator('[data-testid="user-item"]')
			await expect(allUsers).toBeVisible()
		})

		test('‚úÖ Estat√≠sticas de usu√°rios por grupo', async ({ page }) => {
			await page.goto('/admin/groups')

			// Verificar se estat√≠sticas est√£o vis√≠veis
			await expect(page.getByText('Total de Grupos')).toBeVisible()
			await expect(page.getByText('Total de Usu√°rios')).toBeVisible()
			await expect(page.getByText('Grupos Ativos')).toBeVisible()
			await expect(page.getByText('Usu√°rios Ativos')).toBeVisible()

			// Verificar se valores s√£o n√∫meros
			const groupCount = page.locator('text=/\\d+/').first()
			await expect(groupCount).toBeVisible()
		})

		test('‚úÖ Responsividade em diferentes resolu√ß√µes', async ({ page }) => {
			await page.goto('/admin/groups')

			// Testar resolu√ß√£o desktop
			await page.setViewportSize({ width: 1920, height: 1080 })
			await expect(page.getByRole('heading', { name: /grupos/i })).toBeVisible()

			// Testar resolu√ß√£o tablet
			await page.setViewportSize({ width: 768, height: 1024 })
			await expect(page.getByRole('heading', { name: /grupos/i })).toBeVisible()

			// Testar resolu√ß√£o mobile
			await page.setViewportSize({ width: 375, height: 667 })
			await expect(page.getByRole('heading', { name: /grupos/i })).toBeVisible()

			// Voltar para desktop
			await page.setViewportSize({ width: 1920, height: 1080 })
		})

		test('‚úÖ Valida√ß√£o de campos obrigat√≥rios', async ({ page }) => {
			await page.goto('/admin/groups')

			// Clicar em criar grupo
			await clickButton(page, 'Criar Grupo')

			// Tentar salvar sem preencher campos obrigat√≥rios
			await clickButton(page, 'Salvar')

			// Deve mostrar erros de valida√ß√£o
			await expect(page.getByText(/nome √© obrigat√≥rio|campo obrigat√≥rio/i)).toBeVisible()

			// Preencher apenas nome
			await fillFormField(page, 'Nome', 'Grupo V√°lido')

			// Tentar salvar novamente
			await clickButton(page, 'Salvar')

			// Deve salvar com sucesso
			await expect(page.getByText(/grupo criado|salvo com sucesso/i)).toBeVisible()
		})

		test('‚úÖ Confirma√ß√£o para a√ß√µes destrutivas', async ({ page }) => {
			await page.goto('/admin/groups')

			// Clicar no bot√£o excluir do primeiro grupo (se n√£o for padr√£o)
			const deleteButtons = page.locator('[data-testid="delete-group"]')
			if ((await deleteButtons.count()) > 0) {
				await deleteButtons.first().click()

				// Verificar se dialog de confirma√ß√£o aparece
				await expect(page.getByText(/confirmar exclus√£o|excluir grupo/i)).toBeVisible()

				// Cancelar exclus√£o
				await clickButton(page, 'Cancelar')

				// Verificar se dialog fechou
				await expect(page.getByText(/confirmar exclus√£o|excluir grupo/i)).not.toBeVisible()
			}
		})
	})
})
