import { test, expect } from './utils/auth-helpers'

test.describe('üë• SISTEMA DE GRUPOS E USU√ÅRIOS', () => {
	test.describe('üè∑Ô∏è Gest√£o de Grupos', () => {
		test('‚úÖ CRUD de grupos - criar/editar/excluir', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups')

			// Verificar se p√°gina carregou
			await expect(authenticatedPage.getByRole('heading', { name: /grupos/i })).toBeVisible()

			// Clicar em criar novo grupo
			await authenticatedPage.getByRole('button', { name: /criar|novo/i }).click()

			// Verificar se formul√°rio abriu
			await expect(authenticatedPage.getByLabel('Nome do grupo')).toBeVisible()

			// Preencher dados do grupo
			await authenticatedPage.getByLabel('Nome do grupo').fill('Grupo Teste Playwright')
			await authenticatedPage.getByLabel('Descri√ß√£o').fill('Descri√ß√£o do grupo de teste')
			await authenticatedPage.getByRole('combobox', { name: /√≠cone/i }).selectOption('users')
			await authenticatedPage.getByRole('combobox', { name: /cor/i }).selectOption('blue')

			// Salvar grupo
			await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

			// Verificar toast de sucesso
			await expect(authenticatedPage.getByText(/grupo criado|salvo com sucesso/i)).toBeVisible()

			// Verificar se grupo aparece na lista
			await expect(authenticatedPage.getByText('Grupo Teste Playwright')).toBeVisible()
		})

		test('‚úÖ 6 grupos padr√£o presentes', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups')

			// Verificar se grupos padr√£o est√£o presentes
			const defaultGroups = ['Administradores', 'Meteorologistas', 'Pesquisadores', 'Operadores', 'Suporte', 'Visitantes']

			for (const groupName of defaultGroups) {
				await expect(authenticatedPage.getByText(groupName)).toBeVisible()
			}

			// Verificar se h√° exatamente 6 grupos
			const groupItems = authenticatedPage.locator('[data-testid="group-item"]')
			await expect(groupItems).toHaveCount(6)
		})

		test('‚úÖ √çcones e cores - personaliza√ß√£o visual', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups')

			// Verificar se grupos t√™m √≠cones e cores
			const groupItems = authenticatedPage.locator('[data-testid="group-item"]')
			if ((await groupItems.count()) > 0) {
				const firstGroup = groupItems.first()

				// Verificar se √≠cone est√° vis√≠vel
				await expect(firstGroup.locator('[data-testid="group-icon"]')).toBeVisible()

				// Verificar se cor est√° aplicada
				const iconElement = firstGroup.locator('[data-testid="group-icon"]')
				await expect(iconElement).toBeVisible()
			}
		})

		test('‚úÖ Prote√ß√£o grupo padr√£o - n√£o pode ser exclu√≠do', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups')

			// Tentar excluir grupo padr√£o
			const adminGroup = authenticatedPage.getByText('Administradores').first()
			await adminGroup.click()

			// Verificar se bot√£o de excluir est√° desabilitado ou n√£o existe
			const deleteButton = authenticatedPage.getByRole('button', { name: /excluir/i })
			if ((await deleteButton.count()) > 0) {
				// Se bot√£o existe, deve estar desabilitado
				await expect(deleteButton).toBeDisabled()
			}
		})
	})

	test.describe('üë§ Gest√£o de Usu√°rios', () => {
		test('‚úÖ CRUD de usu√°rios - criar/editar/excluir', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups/users')

			// Verificar se p√°gina carregou
			await expect(authenticatedPage.getByRole('heading', { name: /usu√°rios/i })).toBeVisible()

			// Clicar em criar novo usu√°rio
			await authenticatedPage.getByRole('button', { name: /criar|novo/i }).click()

			// Verificar se formul√°rio abriu
			await expect(authenticatedPage.getByLabel('Nome completo')).toBeVisible()

			// Preencher dados do usu√°rio
			await authenticatedPage.getByLabel('Nome completo').fill('Usu√°rio Teste Playwright')
			await authenticatedPage.getByLabel('Email').fill('teste@playwright.com')
			await authenticatedPage.getByLabel('Senha').fill('Senha123!')
			await authenticatedPage.getByRole('combobox', { name: /grupo/i }).selectOption('Visitantes')

			// Salvar usu√°rio
			await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

			// Verificar toast de sucesso
			await expect(authenticatedPage.getByText(/usu√°rio criado|salvo com sucesso/i)).toBeVisible()

			// Verificar se usu√°rio aparece na lista
			await expect(authenticatedPage.getByText('Usu√°rio Teste Playwright')).toBeVisible()
		})

		test('‚úÖ Filtro ativos/inativos - funciona corretamente', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups/users')

			// Verificar se filtro est√° vis√≠vel
			await expect(authenticatedPage.getByRole('combobox', { name: /status/i })).toBeVisible()

			// Filtrar por usu√°rios ativos
			await authenticatedPage.getByRole('combobox', { name: /status/i }).selectOption('active')

			// Verificar se apenas usu√°rios ativos s√£o exibidos
			const activeUsers = authenticatedPage.locator('[data-testid="user-item"][data-status="active"]')
			await expect(activeUsers).toBeVisible()

			// Filtrar por usu√°rios inativos
			await authenticatedPage.getByRole('combobox', { name: /status/i }).selectOption('inactive')

			// Verificar se apenas usu√°rios inativos s√£o exibidos
			const inactiveUsers = authenticatedPage.locator('[data-testid="user-item"][data-status="inactive"]')
			if ((await inactiveUsers.count()) > 0) {
				await expect(inactiveUsers).toBeVisible()
			}
		})

		test('‚úÖ Toggle de ativa√ß√£o - reflete no acesso do usu√°rio', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups/users')

			// Encontrar um usu√°rio ativo
			const activeUser = authenticatedPage.locator('[data-testid="user-item"][data-status="active"]').first()
			if ((await activeUser.count()) > 0) {
				// Clicar no toggle de ativa√ß√£o
				const toggle = activeUser.locator('[data-testid="activation-toggle"]')
				await toggle.click()

				// Verificar se status mudou para inativo
				await expect(activeUser).toHaveAttribute('data-status', 'inactive')

				// Reativar usu√°rio
				await toggle.click()
				await expect(activeUser).toHaveAttribute('data-status', 'active')
			}
		})

		test('‚úÖ Perfil completo - dados pessoais e prefer√™ncias', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups/users')

			// Clicar em um usu√°rio para ver perfil
			const userItem = authenticatedPage.locator('[data-testid="user-item"]').first()
			if ((await userItem.count()) > 0) {
				await userItem.click()

				// Verificar se perfil abriu
				await expect(authenticatedPage.getByText(/perfil|dados pessoais/i)).toBeVisible()

				// Verificar se dados pessoais est√£o vis√≠veis
				await expect(authenticatedPage.getByText(/nome|email|telefone/i)).toBeVisible()

				// Verificar se prefer√™ncias est√£o vis√≠veis
				await expect(authenticatedPage.getByText(/prefer√™ncias|configura√ß√µes/i)).toBeVisible()
			}
		})
	})

	test.describe('üîó Relacionamentos Grupos-Usu√°rios', () => {
		test('‚úÖ Associar usu√°rios a grupos - funciona corretamente', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups')

			// Clicar em um grupo
			const groupItem = authenticatedPage.locator('[data-testid="group-item"]').first()
			await groupItem.click()

			// Verificar se se√ß√£o de usu√°rios est√° vis√≠vel
			await expect(authenticatedPage.getByText(/usu√°rios do grupo|membros/i)).toBeVisible()

			// Clicar em adicionar usu√°rio
			await authenticatedPage.getByRole('button', { name: /adicionar|associar/i }).click()

			// Verificar se seletor de usu√°rios abriu
			await expect(authenticatedPage.getByText(/selecionar usu√°rio/i)).toBeVisible()

			// Selecionar um usu√°rio
			const userCheckbox = authenticatedPage.locator('[data-testid="user-checkbox"]').first()
			await userCheckbox.check()

			// Confirmar associa√ß√£o
			await authenticatedPage.getByRole('button', { name: 'Confirmar' }).click()

			// Verificar toast de sucesso
			await expect(authenticatedPage.getByText(/usu√°rio associado|adicionado com sucesso/i)).toBeVisible()
		})

		test('‚úÖ Remover usu√°rios de grupos - desassocia√ß√£o', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups')

			// Clicar em um grupo que tenha usu√°rios
			const groupWithUsers = authenticatedPage.locator('[data-testid="group-item"]').first()
			await groupWithUsers.click()

			// Verificar se h√° usu√°rios no grupo
			const groupUsers = authenticatedPage.locator('[data-testid="group-user"]')
			if ((await groupUsers.count()) > 0) {
				// Clicar no bot√£o de remover do primeiro usu√°rio
				const removeButton = groupUsers.first().locator('[data-testid="remove-user"]')
				await removeButton.click()

				// Verificar se confirma√ß√£o apareceu
				await expect(authenticatedPage.getByText(/confirmar remo√ß√£o|remover usu√°rio/i)).toBeVisible()

				// Confirmar remo√ß√£o
				await authenticatedPage.getByRole('button', { name: 'Confirmar' }).click()

				// Verificar toast de sucesso
				await expect(authenticatedPage.getByText(/usu√°rio removido|desassociado com sucesso/i)).toBeVisible()
			}
		})

		test('‚úÖ Reflexo na UI - ambos lados mostram relacionamentos', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups')

			// Verificar um grupo
			const groupItem = authenticatedPage.locator('[data-testid="group-item"]').first()
			const groupName = await groupItem.locator('[data-testid="group-name"]').textContent()

			// Clicar no grupo
			await groupItem.click()

			// Verificar usu√°rios do grupo
			const groupUsers = authenticatedPage.locator('[data-testid="group-user"]')
			const userCount = await groupUsers.count()

			// Ir para p√°gina de usu√°rios
			await authenticatedPage.goto('/admin/groups/users')

			// Filtrar por grupo
			await authenticatedPage.getByRole('combobox', { name: /grupo/i }).selectOption(groupName || '')

			// Verificar se contagem de usu√°rios √© consistente
			const filteredUsers = authenticatedPage.locator('[data-testid="user-item"]')
			await expect(filteredUsers).toHaveCount(userCount)
		})
	})

	test.describe('üîç Funcionalidades Avan√ßadas', () => {
		test('‚úÖ Navega√ß√£o por abas - entre grupos e usu√°rios', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups')

			// Verificar se abas est√£o vis√≠veis
			await expect(authenticatedPage.getByRole('tab', { name: /grupos/i })).toBeVisible()
			await expect(authenticatedPage.getByRole('tab', { name: /usu√°rios/i })).toBeVisible()

			// Clicar na aba de usu√°rios
			await authenticatedPage.getByRole('tab', { name: /usu√°rios/i }).click()

			// Verificar se p√°gina de usu√°rios carregou
			await expect(authenticatedPage.getByRole('heading', { name: /usu√°rios/i })).toBeVisible()

			// Voltar para aba de grupos
			await authenticatedPage.getByRole('tab', { name: /grupos/i }).click()

			// Verificar se p√°gina de grupos carregou
			await expect(authenticatedPage.getByRole('heading', { name: /grupos/i })).toBeVisible()
		})

		test('‚úÖ Busca por nome e email', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups/users')

			// Verificar se campo de busca est√° vis√≠vel
			await expect(authenticatedPage.getByPlaceholder(/buscar|pesquisar/i)).toBeVisible()

			// Buscar por nome
			await authenticatedPage.getByPlaceholder(/buscar|pesquisar/i).fill('admin')

			// Aguardar resultados
			await authenticatedPage.waitForTimeout(1000)

			// Verificar se resultados aparecem
			const searchResults = authenticatedPage.locator('[data-testid="user-item"]')
			await expect(searchResults).toBeVisible()

			// Limpar busca
			await authenticatedPage.getByPlaceholder(/buscar|pesquisar/i).clear()

			// Verificar se lista original voltou
			await expect(authenticatedPage.locator('[data-testid="user-item"]')).toBeVisible()
		})

		test('‚úÖ Filtro por grupo', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups/users')

			// Verificar se filtro por grupo est√° vis√≠vel
			await expect(authenticatedPage.getByRole('combobox', { name: /grupo/i })).toBeVisible()

			// Selecionar um grupo espec√≠fico
			await authenticatedPage.getByRole('combobox', { name: /grupo/i }).selectOption('Administradores')

			// Verificar se apenas usu√°rios do grupo selecionado s√£o exibidos
			const filteredUsers = authenticatedPage.locator('[data-testid="user-item"]')
			if ((await filteredUsers.count()) > 0) {
				// Verificar se todos os usu√°rios pertencem ao grupo selecionado
				for (let i = 0; i < (await filteredUsers.count()); i++) {
					const userGroup = filteredUsers.nth(i).locator('[data-testid="user-group"]')
					await expect(userGroup).toContainText('Administradores')
				}
			}
		})

		test('‚úÖ Estat√≠sticas de usu√°rios por grupo', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups')

			// Verificar se estat√≠sticas est√£o vis√≠veis
			await expect(authenticatedPage.getByText(/total de grupos|total de usu√°rios/i)).toBeVisible()

			// Verificar se contadores s√£o n√∫meros v√°lidos
			const totalGroups = authenticatedPage.locator('[data-testid="total-groups"]')
			const totalUsers = authenticatedPage.locator('[data-testid="total-users"]')

			if ((await totalGroups.count()) > 0) {
				const groupsCount = await totalGroups.textContent()
				expect(parseInt(groupsCount || '0')).toBeGreaterThan(0)
			}

			if ((await totalUsers.count()) > 0) {
				const usersCount = await totalUsers.textContent()
				expect(parseInt(usersCount || '0')).toBeGreaterThan(0)
			}
		})
	})

	test.describe('üì± UX e Valida√ß√µes', () => {
		test('‚úÖ Responsividade em diferentes resolu√ß√µes', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups')

			// Testar resolu√ß√£o desktop
			await authenticatedPage.setViewportSize({ width: 1920, height: 1080 })
			await expect(authenticatedPage.getByRole('heading', { name: /grupos/i })).toBeVisible()

			// Testar resolu√ß√£o tablet
			await authenticatedPage.setViewportSize({ width: 768, height: 1024 })
			await expect(authenticatedPage.getByRole('heading', { name: /grupos/i })).toBeVisible()

			// Testar resolu√ß√£o mobile
			await authenticatedPage.setViewportSize({ width: 375, height: 667 })
			await expect(authenticatedPage.getByRole('heading', { name: /grupos/i })).toBeVisible()

			// Voltar para desktop
			await authenticatedPage.setViewportSize({ width: 1920, height: 1080 })
		})

		test('‚úÖ Valida√ß√£o de campos obrigat√≥rios', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups')

			// Clicar em criar novo grupo
			await authenticatedPage.getByRole('button', { name: /criar|novo/i }).click()

			// Tentar salvar sem preencher campos obrigat√≥rios
			await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

			// Verificar se erro de campo obrigat√≥rio aparece
			await expect(authenticatedPage.getByText(/nome √© obrigat√≥rio|campo obrigat√≥rio/i)).toBeVisible()

			// Preencher campo obrigat√≥rio
			await authenticatedPage.getByLabel('Nome do grupo').fill('Grupo V√°lido')

			// Tentar salvar novamente
			await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

			// Deve salvar com sucesso
			await expect(authenticatedPage.getByText(/grupo criado|salvo com sucesso/i)).toBeVisible()
		})

		test('‚úÖ Confirma√ß√£o para a√ß√µes destrutivas', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/groups')

			// Tentar excluir um grupo (que n√£o seja padr√£o)
			const nonDefaultGroup = authenticatedPage.locator('[data-testid="group-item"]:not([data-default="true"])').first()
			if ((await nonDefaultGroup.count()) > 0) {
				await nonDefaultGroup.click()

				// Clicar em excluir
				await authenticatedPage.getByRole('button', { name: /excluir/i }).click()

				// Verificar se dialog de confirma√ß√£o apareceu
				await expect(authenticatedPage.getByText(/confirmar exclus√£o|excluir grupo/i)).toBeVisible()

				// Cancelar exclus√£o
				await authenticatedPage.getByRole('button', { name: 'Cancelar' }).click()

				// Verificar se dialog fechou
				await expect(authenticatedPage.getByText(/confirmar exclus√£o|excluir grupo/i)).not.toBeVisible()
			}
		})
	})
})
