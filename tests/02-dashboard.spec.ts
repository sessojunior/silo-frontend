import { test, expect } from './utils/auth-helpers'

test.describe('üìä DASHBOARD PRINCIPAL', () => {
	test('‚úÖ Carregamento inicial do dashboard', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Verificar se p√°gina carregou
		await expect(authenticatedPage.getByRole('heading', { name: 'Dashboard' })).toBeVisible()

		// Verificar se m√©tricas est√£o vis√≠veis
		await expect(authenticatedPage.getByText('Total de Produtos')).toBeVisible()
		await expect(authenticatedPage.getByText('Total de Problemas')).toBeVisible()
		await expect(authenticatedPage.getByText('Total de Usu√°rios')).toBeVisible()
	})

	test('‚úÖ Gr√°ficos ApexCharts funcionais', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Aguardar carregamento dos gr√°ficos
		await authenticatedPage.waitForTimeout(2000)

		// Verificar se gr√°ficos est√£o renderizados
		const charts = authenticatedPage.locator('[data-testid="apexcharts"]')
		await expect(charts).toHaveCount(3) // Deve ter 3 gr√°ficos

		// Verificar se gr√°fico donut "Causas de problemas" est√° vis√≠vel
		await expect(authenticatedPage.getByText('Causas de problemas')).toBeVisible()

		// Verificar se gr√°fico de colunas est√° vis√≠vel
		await expect(authenticatedPage.getByText('Status dos Produtos')).toBeVisible()

		// Verificar se gr√°fico de linha est√° vis√≠vel
		await expect(authenticatedPage.getByText('Atividade dos √öltimos 28 Dias')).toBeVisible()
	})

	test('‚úÖ Donut "Causas de problemas" com dados dos √∫ltimos 28 dias', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Aguardar carregamento do gr√°fico
		await authenticatedPage.waitForTimeout(2000)

		// Verificar se gr√°fico donut est√° vis√≠vel
		const donutChart = authenticatedPage.locator('[data-testid="apexcharts"]').first()
		await expect(donutChart).toBeVisible()

		// Verificar se categorias padr√£o est√£o presentes
		await expect(authenticatedPage.getByText('Rede externa')).toBeVisible()
		await expect(authenticatedPage.getByText('Rede interna')).toBeVisible()
		await expect(authenticatedPage.getByText('Servidor indispon√≠vel')).toBeVisible()
		await expect(authenticatedPage.getByText('Falha humana')).toBeVisible()
		await expect(authenticatedPage.getByText('Erro no software')).toBeVisible()
		await expect(authenticatedPage.getByText('Outros')).toBeVisible()
	})

	test('‚úÖ Responsividade em diferentes resolu√ß√µes', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Testar resolu√ß√£o desktop
		await authenticatedPage.setViewportSize({ width: 1920, height: 1080 })
		await expect(authenticatedPage.getByRole('heading', { name: 'Dashboard' })).toBeVisible()

		// Testar resolu√ß√£o tablet
		await authenticatedPage.setViewportSize({ width: 768, height: 1024 })
		await expect(authenticatedPage.getByRole('heading', { name: 'Dashboard' })).toBeVisible()

		// Testar resolu√ß√£o mobile
		await authenticatedPage.setViewportSize({ width: 375, height: 667 })
		await expect(authenticatedPage.getByRole('heading', { name: 'Dashboard' })).toBeVisible()

		// Voltar para desktop
		await authenticatedPage.setViewportSize({ width: 1920, height: 1080 })
	})

	test('‚úÖ Modo dark/light para gr√°ficos', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Aguardar carregamento
		await authenticatedPage.waitForTimeout(2000)

		// Verificar se gr√°ficos est√£o vis√≠veis no modo light
		const charts = authenticatedPage.locator('[data-testid="apexcharts"]')
		await expect(charts).toHaveCount(3)

		// Alternar para modo dark
		await authenticatedPage.getByRole('button', { name: /tema|dark|light/i }).click()

		// Aguardar transi√ß√£o
		await authenticatedPage.waitForTimeout(1000)

		// Verificar se gr√°ficos ainda est√£o vis√≠veis no modo dark
		await expect(charts).toHaveCount(3)

		// Verificar se tema mudou
		const body = authenticatedPage.locator('body')
		await expect(body).toHaveClass(/dark|dark-mode/i)
	})

	test('‚úÖ M√©tricas de resumo funcionais', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Verificar se m√©tricas est√£o vis√≠veis
		await expect(authenticatedPage.getByText('Total de Produtos')).toBeVisible()
		await expect(authenticatedPage.getByText('Total de Problemas')).toBeVisible()
		await expect(authenticatedPage.getByText('Total de Usu√°rios')).toBeVisible()

		// Verificar se valores s√£o n√∫meros
		const productCount = authenticatedPage.locator('[data-testid="product-count"]')
		const problemCount = authenticatedPage.locator('[data-testid="problem-count"]')
		const userCount = authenticatedPage.locator('[data-testid="user-count"]')

		if ((await productCount.count()) > 0) {
			const count = await productCount.textContent()
			expect(parseInt(count || '0')).toBeGreaterThanOrEqual(0)
		}

		if ((await problemCount.count()) > 0) {
			const count = await problemCount.textContent()
			expect(parseInt(count || '0')).toBeGreaterThanOrEqual(0)
		}

		if ((await userCount.count()) > 0) {
			const count = await userCount.textContent()
			expect(parseInt(count || '0')).toBeGreaterThanOrEqual(0)
		}
	})

	test('‚úÖ Navega√ß√£o para outras p√°ginas a partir do dashboard', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Verificar se links de navega√ß√£o est√£o vis√≠veis
		await expect(authenticatedPage.getByRole('link', { name: /produtos/i })).toBeVisible()
		await expect(authenticatedPage.getByRole('link', { name: /problemas/i })).toBeVisible()
		await expect(authenticatedPage.getByRole('link', { name: /usu√°rios/i })).toBeVisible()

		// Clicar em produtos
		await authenticatedPage.getByRole('link', { name: /produtos/i }).click()
		await authenticatedPage.waitForURL('/admin/products')

		// Verificar se p√°gina de produtos carregou
		await expect(authenticatedPage.getByRole('heading', { name: /produtos/i })).toBeVisible()

		// Voltar para dashboard
		await authenticatedPage.goto('/admin/dashboard')
		await expect(authenticatedPage.getByRole('heading', { name: 'Dashboard' })).toBeVisible()
	})

	test('‚úÖ Atualiza√ß√£o autom√°tica de dados', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Aguardar carregamento inicial
		await authenticatedPage.waitForTimeout(2000)

		// Verificar se dados est√£o vis√≠veis
		await expect(authenticatedPage.getByText('Total de Produtos')).toBeVisible()

		// Aguardar poss√≠vel atualiza√ß√£o autom√°tica
		await authenticatedPage.waitForTimeout(5000)

		// Verificar se dados ainda est√£o vis√≠veis
		await expect(authenticatedPage.getByText('Total de Produtos')).toBeVisible()

		// Verificar se n√£o h√° erros de carregamento
		await expect(authenticatedPage.locator('body')).not.toContainText('Erro ao carregar')
		await expect(authenticatedPage.locator('body')).not.toContainText('Falha na conex√£o')
	})

	test('‚úÖ Performance de carregamento', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Medir tempo de carregamento
		const startTime = Date.now()

		// Aguardar carregamento completo
		await authenticatedPage.waitForLoadState('networkidle')

		const loadTime = Date.now() - startTime

		// Verificar se carregou em tempo aceit√°vel (menos de 10 segundos)
		expect(loadTime).toBeLessThan(10000)

		console.log(`‚úÖ Dashboard carregou em ${loadTime}ms`)

		// Verificar se todos os elementos principais est√£o vis√≠veis
		await expect(authenticatedPage.getByRole('heading', { name: 'Dashboard' })).toBeVisible()
		await expect(authenticatedPage.getByText('Total de Produtos')).toBeVisible()
		await expect(authenticatedPage.locator('[data-testid="apexcharts"]')).toBeVisible()
	})
})
