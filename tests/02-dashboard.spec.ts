import { test, expect } from '@playwright/test'
import { test as authTest } from './utils/auth-helpers'

test.describe('üìä DASHBOARD PRINCIPAL', () => {
	test.beforeEach(async ({ page }) => {
		// Fazer login como administrador
		await page.goto('/auth/login')
		await page.getByLabel('Email').fill('admin@inpe.br')
		await page.getByLabel('Senha').fill('admin123')
		await page.getByRole('button', { name: 'Entrar' }).click()
		await page.waitForURL('/admin/dashboard')
	})

	test('‚úÖ Carregamento inicial do dashboard', async ({ page }) => {
		await page.goto('/admin/dashboard')

		// Verificar se p√°gina carregou
		await expect(page.getByRole('heading', { name: 'Dashboard' })).toBeVisible()

		// Verificar se m√©tricas est√£o vis√≠veis
		await expect(page.getByText('Total de Produtos')).toBeVisible()
		await expect(page.getByText('Total de Problemas')).toBeVisible()
		await expect(page.getByText('Total de Usu√°rios')).toBeVisible()
	})

	test('‚úÖ Gr√°ficos ApexCharts funcionais', async ({ page }) => {
		await page.goto('/admin/dashboard')

		// Aguardar carregamento dos gr√°ficos
		await page.waitForTimeout(2000)

		// Verificar se gr√°ficos est√£o renderizados
		const charts = page.locator('[data-testid="apexcharts"]')
		await expect(charts).toHaveCount(3) // Deve ter 3 gr√°ficos

		// Verificar se gr√°fico donut "Causas de problemas" est√° vis√≠vel
		await expect(page.getByText('Causas de problemas')).toBeVisible()

		// Verificar se gr√°fico de colunas est√° vis√≠vel
		await expect(page.getByText('Status dos Produtos')).toBeVisible()

		// Verificar se gr√°fico de linha est√° vis√≠vel
		await expect(page.getByText('Atividade dos √öltimos 28 Dias')).toBeVisible()
	})

	test('‚úÖ Donut "Causas de problemas" com dados dos √∫ltimos 28 dias', async ({ page }) => {
		await page.goto('/admin/dashboard')

		// Aguardar carregamento do gr√°fico
		await page.waitForTimeout(2000)

		// Verificar se gr√°fico donut est√° vis√≠vel
		const donutChart = page.locator('[data-testid="apexcharts"]').first()
		await expect(donutChart).toBeVisible()

		// Verificar se categorias padr√£o est√£o presentes
		await expect(page.getByText('Rede externa')).toBeVisible()
		await expect(page.getByText('Rede interna')).toBeVisible()
		await expect(page.getByText('Servidor indispon√≠vel')).toBeVisible()
		await expect(page.getByText('Falha humana')).toBeVisible()
		await expect(page.getByText('Erro no software')).toBeVisible()
		await expect(page.getByText('Outros')).toBeVisible()
	})

	test('‚úÖ Responsividade em diferentes resolu√ß√µes', async ({ page }) => {
		await page.goto('/admin/dashboard')

		// Testar resolu√ß√£o desktop
		await page.setViewportSize({ width: 1920, height: 1080 })
		await expect(page.getByRole('heading', { name: 'Dashboard' })).toBeVisible()

		// Testar resolu√ß√£o tablet
		await page.setViewportSize({ width: 768, height: 1024 })
		await expect(page.getByRole('heading', { name: 'Dashboard' })).toBeVisible()

		// Testar resolu√ß√£o mobile
		await page.setViewportSize({ width: 375, height: 667 })
		await expect(page.getByRole('heading', { name: 'Dashboard' })).toBeVisible()

		// Voltar para desktop
		await page.setViewportSize({ width: 1920, height: 1080 })
	})

	test('‚úÖ Modo dark/light para gr√°ficos', async ({ page }) => {
		await page.goto('/admin/dashboard')

		// Aguardar carregamento
		await page.waitForTimeout(2000)

		// Verificar se gr√°ficos est√£o vis√≠veis no modo light
		const charts = page.locator('[data-testid="apexcharts"]')
		await expect(charts).toHaveCount(3)

		// Alternar para modo dark
		await page.getByRole('button', { name: /tema|dark|light/i }).click()

		// Aguardar transi√ß√£o
		await page.waitForTimeout(1000)

		// Verificar se gr√°ficos ainda est√£o vis√≠veis no modo dark
		await expect(charts).toHaveCount(3)
	})

	test('‚úÖ M√©tricas de resumo funcionais', async ({ page }) => {
		await page.goto('/admin/dashboard')

		// Verificar cards de m√©tricas
		await expect(page.getByText('Total de Produtos')).toBeVisible()
		await expect(page.getByText('Total de Problemas')).toBeVisible()
		await expect(page.getByText('Total de Usu√°rios')).toBeVisible()

		// Verificar se valores s√£o n√∫meros
		const productCount = page.locator('text=/\\d+/').first()
		await expect(productCount).toBeVisible()
	})

	test('‚úÖ Navega√ß√£o para outras p√°ginas a partir do dashboard', async ({ page }) => {
		await page.goto('/admin/dashboard')

		// Clicar no link de produtos
		await page.getByRole('link', { name: /produtos/i }).click()
		await page.waitForURL('/admin/products')
		await expect(page.getByRole('heading', { name: /produtos/i })).toBeVisible()

		// Voltar para dashboard
		await page.goto('/admin/dashboard')

		// Clicar no link de problemas
		await page.getByRole('link', { name: /problemas/i }).click()
		await page.waitForURL('/admin/problems')
		await expect(page.getByRole('heading', { name: /problemas/i })).toBeVisible()
	})

	test('‚úÖ Atualiza√ß√£o autom√°tica de dados', async ({ page }) => {
		await page.goto('/admin/dashboard')

		// Aguardar carregamento inicial
		await page.waitForTimeout(2000)

		// Fazer refresh da p√°gina
		await page.reload()

		// Verificar se dados carregaram novamente
		await expect(page.getByRole('heading', { name: 'Dashboard' })).toBeVisible()
		await expect(page.getByText('Total de Produtos')).toBeVisible()

		// Aguardar carregamento dos gr√°ficos
		await page.waitForTimeout(2000)
		const charts = page.locator('[data-testid="apexcharts"]')
		await expect(charts).toHaveCount(3)
	})

	test('‚úÖ Performance de carregamento', async ({ page }) => {
		const startTime = Date.now()

		await page.goto('/admin/dashboard')

		// Aguardar carregamento completo
		await page.waitForLoadState('networkidle')
		await page.waitForTimeout(2000) // Aguardar gr√°ficos

		const loadTime = Date.now() - startTime

		// Verificar se carregou em tempo aceit√°vel (menos de 10 segundos)
		expect(loadTime).toBeLessThan(10000)

		// Verificar se todos os elementos est√£o vis√≠veis
		await expect(page.getByRole('heading', { name: 'Dashboard' })).toBeVisible()
		await expect(page.getByText('Total de Produtos')).toBeVisible()

		const charts = page.locator('[data-testid="apexcharts"]')
		await expect(charts).toHaveCount(3)
	})
})
