import { test, expect } from './utils/auth-helpers'

test.describe('üìä DASHBOARD PRINCIPAL', () => {
	test('‚úÖ Carregamento inicial do dashboard', async ({ authenticatedPage }) => {
		// Navegar para o dashboard
		await authenticatedPage.goto('/admin/dashboard')

		// Aguardar carregamento da p√°gina
		await authenticatedPage.waitForLoadState('networkidle')

		// Verificar se est√° na p√°gina correta - usar elementos que realmente existem
		await expect(authenticatedPage.getByText('Causas de problemas (28 dias)')).toBeVisible({ timeout: 60000 })

		// Fazer scroll de forma mais espec√≠fica - rolar para baixo em etapas
		await authenticatedPage.evaluate(() => {
			// Rolar para o meio da p√°gina primeiro
			window.scrollTo(0, document.body.scrollHeight / 2)
		})

		// Aguardar um pouco
		await authenticatedPage.waitForTimeout(1000)

		// Rolar para o final
		await authenticatedPage.evaluate(() => {
			window.scrollTo(0, document.body.scrollHeight)
		})

		// Aguardar mais tempo para os gr√°ficos renderizarem ap√≥s o scroll
		await authenticatedPage.waitForTimeout(5000)

		// Verificar se gr√°ficos est√£o renderizados - usar seletores que realmente existem
		// Os gr√°ficos ApexCharts s√£o renderizados como divs com classes espec√≠ficas
		const chartContainers = authenticatedPage.locator('.w-full.max-w-lg')
		await expect(chartContainers).toHaveCount(3, { timeout: 60000 }) // Deve ter 3 gr√°ficos

		// Verificar se gr√°fico donut "Causas de problemas" est√° vis√≠vel
		await expect(authenticatedPage.getByText('Causas de problemas (28 dias)')).toBeVisible()

		// Verificar se gr√°fico de linha est√° vis√≠vel
		await expect(authenticatedPage.getByText('Problemas & solu√ß√µes (√∫ltimos 28 dias)')).toBeVisible()

		// Verificar se gr√°fico de coluna est√° vis√≠vel
		await expect(authenticatedPage.getByText('Incidentes (√∫ltimos 7 dias)')).toBeVisible()
	})

	test('‚úÖ Gr√°ficos ApexCharts funcionais', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Aguardar carregamento da p√°gina
		await authenticatedPage.waitForLoadState('networkidle')

		// Rolar a p√°gina para baixo para visualizar os gr√°ficos
		await authenticatedPage.evaluate(() => window.scrollTo(0, document.body.scrollHeight))

		// Aguardar um pouco para os gr√°ficos renderizarem ap√≥s o scroll
		await authenticatedPage.waitForTimeout(2000)

		// Verificar se gr√°ficos est√£o renderizados - usar seletores que realmente existem
		const chartContainers = authenticatedPage.locator('.w-full.max-w-lg')
		await expect(chartContainers).toHaveCount(3, { timeout: 60000 }) // Deve ter 3 gr√°ficos

		// Verificar se gr√°fico donut "Causas de problemas" est√° vis√≠vel
		await expect(authenticatedPage.getByText('Causas de problemas (28 dias)')).toBeVisible()

		// Verificar se gr√°fico de linha est√° vis√≠vel
		await expect(authenticatedPage.getByText('Problemas & solu√ß√µes (√∫ltimos 28 dias)')).toBeVisible()

		// Verificar se gr√°fico de coluna est√° vis√≠vel
		await expect(authenticatedPage.getByText('Incidentes (√∫ltimos 7 dias)')).toBeVisible()
	})

	test('‚úÖ Donut "Causas de problemas" com dados dos √∫ltimos 28 dias', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Aguardar carregamento da p√°gina
		await authenticatedPage.waitForLoadState('networkidle')

		// Rolar a p√°gina para baixo para visualizar os gr√°ficos
		await authenticatedPage.evaluate(() => window.scrollTo(0, document.body.scrollHeight))

		// Aguardar um pouco para os gr√°ficos renderizarem ap√≥s o scroll
		await authenticatedPage.waitForTimeout(2000)

		// Verificar se gr√°fico donut est√° vis√≠vel - usar seletor mais espec√≠fico
		const donutChart = authenticatedPage.locator('.w-full.max-w-lg').first()
		await expect(donutChart).toBeVisible({ timeout: 60000 })

		// Verificar se t√≠tulo do gr√°fico est√° vis√≠vel
		await expect(authenticatedPage.getByText('Causas de problemas (28 dias)')).toBeVisible()

		// Verificar se gr√°fico est√° renderizado - usar seletor mais espec√≠fico
		await expect(authenticatedPage.locator('.w-full.max-w-lg').first()).toBeVisible()
	})

	test('‚úÖ Responsividade em diferentes resolu√ß√µes', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Aguardar carregamento da p√°gina
		await authenticatedPage.waitForLoadState('networkidle')

		// Rolar a p√°gina para baixo para visualizar os gr√°ficos
		await authenticatedPage.evaluate(() => window.scrollTo(0, document.body.scrollHeight))

		// Aguardar um pouco para os gr√°ficos renderizarem ap√≥s o scroll
		await authenticatedPage.waitForTimeout(2000)

		// Testar resolu√ß√£o desktop
		await authenticatedPage.setViewportSize({ width: 1920, height: 1080 })
		await expect(authenticatedPage.getByText('Causas de problemas (28 dias)')).toBeVisible()

		// Testar resolu√ß√£o tablet
		await authenticatedPage.setViewportSize({ width: 768, height: 1024 })
		await expect(authenticatedPage.getByText('Causas de problemas (28 dias)')).toBeVisible()

		// Testar resolu√ß√£o mobile
		await authenticatedPage.setViewportSize({ width: 375, height: 667 })
		await expect(authenticatedPage.getByText('Causas de problemas (28 dias)')).toBeVisible()

		// Voltar para resolu√ß√£o padr√£o
		await authenticatedPage.setViewportSize({ width: 1280, height: 720 })
	})

	test('‚úÖ M√©tricas de resumo funcionais', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Aguardar carregamento da p√°gina
		await authenticatedPage.waitForLoadState('networkidle')

		// Definir resolu√ß√£o maior para visualizar todos os elementos
		await authenticatedPage.setViewportSize({ width: 1920, height: 1200 })

		// Aguardar um pouco para a resolu√ß√£o ser aplicada
		await authenticatedPage.waitForTimeout(1000)

		// Rolar a p√°gina para baixo para visualizar os gr√°ficos
		await authenticatedPage.evaluate(() => window.scrollTo(0, document.body.scrollHeight))

		// Aguardar um pouco para os gr√°ficos renderizarem ap√≥s o scroll
		await authenticatedPage.waitForTimeout(2000)

		// Verificar se se√ß√£o de resumo est√° vis√≠vel - fazer scroll para cima primeiro
		await authenticatedPage.evaluate(() => window.scrollTo(0, 0))
		await authenticatedPage.waitForTimeout(1000)

		// Verificar se m√©tricas est√£o vis√≠veis - usar seletores mais espec√≠ficos
		await expect(authenticatedPage.getByRole('heading', { name: 'Produtos (√∫ltimos 28 dias)' })).toBeVisible()
		await expect(authenticatedPage.getByRole('heading', { name: 'Resumo de 7 dias' })).toBeVisible()

		// Verificar se projetos em andamento est√£o vis√≠veis
		await expect(authenticatedPage.getByText('Projetos em andamento')).toBeVisible()

		// Voltar para resolu√ß√£o padr√£o
		await authenticatedPage.setViewportSize({ width: 1280, height: 720 })
	})

	test('‚úÖ Navega√ß√£o para outras p√°ginas a partir do dashboard', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Aguardar carregamento da p√°gina
		await authenticatedPage.waitForLoadState('networkidle')

		// Rolar a p√°gina para baixo para visualizar os gr√°ficos
		await authenticatedPage.evaluate(() => window.scrollTo(0, document.body.scrollHeight))

		// Aguardar um pouco para os gr√°ficos renderizarem ap√≥s o scroll
		await authenticatedPage.waitForTimeout(2000)

		// Verificar se links de navega√ß√£o est√£o vis√≠veis na sidebar
		await expect(authenticatedPage.getByRole('link', { name: /produtos/i })).toBeVisible()

		// Clicar em um link para verificar navega√ß√£o - usar link mais confi√°vel
		await authenticatedPage.getByRole('link', { name: /ajuda/i }).first().click()
		await authenticatedPage.waitForURL('/admin/help')
	})

	test('‚úÖ Performance de carregamento', async ({ authenticatedPage }) => {
		const startTime = Date.now()

		// Navegar para o dashboard
		await authenticatedPage.goto('/admin/dashboard')

		// Aguardar carregamento completo
		await authenticatedPage.waitForLoadState('networkidle')

		// Rolar a p√°gina para baixo para visualizar os gr√°ficos
		await authenticatedPage.evaluate(() => window.scrollTo(0, document.body.scrollHeight))

		// Aguardar um pouco para os gr√°ficos renderizarem ap√≥s o scroll
		await authenticatedPage.waitForTimeout(2000)

		const endTime = Date.now()
		const loadTime = endTime - startTime

		// Verificar se carregou em tempo razo√°vel (menos de 30 segundos)
		expect(loadTime).toBeLessThan(30000)

		console.log(`‚úÖ Dashboard carregou em ${loadTime}ms`)

		// Verificar se todos os elementos principais est√£o vis√≠veis
		await expect(authenticatedPage.getByText('Causas de problemas (28 dias)')).toBeVisible()
		await expect(authenticatedPage.locator('.w-full.max-w-lg').first()).toBeVisible()
	})
})
