import { test, expect } from './utils/auth-helpers'

test.describe('üöÄ SISTEMA DE AJUDA - Funcionalidades Avan√ßadas', () => {
	test.describe('üîç Busca e Filtros', () => {
		test('‚úÖ Busca por conte√∫do - funcionalidade de pesquisa', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/help')

			// Verificar se p√°gina carregou
			await expect(authenticatedPage.locator('h2:has-text("Ajuda")')).toBeVisible()

			// Verificar se √°rea de conte√∫do est√° presente
			await expect(authenticatedPage.locator('div#help-content')).toBeVisible()

			// Se houver conte√∫do, verificar se √© pesquis√°vel
			const helpContent = authenticatedPage.locator('div#help-content')
			if ((await helpContent.count()) > 0) {
				await expect(helpContent).toBeVisible()
			}
		})

		test('‚úÖ Filtros por categoria - organiza√ß√£o de conte√∫do', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/help')

			// Verificar se sidebar est√° presente
			await expect(authenticatedPage.locator('div.w-96.border-r')).toBeVisible()

			// Verificar se √°rea de navega√ß√£o est√° presente
			await expect(authenticatedPage.locator('div.flex-1.overflow-y-auto.p-3')).toBeVisible()

			// Se houver t√≠tulos, verificar se s√£o clic√°veis
			const titleButtons = authenticatedPage.locator('button.w-full.text-left.p-2.rounded-md')
			if ((await titleButtons.count()) > 0) {
				await expect(titleButtons.first()).toBeVisible()
			}
		})
	})

	test.describe('üìö Organiza√ß√£o de Conte√∫do', () => {
		test('‚úÖ Estrutura hier√°rquica - t√≠tulos e subt√≠tulos', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/help')

			// Verificar se √°rea de navega√ß√£o est√° presente
			const navigationArea = authenticatedPage.locator('div.flex-1.overflow-y-auto.p-3')
			await expect(navigationArea).toBeVisible()

			// Se houver t√≠tulos, verificar se estrutura hier√°rquica est√° presente
			const titleButtons = authenticatedPage.locator('button.w-full.text-left.p-2.rounded-md')
			if ((await titleButtons.count()) > 0) {
				await expect(titleButtons.first()).toBeVisible()

				// Verificar se h√° diferentes n√≠veis de t√≠tulos
				const h1Titles = authenticatedPage.locator('div.text-base.font-semibold.text-zinc-700.dark\\:text-zinc-200')
				const h2Titles = authenticatedPage.locator('div.text-sm.font-medium.text-zinc-600.dark\\:text-zinc-300')
				const h3Titles = authenticatedPage.locator('div.text-sm.font-normal.text-zinc-600.dark\\:text-zinc-300')

				// Pelo menos um n√≠vel deve estar presente
				const totalTitles = (await h1Titles.count()) + (await h2Titles.count()) + (await h3Titles.count())
				expect(totalTitles).toBeGreaterThan(0)
			}
		})

		test('‚úÖ Navega√ß√£o por t√≠tulos - scroll autom√°tico', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/help')

			// Verificar se √°rea de navega√ß√£o est√° presente
			await expect(authenticatedPage.locator('div.flex-1.overflow-y-auto.p-3')).toBeVisible()

			// Se houver t√≠tulos, testar navega√ß√£o
			const titleButtons = authenticatedPage.locator('button.w-full.text-left.p-2.rounded-md')
			if ((await titleButtons.count()) > 0) {
				// Clicar no primeiro t√≠tulo
				await titleButtons.first().click()

				// Verificar se √°rea de conte√∫do est√° presente
				await expect(authenticatedPage.locator('div.flex-1.overflow-y-auto.bg-white.dark\\:bg-zinc-800')).toBeVisible()
			}
		})
	})

	test.describe('üíæ Persist√™ncia e Sincroniza√ß√£o', () => {
		test('‚úÖ Presen√ßa do bot√£o de edi√ß√£o - funcionalidade b√°sica', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/help')

			// Verificar se bot√£o de configura√ß√µes est√° presente
			const settingsButton = authenticatedPage.locator('button:has(span.icon-\\[lucide--settings\\])')
			await expect(settingsButton).toBeVisible()

			// Verificar se bot√£o √© clic√°vel
			await expect(settingsButton).toBeEnabled()
		})

		test('‚úÖ Sincroniza√ß√£o em tempo real - atualiza√ß√µes autom√°ticas', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/help')

			// Verificar se p√°gina carregou
			await expect(authenticatedPage.locator('h2:has-text("Ajuda")')).toBeVisible()

			// Verificar se √°rea de conte√∫do est√° presente
			await expect(authenticatedPage.locator('div.flex-1.overflow-y-auto.bg-white.dark\\:bg-zinc-800')).toBeVisible()

			// Verificar se √°rea de navega√ß√£o est√° presente
			await expect(authenticatedPage.locator('div.flex-1.overflow-y-auto.p-3')).toBeVisible()
		})
	})

	test.describe('üé® Temas e Personaliza√ß√£o', () => {
		test('‚úÖ Tema escuro/claro - adapta√ß√£o autom√°tica', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/help')

			// Verificar se p√°gina carregou
			await expect(authenticatedPage.locator('h2:has-text("Ajuda")')).toBeVisible()

			// Verificar se classes de tema est√£o aplicadas
			await expect(authenticatedPage.locator('div.bg-zinc-50.dark\\:bg-zinc-900')).toBeVisible()

			// Verificar se sidebar tem tema aplicado
			await expect(authenticatedPage.locator('div.w-96.border-r.border-zinc-200.dark\\:border-zinc-700')).toBeVisible()

			// Verificar se √°rea de conte√∫do tem tema aplicado
			await expect(authenticatedPage.locator('div.flex-1.overflow-y-auto.bg-white.dark\\:bg-zinc-800')).toBeVisible()
		})

		test('‚úÖ Responsividade - adapta√ß√£o a diferentes tamanhos', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/help')

			// Verificar se layout flex est√° presente
			await expect(authenticatedPage.locator('div.flex.bg-zinc-50.dark\\:bg-zinc-900')).toBeVisible()

			// Verificar se sidebar tem largura fixa
			await expect(authenticatedPage.locator('div.w-96.border-r.border-zinc-200.dark\\:border-zinc-700')).toBeVisible()

			// Verificar se conte√∫do principal √© flex√≠vel
			await expect(authenticatedPage.locator('div.flex-1.flex.flex-col.min-w-0')).toBeVisible()
		})
	})

	test.describe('üîß Configura√ß√µes e Prefer√™ncias', () => {
		test('‚úÖ Presen√ßa do bot√£o de configura√ß√µes - funcionalidade b√°sica', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/help')

			// Verificar se bot√£o de configura√ß√µes est√° presente
			const settingsButton = authenticatedPage.locator('button:has(span.icon-\\[lucide--settings\\])')
			await expect(settingsButton).toBeVisible()

			// Verificar se bot√£o √© clic√°vel
			await expect(settingsButton).toBeEnabled()
		})

		test('‚úÖ Prefer√™ncias de visualiza√ß√£o - op√ß√µes de display', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/help')

			// Verificar se p√°gina carregou
			await expect(authenticatedPage.locator('h2:has-text("Ajuda")')).toBeVisible()

			// Verificar se layout est√° configurado corretamente
			await expect(authenticatedPage.locator('div.flex.bg-zinc-50.dark\\:bg-zinc-900')).toBeVisible()

			// Verificar se sidebar est√° presente
			await expect(authenticatedPage.locator('div.w-96.border-r')).toBeVisible()

			// Verificar se √°rea de conte√∫do est√° presente
			await expect(authenticatedPage.locator('div.flex-1.flex.flex-col.min-w-0')).toBeVisible()
		})
	})
})
