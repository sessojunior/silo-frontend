import { test, expect } from './utils/auth-helpers'

test.describe('ðŸ’¬ SISTEMA DE CHAT - FUNCIONALIDADES AVANÃ‡ADAS', () => {
	test.describe('ðŸ”” NotificaÃ§Ãµes e SincronizaÃ§Ã£o', () => {
		test('âœ… Polling inteligente - sincroniza apenas quando necessÃ¡rio', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/chat')

			// Aguardar carregamento inicial
			await authenticatedPage.waitForTimeout(2000)

			// Verificar se chat estÃ¡ funcionando
			await expect(authenticatedPage.locator('[data-testid="chat-area"]')).toBeVisible()

			// Aguardar alguns ciclos de polling
			await authenticatedPage.waitForTimeout(10000)

			// Verificar se nÃ£o hÃ¡ erros de sincronizaÃ§Ã£o
			await expect(authenticatedPage.locator('[data-testid="chat-area"]')).toBeVisible()

			// Verificar se mensagens ainda estÃ£o visÃ­veis
			const messages = authenticatedPage.locator('[data-testid="message-bubble"]')
			if ((await messages.count()) > 0) {
				await expect(messages.first()).toBeVisible()
			}
		})

		test('âœ… NotificaÃ§Ãµes TopBar - botÃ£o com contador', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/dashboard')

			// Verificar se botÃ£o de notificaÃ§Ãµes estÃ¡ visÃ­vel
			await expect(authenticatedPage.locator('[data-testid="chat-notification-button"]')).toBeVisible()

			// Verificar se contador estÃ¡ visÃ­vel (se houver mensagens)
			const notificationCount = authenticatedPage.locator('[data-testid="notification-count"]')
			if ((await notificationCount.count()) > 0) {
				await expect(notificationCount).toBeVisible()
			}

			// Clicar no botÃ£o de notificaÃ§Ãµes
			await authenticatedPage.locator('[data-testid="chat-notification-button"]').click()

			// Verificar se dropdown de notificaÃ§Ãµes abriu
			await expect(authenticatedPage.locator('[data-testid="notifications-dropdown"]')).toBeVisible()
		})

		test('âœ… Dropdown de notificaÃ§Ãµes - lista de mensagens nÃ£o lidas', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/dashboard')

			// Clicar no botÃ£o de notificaÃ§Ãµes
			await authenticatedPage.locator('[data-testid="chat-notification-button"]').click()

			// Verificar se dropdown abriu
			await expect(authenticatedPage.locator('[data-testid="notifications-dropdown"]')).toBeVisible()

			// Verificar se hÃ¡ lista de notificaÃ§Ãµes
			const notifications = authenticatedPage.locator('[data-testid="notification-item"]')
			if ((await notifications.count()) > 0) {
				await expect(notifications.first()).toBeVisible()

				// Verificar se hÃ¡ informaÃ§Ãµes da mensagem
				await expect(authenticatedPage.getByText(/canal|grupo/i)).toBeVisible()
				await expect(authenticatedPage.getByText(/usuÃ¡rio|autor/i)).toBeVisible()
			}
		})

		test('âœ… NavegaÃ§Ã£o direta - clicar em notificaÃ§Ã£o vai para chat', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/dashboard')

			// Clicar no botÃ£o de notificaÃ§Ãµes
			await authenticatedPage.locator('[data-testid="chat-notification-button"]').click()

			// Verificar se dropdown abriu
			await expect(authenticatedPage.locator('[data-testid="notifications-dropdown"]')).toBeVisible()

			// Clicar na primeira notificaÃ§Ã£o (se existir)
			const notifications = authenticatedPage.locator('[data-testid="notification-item"]')
			if ((await notifications.count()) > 0) {
				await notifications.first().click()

				// Verificar se foi redirecionado para o chat
				await authenticatedPage.waitForURL('/admin/chat')
				await expect(authenticatedPage.locator('[data-testid="chat-area"]')).toBeVisible()
			}
		})

		test('âœ… MarcaÃ§Ã£o de lida - notificaÃ§Ãµes sÃ£o marcadas como lidas', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/dashboard')

			// Verificar contador inicial
			const initialCount = authenticatedPage.locator('[data-testid="notification-count"]')
			const initialCountValue = await initialCount.count()

			// Clicar no botÃ£o de notificaÃ§Ãµes
			await authenticatedPage.locator('[data-testid="chat-notification-button"]').click()

			// Verificar se dropdown abriu
			await expect(authenticatedPage.locator('[data-testid="notifications-dropdown"]')).toBeVisible()

			// Aguardar um pouco para processamento
			await authenticatedPage.waitForTimeout(2000)

			// Verificar se contador diminuiu (se havia notificaÃ§Ãµes)
			if (initialCountValue > 0) {
				const finalCount = authenticatedPage.locator('[data-testid="notification-count"]')
				await expect(finalCount).toBeVisible()
			}
		})

		test('âœ… SincronizaÃ§Ã£o em tempo real - mensagens aparecem sem refresh', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/chat')

			// Aguardar carregamento
			await authenticatedPage.waitForTimeout(2000)

			// Verificar se chat estÃ¡ funcionando
			await expect(authenticatedPage.locator('[data-testid="chat-area"]')).toBeVisible()

			// Aguardar sincronizaÃ§Ã£o automÃ¡tica
			await authenticatedPage.waitForTimeout(15000)

			// Verificar se chat ainda estÃ¡ funcionando
			await expect(authenticatedPage.locator('[data-testid="chat-area"]')).toBeVisible()

			// Verificar se nÃ£o hÃ¡ erros de conexÃ£o
			await expect(authenticatedPage.locator('[data-testid="chat-sidebar"]')).toBeVisible()

			// Verificar se mensagens ainda estÃ£o visÃ­veis
			const messages = authenticatedPage.locator('[data-testid="message-bubble"]')
			if ((await messages.count()) > 0) {
				await expect(messages.first()).toBeVisible()
			}
		})
	})
})
