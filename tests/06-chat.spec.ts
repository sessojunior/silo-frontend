import { test, expect } from '@playwright/test'
import { fillFormField, clickButton } from './utils/auth-helpers'

test.describe('üí¨ SISTEMA DE CHAT WHATSAPP-LIKE', () => {
	test.beforeEach(async ({ page }) => {
		// Fazer login como administrador
		await page.goto('/auth/login')
		await page.getByLabel('Email').fill('admin@inpe.br')
		await page.getByLabel('Senha').fill('admin123')
		await page.getByRole('button', { name: 'Entrar' }).click()
		await page.waitForURL('/admin/dashboard')
	})

	test.describe('üí¨ Funcionalidades B√°sicas', () => {
		test('‚úÖ Enviar mensagens - em grupos e DMs', async ({ page }) => {
			await page.goto('/admin/chat')

			// Aguardar carregamento do chat
			await page.waitForTimeout(2000)

			// Verificar se sidebar de canais est√° vis√≠vel
			await expect(page.locator('[data-testid="chat-sidebar"]')).toBeVisible()

			// Clicar no primeiro canal/grupo
			await page.locator('[data-testid="channel-item"]').first().click()

			// Verificar se √°rea de mensagens est√° vis√≠vel
			await expect(page.locator('[data-testid="chat-area"]')).toBeVisible()

			// Digitar mensagem
			await page.locator('[data-testid="message-input"]').fill('Mensagem de teste Playwright')

			// Enviar mensagem
			await page.locator('[data-testid="send-button"]').click()

			// Verificar se mensagem foi enviada
			await expect(page.getByText('Mensagem de teste Playwright')).toBeVisible()
		})

		test('‚úÖ Receber mensagens - atualiza√ß√£o em tempo real', async ({ page }) => {
			await page.goto('/admin/chat')

			// Aguardar carregamento
			await page.waitForTimeout(2000)

			// Clicar em um canal
			await page.locator('[data-testid="channel-item"]').first().click()

			// Verificar se mensagens existentes est√£o vis√≠veis
			const messages = page.locator('[data-testid="message-bubble"]')
			if ((await messages.count()) > 0) {
				await expect(messages.first()).toBeVisible()
			}

			// Aguardar poss√≠vel atualiza√ß√£o (polling)
			await page.waitForTimeout(5000)

			// Verificar se mensagens ainda est√£o vis√≠veis
			await expect(page.locator('[data-testid="chat-area"]')).toBeVisible()
		})

		test('‚úÖ Hist√≥rico - carregamento inicial e pagina√ß√£o', async ({ page }) => {
			await page.goto('/admin/chat')

			// Aguardar carregamento
			await page.waitForTimeout(2000)

			// Clicar em um canal
			await page.locator('[data-testid="channel-item"]').first().click()

			// Verificar se hist√≥rico carregou
			await expect(page.locator('[data-testid="chat-area"]')).toBeVisible()

			// Verificar se h√° mensagens
			const messages = page.locator('[data-testid="message-bubble"]')
			await expect(messages).toBeVisible()

			// Se houver muitas mensagens, verificar pagina√ß√£o
			if ((await messages.count()) > 10) {
				// Scroll para cima para carregar mais mensagens
				await page.locator('[data-testid="chat-area"]').scrollTo({ top: 0 })
				await page.waitForTimeout(2000)

				// Verificar se mais mensagens foram carregadas
				const newMessageCount = await messages.count()
				expect(newMessageCount).toBeGreaterThan(10)
			}
		})

		test('‚úÖ Threading - conversas organizadas', async ({ page }) => {
			await page.goto('/admin/chat')

			// Aguardar carregamento
			await page.waitForTimeout(2000)

			// Clicar em um canal
			await page.locator('[data-testid="channel-item"]').first().click()

			// Verificar se mensagens est√£o organizadas por thread
			await expect(page.locator('[data-testid="message-thread"]')).toBeVisible()

			// Verificar se h√° separadores de data/hora
			const dateSeparators = page.locator('[data-testid="date-separator"]')
			if ((await dateSeparators.count()) > 0) {
				await expect(dateSeparators.first()).toBeVisible()
			}
		})
	})

	test.describe('üë§ Sistema de Presen√ßa', () => {
		test('‚úÖ Estados de presen√ßa - Online, Ausente, Ocupado, Offline', async ({ page }) => {
			await page.goto('/admin/chat')

			// Aguardar carregamento
			await page.waitForTimeout(2000)

			// Verificar se indicador de presen√ßa est√° vis√≠vel
			await expect(page.locator('[data-testid="presence-indicator"]')).toBeVisible()

			// Clicar no dropdown de status
			await page.locator('[data-testid="presence-dropdown"]').click()

			// Verificar se op√ß√µes de status est√£o vis√≠veis
			await expect(page.getByText('Online')).toBeVisible()
			await expect(page.getByText('Ausente')).toBeVisible()
			await expect(page.getByText('Ocupado')).toBeVisible()
			await expect(page.getByText('Offline')).toBeVisible()
		})

		test('‚úÖ Altera√ß√£o de status - funciona corretamente', async ({ page }) => {
			await page.goto('/admin/chat')

			// Aguardar carregamento
			await page.waitForTimeout(2000)

			// Clicar no dropdown de status
			await page.locator('[data-testid="presence-dropdown"]').click()

			// Selecionar status "Ocupado"
			await page.getByText('Ocupado').click()

			// Verificar se status foi alterado
			await expect(page.locator('[data-testid="presence-indicator"]')).toContainText('Ocupado')

			// Alterar para "Online"
			await page.locator('[data-testid="presence-dropdown"]').click()
			await page.getByText('Online').click()

			// Verificar se status voltou para "Online"
			await expect(page.locator('[data-testid="presence-indicator"]')).toContainText('Online')
		})

		test('‚úÖ Reflexo na UI - status vis√≠vel para outros usu√°rios', async ({ page }) => {
			await page.goto('/admin/chat')

			// Aguardar carregamento
			await page.waitForTimeout(2000)

			// Verificar se status de outros usu√°rios est√° vis√≠vel na sidebar
			const userStatuses = page.locator('[data-testid="user-status"]')
			if ((await userStatuses.count()) > 0) {
				await expect(userStatuses.first()).toBeVisible()

				// Verificar se status tem cor apropriada
				const statusElement = userStatuses.first()
				const statusClass = await statusElement.getAttribute('class')
				expect(statusClass).toMatch(/online|away|busy|offline/)
			}
		})
	})

	test.describe('üîî Notifica√ß√µes e Sincroniza√ß√£o', () => {
		test('‚úÖ Polling inteligente - sincroniza apenas quando necess√°rio', async ({ page }) => {
			await page.goto('/admin/chat')

			// Aguardar carregamento inicial
			await page.waitForTimeout(2000)

			// Verificar se chat est√° funcionando
			await expect(page.locator('[data-testid="chat-area"]')).toBeVisible()

			// Aguardar alguns ciclos de polling
			await page.waitForTimeout(10000)

			// Verificar se n√£o h√° erros de sincroniza√ß√£o
			await expect(page.locator('[data-testid="chat-area"]')).toBeVisible()

			// Verificar se mensagens ainda est√£o vis√≠veis
			const messages = page.locator('[data-testid="message-bubble"]')
			if ((await messages.count()) > 0) {
				await expect(messages.first()).toBeVisible()
			}
		})

		test('‚úÖ Notifica√ß√µes TopBar - bot√£o com contador', async ({ page }) => {
			await page.goto('/admin/dashboard')

			// Verificar se bot√£o de notifica√ß√µes est√° vis√≠vel
			await expect(page.locator('[data-testid="chat-notification-button"]')).toBeVisible()

			// Verificar se contador est√° vis√≠vel (se houver mensagens)
			const notificationCount = page.locator('[data-testid="notification-count"]')
			if ((await notificationCount.count()) > 0) {
				await expect(notificationCount.first()).toBeVisible()

				// Verificar se contador √© um n√∫mero
				const countText = await notificationCount.first().textContent()
				expect(parseInt(countText || '0')).toBeGreaterThanOrEqual(0)
			}

			// Clicar no bot√£o de notifica√ß√µes
			await page.locator('[data-testid="chat-notification-button"]').click()

			// Verificar se dropdown abre
			await expect(page.locator('[data-testid="notification-dropdown"]')).toBeVisible()
		})

		test('‚úÖ Sem duplica√ß√£o - mensagens n√£o aparecem duplicadas', async ({ page }) => {
			await page.goto('/admin/chat')

			// Aguardar carregamento
			await page.waitForTimeout(2000)

			// Clicar em um canal
			await page.locator('[data-testid="channel-item"]').first().click()

			// Contar mensagens iniciais
			const initialMessages = page.locator('[data-testid="message-bubble"]')
			const initialCount = await initialMessages.count()

			// Aguardar poss√≠vel sincroniza√ß√£o
			await page.waitForTimeout(5000)

			// Contar mensagens ap√≥s sincroniza√ß√£o
			const finalMessages = page.locator('[data-testid="message-bubble"]')
			const finalCount = await finalMessages.count()

			// Verificar se n√£o h√° duplicatas (contagem deve ser igual ou maior, mas n√£o duplicada)
			expect(finalCount).toBeGreaterThanOrEqual(initialCount)

			// Verificar se mensagens √∫nicas
			const messageTexts = []
			for (let i = 0; i < (await finalMessages.count()); i++) {
				const text = await finalMessages.nth(i).textContent()
				messageTexts.push(text)
			}

			// Verificar se n√£o h√° textos duplicados
			const uniqueTexts = [...new Set(messageTexts)]
			expect(uniqueTexts.length).toBe(messageTexts.length)
		})
	})

	test.describe('üîç Funcionalidades Avan√ßadas', () => {
		test('‚úÖ Sidebar dual - canais e usu√°rios', async ({ page }) => {
			await page.goto('/admin/chat')

			// Aguardar carregamento
			await page.waitForTimeout(2000)

			// Verificar se sidebar tem duas se√ß√µes
			await expect(page.locator('[data-testid="channels-section"]')).toBeVisible()
			await expect(page.locator('[data-testid="users-section"]')).toBeVisible()

			// Verificar se canais est√£o listados
			const channels = page.locator('[data-testid="channel-item"]')
			if ((await channels.count()) > 0) {
				await expect(channels.first()).toBeVisible()
			}

			// Verificar se usu√°rios est√£o listados
			const users = page.locator('[data-testid="user-item"]')
			if ((await users.count()) > 0) {
				await expect(users.first()).toBeVisible()
			}
		})

		test('‚úÖ Busca unificada - canais e usu√°rios', async ({ page }) => {
			await page.goto('/admin/chat')

			// Aguardar carregamento
			await page.waitForTimeout(2000)

			// Verificar se campo de busca est√° vis√≠vel
			await expect(page.locator('[data-testid="chat-search"]')).toBeVisible()

			// Buscar por termo
			await page.locator('[data-testid="chat-search"]').fill('admin')
			await page.waitForTimeout(1000)

			// Verificar se resultados aparecem
			const searchResults = page.locator('[data-testid="search-result"]')
			if ((await searchResults.count()) > 0) {
				await expect(searchResults.first()).toBeVisible()
			}

			// Limpar busca
			await page.locator('[data-testid="chat-search"]').clear()
			await page.waitForTimeout(1000)

			// Verificar se lista original voltou
			await expect(page.locator('[data-testid="channels-section"]')).toBeVisible()
		})

		test('‚úÖ Interface WhatsApp-like - bubbles e layout', async ({ page }) => {
			await page.goto('/admin/chat')

			// Aguardar carregamento
			await page.waitForTimeout(2000)

			// Clicar em um canal
			await page.locator('[data-testid="channel-item"]').first().click()

			// Verificar se mensagens t√™m estilo WhatsApp
			const messageBubbles = page.locator('[data-testid="message-bubble"]')
			if ((await messageBubbles.count()) > 0) {
				const firstBubble = messageBubbles.first()
				await expect(firstBubble).toBeVisible()

				// Verificar se bubble tem classes de estilo WhatsApp
				const bubbleClass = await firstBubble.getAttribute('class')
				expect(bubbleClass).toMatch(/bubble|message|chat/)
			}

			// Verificar se √°rea de input est√° vis√≠vel
			await expect(page.locator('[data-testid="message-input"]')).toBeVisible()
			await expect(page.locator('[data-testid="send-button"]')).toBeVisible()
		})

		test('‚úÖ Responsividade em diferentes resolu√ß√µes', async ({ page }) => {
			await page.goto('/admin/chat')

			// Aguardar carregamento
			await page.waitForTimeout(2000)

			// Testar resolu√ß√£o desktop
			await page.setViewportSize({ width: 1920, height: 1080 })
			await expect(page.locator('[data-testid="chat-sidebar"]')).toBeVisible()
			await expect(page.locator('[data-testid="chat-area"]')).toBeVisible()

			// Testar resolu√ß√£o tablet
			await page.setViewportSize({ width: 768, height: 1024 })
			await expect(page.locator('[data-testid="chat-sidebar"]')).toBeVisible()
			await expect(page.locator('[data-testid="chat-area"]')).toBeVisible()

			// Testar resolu√ß√£o mobile
			await page.setViewportSize({ width: 375, height: 667 })
			await expect(page.locator('[data-testid="chat-sidebar"]')).toBeVisible()
			await expect(page.locator('[data-testid="chat-area"]')).toBeVisible()

			// Voltar para desktop
			await page.setViewportSize({ width: 1920, height: 1080 })
		})

		test('‚úÖ Navega√ß√£o entre canais', async ({ page }) => {
			await page.goto('/admin/chat')

			// Aguardar carregamento
			await page.waitForTimeout(2000)

			// Verificar se h√° m√∫ltiplos canais
			const channels = page.locator('[data-testid="channel-item"]')
			if ((await channels.count()) > 1) {
				// Clicar no primeiro canal
				await channels.first().click()
				await page.waitForTimeout(1000)

				// Verificar se primeiro canal est√° ativo
				await expect(channels.first()).toHaveAttribute('data-active', 'true')

				// Clicar no segundo canal
				await channels.nth(1).click()
				await page.waitForTimeout(1000)

				// Verificar se segundo canal est√° ativo
				await expect(channels.nth(1)).toHaveAttribute('data-active', 'true')
				await expect(channels.first()).not.toHaveAttribute('data-active', 'true')
			}
		})

		test('‚úÖ Indicadores de digita√ß√£o', async ({ page }) => {
			await page.goto('/admin/chat')

			// Aguardar carregamento
			await page.waitForTimeout(2000)

			// Clicar em um canal
			await page.locator('[data-testid="channel-item"]').first().click()

			// Come√ßar a digitar
			await page.locator('[data-testid="message-input"]').fill('Testando indicador de digita√ß√£o')

			// Verificar se indicador de digita√ß√£o aparece (se implementado)
			const typingIndicator = page.locator('[data-testid="typing-indicator"]')
			if ((await typingIndicator.count()) > 0) {
				await expect(typingIndicator.first()).toBeVisible()
			}

			// Limpar input
			await page.locator('[data-testid="message-input"]').clear()

			// Verificar se indicador desaparece
			if ((await typingIndicator.count()) > 0) {
				await expect(typingIndicator.first()).not.toBeVisible()
			}
		})
	})

	test.describe('üì± Integra√ß√£o Mobile e Desktop', () => {
		test('‚úÖ Funcionamento em dispositivos m√≥veis', async ({ page }) => {
			await page.goto('/admin/chat')

			// Simular dispositivo m√≥vel
			await page.setViewportSize({ width: 375, height: 667 })

			// Aguardar carregamento
			await page.waitForTimeout(2000)

			// Verificar se interface se adapta ao mobile
			await expect(page.locator('[data-testid="chat-sidebar"]')).toBeVisible()
			await expect(page.locator('[data-testid="chat-area"]')).toBeVisible()

			// Verificar se bot√µes s√£o clic√°veis no mobile
			const channels = page.locator('[data-testid="channel-item"]')
			if ((await channels.count()) > 0) {
				await channels.first().click()
				await page.waitForTimeout(1000)

				// Verificar se √°rea de chat est√° vis√≠vel
				await expect(page.locator('[data-testid="chat-area"]')).toBeVisible()
			}
		})

		test('‚úÖ Funcionamento em desktop', async ({ page }) => {
			await page.goto('/admin/chat')

			// Simular desktop
			await page.setViewportSize({ width: 1920, height: 1080 })

			// Aguardar carregamento
			await page.waitForTimeout(2000)

			// Verificar se interface se adapta ao desktop
			await expect(page.locator('[data-testid="chat-sidebar"]')).toBeVisible()
			await expect(page.locator('[data-testid="chat-area"]')).toBeVisible()

			// Verificar se sidebar e √°rea de chat est√£o lado a lado
			const sidebar = page.locator('[data-testid="chat-sidebar"]')
			const chatArea = page.locator('[data-testid="chat-area"]')

			await expect(sidebar).toBeVisible()
			await expect(chatArea).toBeVisible()
		})
	})
})
