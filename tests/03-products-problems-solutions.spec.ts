import { test, expect } from './utils/auth-helpers'

test.describe('üè≠ PRODUTOS, PROBLEMAS E SOLU√á√ïES', () => {

	test.describe('üì¶ CRUD de Produtos', () => {
		test('‚úÖ Criar produto - formul√°rio completo e valida√ß√µes', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Clicar no bot√£o de criar produto
			await clickButton(page, 'Criar Produto')

			// Preencher formul√°rio
			await fillFormField(page, 'Nome', 'Produto Teste Playwright')
			await fillFormField(page, 'Descri√ß√£o', 'Descri√ß√£o do produto de teste')
			await fillFormField(page, 'Prioridade', 'Alta')

			// Selecionar √≠cone
			await authenticatedauthenticatedPage.getByRole('button', { name: /selecionar √≠cone/i }).click()
			await authenticatedauthenticatedPage.locator('[data-icon="server"]').click()

			// Selecionar cor
			await authenticatedauthenticatedPage.getByRole('button', { name: /selecionar cor/i }).click()
			await authenticatedauthenticatedPage.locator('[data-color="blue"]').click()

			// Salvar produto
			await clickButton(page, 'Salvar')

			// Verificar toast de sucesso
			await expect(authenticatedPage.getByText(/produto criado|salvo com sucesso/i)).toBeVisible()

			// Verificar se produto aparece na lista
			await expect(authenticatedPage.getByText('Produto Teste Playwright')).toBeVisible()
		})

		test('‚úÖ Editar produto - modifica√ß√£o de dados e salvamento', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Clicar no bot√£o editar do primeiro produto
			await authenticatedauthenticatedPage.locator('[data-testid="edit-product"]').first().click()

			// Modificar nome
			await authenticatedauthenticatedPage.getByLabel('Nome').clear()
			await fillFormField(page, 'Nome', 'Produto Editado Playwright')

			// Modificar descri√ß√£o
			await authenticatedauthenticatedPage.getByLabel('Descri√ß√£o').clear()
			await fillFormField(page, 'Descri√ß√£o', 'Descri√ß√£o editada')

			// Salvar altera√ß√µes
			await clickButton(page, 'Salvar')

			// Verificar toast de sucesso
			await expect(authenticatedPage.getByText(/produto atualizado|alterado com sucesso/i)).toBeVisible()

			// Verificar se altera√ß√µes aparecem na lista
			await expect(authenticatedPage.getByText('Produto Editado Playwright')).toBeVisible()
		})

		test('‚úÖ Excluir produto - confirma√ß√£o e remo√ß√£o completa', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Clicar no bot√£o excluir do primeiro produto
			await authenticatedauthenticatedPage.locator('[data-testid="delete-product"]').first().click()

			// Verificar se dialog de confirma√ß√£o aparece
			await expect(authenticatedPage.getByText(/confirmar exclus√£o|excluir produto/i)).toBeVisible()

			// Confirmar exclus√£o
			await clickButton(page, 'Excluir')

			// Verificar toast de sucesso
			await expect(authenticatedPage.getByText(/produto exclu√≠do|removido com sucesso/i)).toBeVisible()
		})

		test('‚úÖ Listagem - filtros, busca e pagina√ß√£o', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Verificar se lista carregou
			await expect(authenticatedPage.locator('[data-testid="product-item"]')).toHaveCount.greaterThan(0)

			// Testar busca
			await authenticatedauthenticatedPage.getByPlaceholder(/buscar produtos/i).fill('teste')
			await authenticatedauthenticatedPage.waitForTimeout(1000)

			// Testar filtro por prioridade
			await authenticatedauthenticatedPage.getByRole('combobox', { name: /prioridade/i }).selectOption('Alta')

			// Verificar se filtros funcionam
			await expect(authenticatedPage.locator('[data-testid="product-item"]')).toBeVisible()
		})
	})

	test.describe('üö® Sistema de Problemas', () => {
		test('‚úÖ Criar problema - formul√°rio e categoriza√ß√£o obrigat√≥ria', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Clicar no primeiro produto para acessar problemas
			await authenticatedauthenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedauthenticatedPage.waitForURL(/\/admin\/products\/.*\/problems/)

			// Clicar em criar problema
			await clickButton(page, 'Criar Problema')

			// Preencher formul√°rio
			await fillFormField(page, 'T√≠tulo', 'Problema Teste Playwright')
			await fillFormField(page, 'Descri√ß√£o', 'Descri√ß√£o do problema de teste')

			// Selecionar categoria (obrigat√≥ria)
			await authenticatedauthenticatedPage.getByRole('combobox', { name: /categoria/i }).selectOption('Rede externa')

			// Salvar problema
			await clickButton(page, 'Salvar')

			// Verificar toast de sucesso
			await expect(authenticatedPage.getByText(/problema criado|salvo com sucesso/i)).toBeVisible()

			// Verificar se problema aparece na lista
			await expect(authenticatedPage.getByText('Problema Teste Playwright')).toBeVisible()
		})

		test('‚úÖ Upload de imagens via UploadThing - limite de 3 imagens', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Acessar problemas do primeiro produto
			await authenticatedauthenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedauthenticatedPage.waitForURL(/\/admin\/products\/.*\/problems/)

			// Clicar em criar problema
			await clickButton(page, 'Criar Problema')

			// Preencher campos obrigat√≥rios
			await fillFormField(page, 'T√≠tulo', 'Problema com Imagens')
			await fillFormField(page, 'Descri√ß√£o', 'Problema para testar upload')
			await authenticatedauthenticatedPage.getByRole('combobox', { name: /categoria/i }).selectOption('Rede externa')

			// Testar upload de imagem
			const fileInput = authenticatedPage.locator('input[type="file"]')
			await fileInput.setInputFiles('tests/fixtures/test-image.jpg')

			// Verificar se imagem foi carregada
			await expect(authenticatedPage.locator('[data-testid="image-preview"]')).toBeVisible()

			// Salvar problema
			await clickButton(page, 'Salvar')

			// Verificar sucesso
			await expect(authenticatedPage.getByText(/problema criado|salvo com sucesso/i)).toBeVisible()
		})

		test('‚úÖ Threading - visualiza√ß√£o hier√°rquica de problemas', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Acessar problemas do primeiro produto
			await authenticatedauthenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedauthenticatedPage.waitForURL(/\/admin\/products\/.*\/problems/)

			// Verificar se problemas est√£o organizados hierarquicamente
			await expect(authenticatedPage.locator('[data-testid="problem-thread"]')).toBeVisible()

			// Clicar em um problema para ver detalhes
			await authenticatedauthenticatedPage.locator('[data-testid="problem-item"]').first().click()

			// Verificar se detalhes do problema aparecem
			await expect(authenticatedPage.locator('[data-testid="problem-details"]')).toBeVisible()
		})
	})

	test.describe('üí° Sistema de Solu√ß√µes', () => {
		test('‚úÖ Responder problema - cria√ß√£o de solu√ß√£o', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Acessar problemas do primeiro produto
			await authenticatedauthenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedauthenticatedPage.waitForURL(/\/admin\/products\/.*\/problems/)

			// Clicar em um problema
			await authenticatedauthenticatedPage.locator('[data-testid="problem-item"]').first().click()

			// Clicar em responder
			await clickButton(page, 'Responder')

			// Preencher solu√ß√£o
			await fillFormField(page, 'Solu√ß√£o', 'Solu√ß√£o de teste para o problema')

			// Salvar solu√ß√£o
			await clickButton(page, 'Salvar')

			// Verificar toast de sucesso
			await expect(authenticatedPage.getByText(/solu√ß√£o criada|salva com sucesso/i)).toBeVisible()

			// Verificar se solu√ß√£o aparece
			await expect(authenticatedPage.getByText('Solu√ß√£o de teste para o problema')).toBeVisible()
		})

		test('‚úÖ Upload de imagens em solu√ß√µes via UploadThing', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Acessar problemas do primeiro produto
			await authenticatedauthenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedauthenticatedPage.waitForURL(/\/admin\/products\/.*\/problems/)

			// Clicar em um problema
			await authenticatedauthenticatedPage.locator('[data-testid="problem-item"]').first().click()

			// Clicar em responder
			await clickButton(page, 'Responder')

			// Preencher solu√ß√£o
			await fillFormField(page, 'Solu√ß√£o', 'Solu√ß√£o com imagem')

			// Upload de imagem
			const fileInput = authenticatedPage.locator('input[type="file"]')
			await fileInput.setInputFiles('tests/fixtures/solution-image.jpg')

			// Verificar preview
			await expect(authenticatedPage.locator('[data-testid="image-preview"]')).toBeVisible()

			// Salvar
			await clickButton(page, 'Salvar')

			// Verificar sucesso
			await expect(authenticatedPage.getByText(/solu√ß√£o criada|salva com sucesso/i)).toBeVisible()
		})

		test('‚úÖ Marcar solu√ß√£o como correta', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Acessar problemas do primeiro produto
			await authenticatedauthenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedauthenticatedPage.waitForURL(/\/admin\/products\/.*\/problems/)

			// Clicar em um problema
			await authenticatedauthenticatedPage.locator('[data-testid="problem-item"]').first().click()

			// Verificar se h√° solu√ß√µes
			const solutions = authenticatedPage.locator('[data-testid="solution-item"]')
			if ((await solutions.count()) > 0) {
				// Clicar no bot√£o de marcar como correta
				await authenticatedauthenticatedPage.locator('[data-testid="mark-correct"]').first().click()

				// Verificar se foi marcada como correta
				await expect(authenticatedPage.locator('[data-testid="correct-badge"]')).toBeVisible()
			}
		})
	})

	test.describe('üè∑Ô∏è Categorias de Problemas', () => {
		test('‚úÖ CRUD de categorias - criar/editar/excluir no offcanvas', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/problems')

			// Clicar no bot√£o de configura√ß√µes de categorias
			await clickButton(page, 'Configura√ß√µes')

			// Verificar se offcanvas abre
			await expect(authenticatedPage.locator('[data-testid="categories-offcanvas"]')).toBeVisible()

			// Criar nova categoria
			await clickButton(page, 'Nova Categoria')
			await fillFormField(page, 'Nome', 'Categoria Teste Playwright')
			await authenticatedauthenticatedPage.getByRole('combobox', { name: /cor/i }).selectOption('red')
			await clickButton(page, 'Salvar')

			// Verificar sucesso
			await expect(authenticatedPage.getByText(/categoria criada|salva com sucesso/i)).toBeVisible()

			// Editar categoria
			await authenticatedauthenticatedPage.locator('[data-testid="edit-category"]').last().click()
			await authenticatedauthenticatedPage.getByLabel('Nome').clear()
			await fillFormField(page, 'Nome', 'Categoria Editada')
			await clickButton(page, 'Salvar')

			// Verificar sucesso
			await expect(authenticatedPage.getByText(/categoria atualizada|alterada com sucesso/i)).toBeVisible()

			// Excluir categoria
			await authenticatedauthenticatedPage.locator('[data-testid="delete-category"]').last().click()
			await clickButton(page, 'Excluir')

			// Verificar sucesso
			await expect(authenticatedPage.getByText(/categoria exclu√≠da|removida com sucesso/i)).toBeVisible()
		})

		test('‚úÖ Valida√ß√£o de nomes √∫nicos - n√£o permite duplicatas', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/problems')

			// Abrir configura√ß√µes de categorias
			await clickButton(page, 'Configura√ß√µes')

			// Tentar criar categoria com nome existente
			await clickButton(page, 'Nova Categoria')
			await fillFormField(page, 'Nome', 'Rede externa') // Nome j√° existe
			await authenticatedauthenticatedPage.getByRole('combobox', { name: /cor/i }).selectOption('red')
			await clickButton(page, 'Salvar')

			// Deve mostrar erro de nome duplicado
			await expect(authenticatedPage.getByText(/nome j√° existe|duplicado/i)).toBeVisible()
		})

		test('‚úÖ 6 categorias padr√£o presentes', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/problems')

			// Abrir configura√ß√µes de categorias
			await clickButton(page, 'Configura√ß√µes')

			// Verificar se todas as categorias padr√£o est√£o presentes
			await expect(authenticatedPage.getByText('Rede externa')).toBeVisible()
			await expect(authenticatedPage.getByText('Rede interna')).toBeVisible()
			await expect(authenticatedPage.getByText('Servidor indispon√≠vel')).toBeVisible()
			await expect(authenticatedPage.getByText('Falha humana')).toBeVisible()
			await expect(authenticatedPage.getByText('Erro no software')).toBeVisible()
			await expect(authenticatedPage.getByText('Outros')).toBeVisible()
		})
	})

	test.describe('üîó Depend√™ncias Hier√°rquicas (MenuBuilder)', () => {
		test('‚úÖ Drag & drop - funciona corretamente', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Clicar no primeiro produto
			await authenticatedauthenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedauthenticatedPage.waitForURL(/\/admin\/products\/.*/)

			// Ir para aba de depend√™ncias
			await authenticatedauthenticatedPage.getByRole('tab', { name: /depend√™ncias/i }).click()

			// Verificar se MenuBuilder est√° vis√≠vel
			await expect(authenticatedPage.locator('[data-testid="menu-builder"]')).toBeVisible()

			// Testar drag & drop (se houver itens)
			const items = authenticatedPage.locator('[data-testid="menu-item"]')
			if ((await items.count()) > 1) {
				const firstItem = items.first()
				const secondItem = items.nth(1)

				// Arrastar primeiro item para depois do segundo
				await firstItem.dragTo(secondItem)

				// Verificar se ordem mudou
				await expect(authenticatedPage.locator('[data-testid="menu-item"]').first()).not.toHaveText(await firstItem.textContent())
			}
		})

		test('‚úÖ Hierarquia - mant√©m estrutura pai-filho', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Acessar depend√™ncias do primeiro produto
			await authenticatedauthenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedauthenticatedPage.getByRole('tab', { name: /depend√™ncias/i }).click()

			// Verificar se estrutura hier√°rquica est√° vis√≠vel
			await expect(authenticatedPage.locator('[data-testid="menu-hierarchy"]')).toBeVisible()

			// Verificar se h√° itens aninhados
			const nestedItems = authenticatedPage.locator('[data-testid="nested-item"]')
			if ((await nestedItems.count()) > 0) {
				await expect(nestedItems.first()).toBeVisible()
			}
		})

		test('‚úÖ √çcones Lucide - renderizam corretamente', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Acessar depend√™ncias do primeiro produto
			await authenticatedauthenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedauthenticatedPage.getByRole('tab', { name: /depend√™ncias/i }).click()

			// Verificar se √≠cones est√£o vis√≠veis
			const icons = authenticatedPage.locator('[data-testid="menu-icon"]')
			if ((await icons.count()) > 0) {
				await expect(icons.first()).toBeVisible()

				// Verificar se √≠cone tem classe Lucide
				const iconClass = await icons.first().getAttribute('class')
				expect(iconClass).toContain('lucide-')
			}
		})
	})

	test.describe('üìö Manual do Produto', () => {
		test('‚úÖ Editor Markdown - funciona com preview', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Acessar manual do primeiro produto
			await authenticatedauthenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedauthenticatedPage.getByRole('tab', { name: /manual/i }).click()

			// Verificar se editor est√° vis√≠vel
			await expect(authenticatedPage.locator('[data-testid="markdown-editor"]')).toBeVisible()

			// Verificar se preview est√° vis√≠vel
			await expect(authenticatedPage.locator('[data-testid="markdown-preview"]')).toBeVisible()

			// Digitar texto no editor
			await authenticatedauthenticatedPage.locator('[data-testid="markdown-editor"] textarea').fill('# T√≠tulo Teste\n\nConte√∫do de teste')

			// Verificar se preview atualiza
			await expect(authenticatedPage.getByText('T√≠tulo Teste')).toBeVisible()
		})

		test('‚úÖ Salvamento - persiste altera√ß√µes', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Acessar manual do primeiro produto
			await authenticatedauthenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedauthenticatedPage.getByRole('tab', { name: /manual/i }).click()

			// Editar conte√∫do
			await authenticatedauthenticatedPage.locator('[data-testid="markdown-editor"] textarea').fill('# Conte√∫do Salvo\n\nEste conte√∫do deve ser salvo')

			// Salvar
			await clickButton(page, 'Salvar')

			// Verificar toast de sucesso
			await expect(authenticatedPage.getByText(/manual salvo|alterado com sucesso/i)).toBeVisible()

			// Recarregar p√°gina
			await authenticatedauthenticatedPage.reload()

			// Verificar se conte√∫do foi persistido
			await expect(authenticatedPage.getByText('Conte√∫do Salvo')).toBeVisible()
		})

		test('‚úÖ Nomes √∫nicos - cap√≠tulos e se√ß√µes n√£o podem ter nomes duplicados', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Acessar manual do primeiro produto
			await authenticatedauthenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedauthenticatedPage.getByRole('tab', { name: /manual/i }).click()

			// Tentar criar se√ß√£o com nome duplicado
			await clickButton(page, 'Nova Se√ß√£o')
			await fillFormField(page, 'Nome', 'Se√ß√£o Existente') // Nome que j√° existe
			await clickButton(page, 'Salvar')

			// Deve mostrar erro de nome duplicado
			await expect(authenticatedPage.getByText(/nome j√° existe|duplicado/i)).toBeVisible()
		})
	})

	test.describe('üë• Associa√ß√£o Produto-Contato', () => {
		test('‚úÖ Sele√ß√£o m√∫ltipla - adicionar m√∫ltiplos contatos', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Acessar primeiro produto
			await authenticatedauthenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedauthenticatedPage.waitForURL(/\/admin\/products\/.*/)

			// Ir para aba de contatos
			await authenticatedauthenticatedPage.getByRole('tab', { name: /contatos/i }).click()

			// Clicar em adicionar contatos
			await clickButton(page, 'Adicionar Contatos')

			// Verificar se seletor abre
			await expect(authenticatedPage.locator('[data-testid="contact-selector"]')).toBeVisible()

			// Selecionar m√∫ltiplos contatos
			await authenticatedauthenticatedPage.locator('[data-testid="contact-checkbox"]').nth(0).check()
			await authenticatedauthenticatedPage.locator('[data-testid="contact-checkbox"]').nth(1).check()

			// Confirmar sele√ß√£o
			await clickButton(page, 'Confirmar')

			// Verificar se contatos foram adicionados
			await expect(authenticatedPage.locator('[data-testid="contact-item"]')).toHaveCount(2)
		})

		test('‚úÖ Remo√ß√£o - desassociar contatos', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Acessar primeiro produto
			await authenticatedauthenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedauthenticatedPage.getByRole('tab', { name: /contatos/i }).click()

			// Se houver contatos associados, remover um
			const contacts = authenticatedPage.locator('[data-testid="contact-item"]')
			if ((await contacts.count()) > 0) {
				// Clicar no bot√£o remover do primeiro contato
				await authenticatedauthenticatedPage.locator('[data-testid="remove-contact"]').first().click()

				// Verificar se contato foi removido
				await expect(authenticatedPage.locator('[data-testid="contact-item"]')).toHaveCount((await contacts.count()) - 1)
			}
		})

		test('‚úÖ Persist√™ncia - associa√ß√µes mantidas ap√≥s edi√ß√£o', async ({ authenticatedPage })) => {
			await authenticatedauthenticatedPage.goto('/admin/products')

			// Acessar primeiro produto
			await authenticatedauthenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedauthenticatedPage.getByRole('tab', { name: /contatos/i }).click()

			// Contar contatos associados
			const initialCount = await authenticatedauthenticatedPage.locator('[data-testid="contact-item"]').count()

			// Editar produto (sem alterar contatos)
			await authenticatedauthenticatedPage.getByRole('tab', { name: /geral/i }).click()
			await clickButton(page, 'Editar')
			await clickButton(page, 'Salvar')

			// Voltar para contatos
			await authenticatedauthenticatedPage.getByRole('tab', { name: /contatos/i }).click()

			// Verificar se contagem permanece igual
			await expect(authenticatedPage.locator('[data-testid="contact-item"]')).toHaveCount(initialCount)
		})
	})
})
