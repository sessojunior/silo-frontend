import { test, expect } from './utils/auth-helpers'

test.describe('üè≠ PRODUTOS, PROBLEMAS E SOLU√á√ïES', () => {
	test.describe('üì¶ CRUD de Produtos', () => {
		test('‚úÖ Criar produto - formul√°rio completo e valida√ß√µes', async ({ authenticatedPage }) => {
			// Navegar para a p√°gina de produtos
			await authenticatedPage.goto('/admin/settings/products')

			// Aguardar carregamento da p√°gina
			await authenticatedPage.waitForLoadState('networkidle')

			// Clicar no bot√£o de criar produto
			await authenticatedPage.getByRole('button', { name: 'Novo produto' }).click()

			// Preencher formul√°rio
			await authenticatedPage.getByLabel('Nome').fill('Produto Teste Playwright')
			await authenticatedPage.getByLabel('Slug').fill('produto-teste-playwright')

			// Salvar produto
			await authenticatedPage.getByRole('button', { name: 'Criar' }).click()

			// Verificar se produto foi criado
			await expect(authenticatedPage.getByText('Produto criado')).toBeVisible()
		})

		test('‚úÖ Editar produto - modifica√ß√£o de dados e salvamento', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/settings/products')
			await authenticatedPage.waitForLoadState('networkidle')

			// Clicar no bot√£o editar do primeiro produto (primeira linha da tabela)
			await authenticatedPage.locator('table tbody tr').first().locator('button[title="Editar produto"]').click()

			// Modificar nome
			await authenticatedPage.getByLabel('Nome').clear()
			await authenticatedPage.getByLabel('Nome').fill('Produto Editado Playwright')

			// Salvar altera√ß√µes
			await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

			// Verificar se foi salvo - usar seletor mais espec√≠fico para evitar strict mode violation
			await expect(authenticatedPage.locator('strong:has-text("Produto atualizado")').first()).toBeVisible()
		})

		// test('‚úÖ Excluir produto - confirma√ß√£o e remo√ß√£o completa', async ({ authenticatedPage }) => {
		// 	await authenticatedPage.goto('/admin/settings/products')
		// 	await authenticatedPage.waitForLoadState('networkidle')

		// 	// Contar produtos antes da exclus√£o
		// 	const initialCount = await authenticatedPage.locator('table tbody tr').count()

		// 	// Clicar no bot√£o excluir do primeiro produto (primeira linha da tabela)
		// 	await authenticatedPage.locator('table tbody tr').first().locator('button[title="Excluir produto"]').click()

		// 	// Verificar se dialog de confirma√ß√£o aparece
		// 	await expect(authenticatedPage.getByText(/confirmar exclus√£o/i)).toBeVisible()

		// 	// Confirmar exclus√£o - usar seletor mais espec√≠fico para evitar strict mode violation
		// 	await authenticatedPage.locator('button:has-text("Excluir produto")').first().click()

		// 	// Aguardar um pouco para a opera√ß√£o ser processada
		// 	await authenticatedPage.waitForTimeout(2000)

		// 	// Verificar se produto foi exclu√≠do - contar produtos ap√≥s exclus√£o
		// 	const finalCount = await authenticatedPage.locator('table tbody tr').count()
		// 	expect(finalCount).toBeLessThan(initialCount)

		// 	// Verificar se h√° toast de sucesso OU se o produto foi removido da lista
		// 	try {
		// 		await expect(authenticatedPage.getByText('Produto exclu√≠do')).toBeVisible({ timeout: 3000 })
		// 	} catch {
		// 		// Se n√£o houver toast, verificar se o produto foi removido da lista
		// 		console.log('üîµ Toast n√£o encontrado, verificando se produto foi removido da lista')
		// 		expect(finalCount).toBeLessThan(initialCount)
		// 	}
		// })

		test('‚úÖ Listagem - filtros, busca e pagina√ß√£o', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/settings/products')
			await authenticatedPage.waitForLoadState('networkidle')

			// Verificar se lista carregou - deve ter pelo menos 5 produtos (conforme snapshot)
			await expect(authenticatedPage.locator('table tbody tr')).toHaveCount(5, { timeout: 10000 })

			// Testar busca
			await authenticatedPage.getByPlaceholder('Buscar produtos...').fill('teste')
			await authenticatedPage.waitForTimeout(1000)

			// Verificar se filtros funcionam - clicar no bot√£o de filtro
			await authenticatedPage.getByRole('button', { name: 'Todos os status' }).click()
			await authenticatedPage.waitForTimeout(1000)
		})
	})

	test.describe('üö® Sistema de Problemas', () => {
		test.skip('‚úÖ Criar problema - formul√°rio completo e valida√ß√µes', async ({ authenticatedPage }) => {
			// Navegar diretamente para a p√°gina de um produto espec√≠fico (usando slug conhecido)
			await authenticatedPage.goto('/admin/products/bam')
			await authenticatedPage.waitForLoadState('networkidle')

			// Clicar no bot√£o "Problemas & solu√ß√µes"
			await authenticatedPage.getByRole('button', { name: 'Problemas & solu√ß√µes' }).click()

			// Clicar em adicionar problema - usar seletor mais espec√≠fico para evitar strict mode violation
			await authenticatedPage.locator('button[title="Adicionar problema"]').first().click()

			// Verificar se o formul√°rio abriu - procurar pelo t√≠tulo "Adicionar problema" no formul√°rio
			await expect(authenticatedPage.locator('div.font-semibold:has-text("Adicionar problema")')).toBeVisible({ timeout: 10000 })

			// Verificar se pelo menos o bot√£o "Adicionar" est√° vis√≠vel (confirma√ß√£o de que formul√°rio abriu)
			// Usar seletor mais espec√≠fico para o bot√£o do formul√°rio
			await expect(authenticatedPage.locator('button[type="submit"]:has-text("Adicionar")')).toBeVisible()

			// Preencher formul√°rio - usar seletores b√°sicos do Playwright
			// T√≠tulo do problema - procurar por todos os inputs e usar o primeiro
			const titleInput = authenticatedPage.locator('input').first()
			await titleInput.fill('Problema Teste Playwright')
			console.log('üîµ T√≠tulo preenchido')

			// Descri√ß√£o do problema - procurar por todos os textarea e usar o primeiro
			const descriptionInput = authenticatedPage.locator('textarea').first()
			await descriptionInput.fill('Descri√ß√£o do problema teste criado via Playwright')
			console.log('üîµ Descri√ß√£o preenchida')

			// Selecionar categoria - clicar no bot√£o "Selecione a categoria" e escolher uma op√ß√£o
			await authenticatedPage.getByRole('button', { name: 'Selecione a categoria' }).click()
			await authenticatedPage.getByText('Rede externa').click()
			console.log('üîµ Categoria selecionada')

			// Verificar se o bot√£o Adicionar ainda est√° vis√≠vel antes de clicar
			await expect(authenticatedPage.locator('button[type="submit"]:has-text("Adicionar")')).toBeVisible()
			console.log('üîµ Bot√£o Adicionar vis√≠vel, tentando clicar...')

			// Salvar problema - tentar clicar no bot√£o Adicionar
			await authenticatedPage.locator('button[type="submit"]:has-text("Adicionar")').click()
			console.log('üîµ Bot√£o Adicionar clicado')

			// Aguardar um pouco para o formul√°rio fechar
			await authenticatedPage.waitForTimeout(3000)

			// Verificar se o formul√°rio fechou (indicando sucesso)
			try {
				await expect(authenticatedPage.locator('div.font-semibold:has-text("Adicionar problema")')).not.toBeVisible({ timeout: 5000 })
				console.log('üîµ Formul√°rio fechou - sucesso!')
			} catch (error) {
				console.log('‚ö†Ô∏è Formul√°rio ainda est√° aberto - verificar se h√° erros')

				// Verificar se h√° mensagens de erro
				const errorMessages = authenticatedPage.locator('text:has-text("erro"), text:has-text("Erro"), text:has-text("ERRO")')
				if ((await errorMessages.count()) > 0) {
					console.log('‚ùå Mensagens de erro encontradas:')
					for (let i = 0; i < (await errorMessages.count()); i++) {
						const text = await errorMessages.nth(i).textContent()
						console.log(`   - ${text}`)
					}
				}

				// Verificar se h√° mensagens de valida√ß√£o
				const validationMessages = authenticatedPage.locator('text:has-text("obrigat√≥rio"), text:has-text("campo"), text:has-text("Campo")')
				if ((await validationMessages.count()) > 0) {
					console.log('‚ö†Ô∏è Mensagens de valida√ß√£o encontradas:')
					for (let i = 0; i < (await validationMessages.count()); i++) {
						const text = await validationMessages.nth(i).textContent()
						console.log(`   - ${text}`)
					}
				}

				// Verificar se o bot√£o Adicionar ainda est√° clic√°vel
				const addButton = authenticatedPage.locator('button[type="submit"]:has-text("Adicionar")')
				const isDisabled = await addButton.isDisabled()
				console.log(`üîµ Bot√£o Adicionar est√° desabilitado: ${isDisabled}`)

				// Verificar se h√° algum indicador de loading
				const loadingIndicators = authenticatedPage.locator('text:has-text("Salvando"), text:has-text("Carregando"), text:has-text("Processando")')
				if ((await loadingIndicators.count()) > 0) {
					console.log('‚è≥ Indicadores de loading encontrados:')
					for (let i = 0; i < (await loadingIndicators.count()); i++) {
						const text = await loadingIndicators.nth(i).textContent()
						console.log(`   - ${text}`)
					}
				}
			}

			// Verificar se problema foi criado - procurar por mensagem de sucesso ou pelo problema na lista
			await expect(authenticatedPage.getByText('Problema Teste Playwright')).toBeVisible({ timeout: 10000 })

			console.log('üîµ Problema criado com sucesso')
		})

		test.skip('‚úÖ Upload de imagens via UploadThing - limite de 3 imagens', async ({ authenticatedPage }) => {
			// Navegar diretamente para a p√°gina de um produto espec√≠fico (usando slug conhecido)
			await authenticatedPage.goto('/admin/products/bam')
			await authenticatedPage.waitForLoadState('networkidle')

			// Clicar no bot√£o "Problemas & solu√ß√µes"
			await authenticatedPage.getByRole('button', { name: 'Problemas & solu√ß√µes' }).click()

			// Clicar em adicionar problema - usar seletor mais espec√≠fico para evitar strict mode violation
			await authenticatedPage.locator('button[title="Adicionar problema"]').first().click()

			// Verificar se o formul√°rio abriu
			await expect(authenticatedPage.locator('div.font-semibold:has-text("Adicionar problema")')).toBeVisible({ timeout: 10000 })

			// Preencher campos obrigat√≥rios - usar seletores que funcionam
			// T√≠tulo do problema - procurar por todos os inputs e usar o primeiro
			const titleInput = authenticatedPage.locator('input').first()
			await titleInput.fill('Problema com Imagens')

			// Descri√ß√£o do problema - procurar por todos os textarea e usar o primeiro
			const descriptionInput = authenticatedPage.locator('textarea').first()
			await descriptionInput.fill('Teste de upload de imagens')

			// Selecionar categoria - clicar no bot√£o "Selecione a categoria" e escolher uma op√ß√£o
			await authenticatedPage.getByRole('button', { name: 'Selecione a categoria' }).click()
			await authenticatedPage.getByText('Rede externa').click()

			// Salvar problema primeiro
			await authenticatedPage.locator('button[type="submit"]:has-text("Adicionar")').click()

			// Aguardar cria√ß√£o e depois editar para adicionar imagens
			await authenticatedPage.waitForTimeout(2000)

			// Clicar no problema criado para editar
			await authenticatedPage.getByText('Problema com Imagens').click()

			// Clicar em editar problema
			await authenticatedPage.getByRole('button', { name: 'Editar problema' }).click()

			// Fazer upload de imagem
			const fileInput = authenticatedPage.locator('input[type="file"]')
			await fileInput.setInputFiles('tests/fixtures/test-image.jpg')

			// Verificar se imagem foi carregada
			await expect(authenticatedPage.locator('[data-testid="uploaded-image"]')).toBeVisible()
		})

		test('‚úÖ Threading - visualiza√ß√£o hier√°rquica de problemas', async ({ authenticatedPage }) => {
			// Navegar diretamente para a p√°gina de um produto espec√≠fico (usando slug conhecido)
			await authenticatedPage.goto('/admin/products/bam')
			await authenticatedPage.waitForLoadState('networkidle')

			// Clicar no bot√£o "Problemas & solu√ß√µes"
			await authenticatedPage.getByRole('button', { name: 'Problemas & solu√ß√µes' }).click()

			// Verificar se problemas est√£o organizados hierarquicamente - usar seletor mais espec√≠fico
			await expect(authenticatedPage.locator('span:has-text("Dificuldade na configura√ß√£o inicial")').first()).toBeVisible()
		})
	})

	test.describe('üí° Sistema de Solu√ß√µes', () => {
		test('‚úÖ Responder problema - cria√ß√£o de solu√ß√£o', async ({ authenticatedPage }) => {
			// Navegar diretamente para a p√°gina de um produto espec√≠fico (usando slug conhecido)
			await authenticatedPage.goto('/admin/products/bam')
			await authenticatedPage.waitForLoadState('networkidle')

			// Clicar no bot√£o "Problemas & solu√ß√µes"
			await authenticatedPage.getByRole('button', { name: 'Problemas & solu√ß√µes' }).click()

			// Clicar em um problema existente - usar seletor mais espec√≠fico para o t√≠tulo
			await authenticatedPage.locator('span.text-base.font-semibold:has-text("Dificuldade na configura√ß√£o inicial")').first().click()

			// Clicar em responder
			await authenticatedPage.getByRole('button', { name: 'Responder' }).first().click()

			// Preencher solu√ß√£o - usar seletor b√°sico
			const solutionInput = authenticatedPage.locator('textarea').first()
			await solutionInput.fill('Solu√ß√£o teste via Playwright')

			// Salvar solu√ß√£o - usar bot√£o submit do formul√°rio
			await authenticatedPage.locator('button[type="submit"]:has-text("Responder")').click()

			// Verificar se solu√ß√£o foi criada
			await expect(authenticatedPage.getByText('Solu√ß√£o teste via Playwright')).toBeVisible()
		})

		test.skip('‚úÖ Upload de imagens em solu√ß√µes via UploadThing', async ({ authenticatedPage }) => {
			// Navegar diretamente para a p√°gina de um produto espec√≠fico (usando slug conhecido)
			await authenticatedPage.goto('/admin/products/bam')
			await authenticatedPage.waitForLoadState('networkidle')

			// Clicar no bot√£o "Problemas & solu√ß√µes"
			await authenticatedPage.getByRole('button', { name: 'Problemas & solu√ß√µes' }).click()

			// Clicar em um problema existente - usar seletor mais espec√≠fico para o t√≠tulo
			await authenticatedPage.locator('span.text-base.font-semibold:has-text("Dificuldade na configura√ß√£o inicial")').first().click()

			// Clicar em responder
			await authenticatedPage.getByRole('button', { name: 'Responder' }).first().click()

			// Fazer upload de imagem na solu√ß√£o
			const fileInput = authenticatedPage.locator('input[type="file"]')
			await fileInput.setInputFiles('tests/fixtures/test-image.jpg')

			// Verificar se imagem foi carregada
			await expect(authenticatedPage.locator('img')).toBeVisible()
		})

		test.skip('‚úÖ Marcar solu√ß√£o como correta', async ({ authenticatedPage }) => {
			// Navegar diretamente para a p√°gina de um produto espec√≠fico (usando slug conhecido)
			await authenticatedPage.goto('/admin/products/bam')
			await authenticatedPage.waitForLoadState('networkidle')

			// Clicar no bot√£o "Problemas & solu√ß√µes"
			await authenticatedPage.getByRole('button', { name: 'Problemas & solu√ß√µes' }).click()

			// Clicar em um problema existente - usar seletor mais espec√≠fico para o t√≠tulo
			await authenticatedPage.locator('span.text-base.font-semibold:has-text("Dificuldade na configura√ß√£o inicial")').first().click()

			// Marcar solu√ß√£o como correta - procurar por bot√£o de verifica√ß√£o
			const verifyButton = authenticatedPage.locator('button:has-text("Verificar")').first()
			await verifyButton.click()

			// Verificar se foi marcada como correta
			await expect(authenticatedPage.getByText('Resposta verificada')).toBeVisible()
		})
	})

	test.describe('üè∑Ô∏è Categorias de Problemas', () => {
		test('‚úÖ CRUD de categorias - criar/editar/excluir no offcanvas', async ({ authenticatedPage }) => {
			// Acessar problemas do primeiro produto
			await authenticatedPage.goto('/admin/settings/products')
			await authenticatedPage.waitForLoadState('networkidle')

			// Acessar problemas do primeiro produto
			await authenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedPage.waitForURL(/\/admin\/products\/.*\/problems/)

			// Clicar no bot√£o de configura√ß√µes de categorias
			await authenticatedPage.getByRole('button', { name: 'Configura√ß√µes' }).click()

			// Verificar se offcanvas abre
			await expect(authenticatedPage.locator('[data-testid="categories-offcanvas"]')).toBeVisible()

			// Criar nova categoria
			await authenticatedPage.getByRole('button', { name: 'Nova Categoria' }).click()
			await authenticatedPage.getByLabel('Nome').fill('Categoria Teste')
			await authenticatedPage.getByRole('button', { name: 'Criar' }).click()

			// Verificar se categoria foi criada
			await expect(authenticatedPage.getByText('Categoria criada')).toBeVisible()
		})

		test('‚úÖ Valida√ß√£o de nomes √∫nicos - n√£o permite duplicatas', async ({ authenticatedPage }) => {
			// Acessar problemas do primeiro produto
			await authenticatedPage.goto('/admin/settings/products')
			await authenticatedPage.waitForLoadState('networkidle')

			// Acessar problemas do primeiro produto
			await authenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedPage.waitForURL(/\/admin\/products\/.*\/problems/)

			// Abrir configura√ß√µes de categorias
			await authenticatedPage.getByRole('button', { name: 'Configura√ß√µes' }).click()

			// Tentar criar categoria com nome existente
			await authenticatedPage.getByRole('button', { name: 'Nova Categoria' }).click()
			await authenticatedPage.getByLabel('Nome').fill('Rede externa')
			await authenticatedPage.getByRole('button', { name: 'Criar' }).click()

			// Verificar se erro foi exibido
			await expect(authenticatedPage.getByText(/nome j√° existe|duplicado/i)).toBeVisible()
		})

		test('‚úÖ 6 categorias padr√£o presentes', async ({ authenticatedPage }) => {
			// Acessar problemas do primeiro produto
			await authenticatedPage.goto('/admin/settings/products')
			await authenticatedPage.waitForLoadState('networkidle')

			// Acessar problemas do primeiro produto
			await authenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedPage.waitForURL(/\/admin\/products\/.*\/problems/)

			// Abrir configura√ß√µes de categorias
			await authenticatedPage.getByRole('button', { name: 'Configura√ß√µes' }).click()

			// Verificar se todas as categorias padr√£o est√£o presentes
			await expect(authenticatedPage.getByText('Rede externa')).toBeVisible()
			await expect(authenticatedPage.getByText('Rede interna')).toBeVisible()
			await expect(authenticatedPage.getByText('Servidor indispon√≠vel')).toBeVisible()
			await expect(authenticatedPage.getByText('Falha humana')).toBeVisible()
			await expect(authenticatedPage.getByText('Erro no software')).toBeVisible()
			await expect(authenticatedPage.getByText('Outros')).toBeVisible()
		})
	})

	test.describe('üîó Depend√™ncias Hier√°rquicas (MenuBuilder)', () => {
		test('‚úÖ Drag & drop - funciona corretamente', async ({ authenticatedPage }) => {
			// Acessar depend√™ncias do primeiro produto
			await authenticatedPage.goto('/admin/settings/products')
			await authenticatedPage.waitForLoadState('networkidle')

			// Clicar no primeiro produto
			await authenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedPage.waitForURL(/\/admin\/products\/.*/)

			// Ir para aba de depend√™ncias
			await authenticatedPage.getByRole('tab', { name: /depend√™ncias/i }).click()

			// Verificar se MenuBuilder est√° vis√≠vel
			await expect(authenticatedPage.locator('[data-testid="menu-builder"]')).toBeVisible()

			// Testar drag & drop
			const sourceItem = authenticatedPage.locator('[data-testid="menu-item"]').first()
			const targetArea = authenticatedPage.locator('[data-testid="drop-zone"]')

			await sourceItem.dragTo(targetArea)

			// Verificar se item foi movido
			await expect(targetArea.locator('[data-testid="menu-item"]')).toBeVisible()
		})

		test('‚úÖ Hierarquia - mant√©m estrutura pai-filho', async ({ authenticatedPage }) => {
			// Acessar depend√™ncias do primeiro produto
			await authenticatedPage.goto('/admin/settings/products')
			await authenticatedPage.waitForLoadState('networkidle')

			// Acessar depend√™ncias do primeiro produto
			await authenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedPage.waitForURL(/\/admin\/products\/.*/)

			// Ir para aba de depend√™ncias
			await authenticatedPage.getByRole('tab', { name: /depend√™ncias/i }).click()

			// Verificar se estrutura hier√°rquica est√° vis√≠vel
			await expect(authenticatedPage.locator('[data-testid="hierarchy-tree"]')).toBeVisible()

			// Verificar se itens pai e filho est√£o organizados
			await expect(authenticatedPage.locator('[data-testid="parent-item"]')).toBeVisible()
			await expect(authenticatedPage.locator('[data-testid="child-item"]')).toBeVisible()
		})

		test('‚úÖ √çcones Lucide - renderizam corretamente', async ({ authenticatedPage }) => {
			// Acessar depend√™ncias do primeiro produto
			await authenticatedPage.goto('/admin/settings/products')
			await authenticatedPage.waitForLoadState('networkidle')

			// Acessar depend√™ncias do primeiro produto
			await authenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedPage.waitForURL(/\/admin\/products\/.*/)

			// Ir para aba de depend√™ncias
			await authenticatedPage.getByRole('tab', { name: /depend√™ncias/i }).click()

			// Verificar se √≠cones est√£o vis√≠veis
			await expect(authenticatedPage.locator('[data-testid="lucide-icon"]')).toBeVisible()

			// Verificar se √≠cones espec√≠ficos est√£o presentes
			await expect(authenticatedPage.locator('i[class*="lucide-"]')).toBeVisible()
		})
	})

	test.describe('üìö Manual do Produto', () => {
		test('‚úÖ Editor Markdown - funciona com preview', async ({ authenticatedPage }) => {
			// Acessar manual do primeiro produto
			await authenticatedPage.goto('/admin/settings/products')
			await authenticatedPage.waitForLoadState('networkidle')

			// Acessar manual do primeiro produto
			await authenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedPage.waitForURL(/\/admin\/products\/.*/)

			// Ir para aba de manual
			await authenticatedPage.getByRole('tab', { name: /manual/i }).click()

			// Verificar se editor est√° vis√≠vel
			await expect(authenticatedPage.locator('[data-testid="markdown-editor"]')).toBeVisible()

			// Verificar se preview est√° vis√≠vel
			await expect(authenticatedPage.locator('[data-testid="markdown-preview"]')).toBeVisible()

			// Testar edi√ß√£o
			await authenticatedPage.locator('[data-testid="editor-textarea"]').fill('# T√≠tulo Teste\n\nConte√∫do teste')
		})

		test('‚úÖ Salvamento - persiste altera√ß√µes', async ({ authenticatedPage }) => {
			// Acessar manual do primeiro produto
			await authenticatedPage.goto('/admin/settings/products')
			await authenticatedPage.waitForLoadState('networkidle')

			// Acessar manual do primeiro produto
			await authenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedPage.waitForURL(/\/admin\/products\/.*/)

			// Ir para aba de manual
			await authenticatedPage.getByRole('tab', { name: /manual/i }).click()

			// Editar conte√∫do
			await authenticatedPage.locator('[data-testid="editor-textarea"]').fill('# Novo T√≠tulo\n\nNovo conte√∫do')

			// Salvar altera√ß√µes
			await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

			// Verificar se foi salvo
			await expect(authenticatedPage.getByText('Manual salvo')).toBeVisible()
		})

		test('‚úÖ Nomes √∫nicos - cap√≠tulos e se√ß√µes n√£o podem ter nomes duplicados', async ({ authenticatedPage }) => {
			// Acessar manual do primeiro produto
			await authenticatedPage.goto('/admin/settings/products')
			await authenticatedPage.waitForLoadState('networkidle')

			// Acessar manual do primeiro produto
			await authenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedPage.waitForURL(/\/admin\/products\/.*/)

			// Ir para aba de manual
			await authenticatedPage.getByRole('tab', { name: /manual/i }).click()

			// Tentar criar se√ß√£o com nome duplicado
			await authenticatedPage.getByRole('button', { name: 'Nova Se√ß√£o' }).click()
			await authenticatedPage.getByLabel('Nome da Se√ß√£o').fill('Se√ß√£o Existente')
			await authenticatedPage.getByRole('button', { name: 'Criar' }).click()

			// Verificar se erro foi exibido
			await expect(authenticatedPage.getByText(/nome j√° existe|duplicado/i)).toBeVisible()
		})
	})

	test.describe('üë• Associa√ß√£o Produto-Contato', () => {
		test('‚úÖ Sele√ß√£o m√∫ltipla - adicionar m√∫ltiplos contatos', async ({ authenticatedPage }) => {
			// Acessar primeiro produto
			await authenticatedPage.goto('/admin/settings/products')
			await authenticatedPage.waitForLoadState('networkidle')

			// Acessar primeiro produto
			await authenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedPage.waitForURL(/\/admin\/products\/.*/)

			// Ir para aba de contatos
			await authenticatedPage.getByRole('tab', { name: /contatos/i }).click()

			// Clicar em adicionar contatos
			await authenticatedPage.getByRole('button', { name: 'Adicionar Contatos' }).click()

			// Selecionar m√∫ltiplos contatos
			await authenticatedPage.locator('[data-testid="contact-checkbox"]').nth(0).check()
			await authenticatedPage.locator('[data-testid="contact-checkbox"]').nth(1).check()

			// Salvar associa√ß√µes
			await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

			// Verificar se contatos foram associados
			await expect(authenticatedPage.getByText('Contatos associados')).toBeVisible()
		})

		test('‚úÖ Remo√ß√£o - desassociar contatos', async ({ authenticatedPage }) => {
			// Acessar primeiro produto
			await authenticatedPage.goto('/admin/settings/products')
			await authenticatedPage.waitForLoadState('networkidle')

			// Acessar primeiro produto
			await authenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedPage.waitForURL(/\/admin\/products\/.*/)

			// Ir para aba de contatos
			await authenticatedPage.getByRole('tab', { name: /contatos/i }).click()

			// Se houver contatos associados, remover um
			const removeButton = authenticatedPage.locator('[data-testid="remove-contact"]').first()
			if (await removeButton.isVisible()) {
				await removeButton.click()

				// Confirmar remo√ß√£o
				await authenticatedPage.getByRole('button', { name: 'Confirmar' }).click()

				// Verificar se contato foi removido
				await expect(authenticatedPage.getByText('Contato removido')).toBeVisible()
			}
		})

		test('‚úÖ Persist√™ncia - associa√ß√µes mantidas ap√≥s edi√ß√£o', async ({ authenticatedPage }) => {
			// Acessar primeiro produto
			await authenticatedPage.goto('/admin/settings/products')
			await authenticatedPage.waitForLoadState('networkidle')

			// Acessar primeiro produto
			await authenticatedPage.locator('[data-testid="product-item"]').first().click()
			await authenticatedPage.waitForURL(/\/admin\/products\/.*/)

			// Ir para aba de contatos
			await authenticatedPage.getByRole('tab', { name: /contatos/i }).click()

			// Contar contatos associados
			const contactCount = await authenticatedPage.locator('[data-testid="associated-contact"]').count()

			// Editar produto
			await authenticatedPage.getByRole('tab', { name: /geral/i }).click()
			await authenticatedPage.getByRole('button', { name: 'Editar' }).click()

			// Salvar altera√ß√µes
			await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

			// Voltar para contatos e verificar se contagem permaneceu
			await authenticatedPage.getByRole('tab', { name: /contatos/i }).click()
			await expect(authenticatedPage.locator('[data-testid="associated-contact"]')).toHaveCount(contactCount)
		})
	})
})
