import { test, expect } from './utils/auth-helpers'

test.describe('üìä Dashboard - Gr√°ficos ApexCharts', () => {
	test('‚úÖ Gr√°ficos ApexCharts funcionais', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Aguardar carregamento da p√°gina
		await authenticatedPage.waitForLoadState('networkidle')

		// Rolar a p√°gina para baixo para visualizar os gr√°ficos
		await authenticatedPage.evaluate(() => window.scrollTo(0, document.body.scrollHeight))

		// Aguardar um pouco para os gr√°ficos renderizarem ap√≥s o scroll
		await authenticatedPage.waitForTimeout(2000)

		// Verificar se gr√°ficos est√£o renderizados - usar seletores que realmente existem
		const chartContainers = authenticatedPage.locator('.w-full.max-w-lg')
		await expect(chartContainers).toHaveCount(3, { timeout: 60000 }) // Deve ter 3 gr√°ficos

		// Verificar se gr√°fico donut "Causas de problemas" est√° vis√≠vel
		await expect(authenticatedPage.getByText('Causas de problemas (28 dias)')).toBeVisible()

		// Verificar se gr√°fico de linha est√° vis√≠vel
		await expect(authenticatedPage.getByText('Problemas & solu√ß√µes (√∫ltimos 28 dias)')).toBeVisible()

		// Verificar se gr√°fico de coluna est√° vis√≠vel
		await expect(authenticatedPage.getByText('Incidentes (√∫ltimos 7 dias)')).toBeVisible()
	})

	test('‚úÖ Donut "Causas de problemas" com dados dos √∫ltimos 28 dias', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Aguardar carregamento da p√°gina
		await authenticatedPage.waitForLoadState('networkidle')

		// Rolar a p√°gina para baixo para visualizar os gr√°ficos
		await authenticatedPage.evaluate(() => window.scrollTo(0, document.body.scrollHeight))

		// Aguardar um pouco para os gr√°ficos renderizarem ap√≥s o scroll
		await authenticatedPage.waitForTimeout(2000)

		// Verificar se gr√°fico donut est√° vis√≠vel - usar seletor mais espec√≠fico
		const donutChart = authenticatedPage.locator('.w-full.max-w-lg').first()
		await expect(donutChart).toBeVisible({ timeout: 60000 })

		// Verificar se t√≠tulo do gr√°fico est√° vis√≠vel
		await expect(authenticatedPage.getByText('Causas de problemas (28 dias)')).toBeVisible()

		// Verificar se gr√°fico est√° renderizado - usar seletor mais espec√≠fico
		await expect(authenticatedPage.locator('.w-full.max-w-lg').first()).toBeVisible()
	})
})
