import { test, expect } from './utils/auth-helpers'

test.describe('‚öôÔ∏è SISTEMA DE CONFIGURA√á√ïES', () => {
	test.describe('üë§ Perfil do Usu√°rio', () => {
		test('‚úÖ Editar dados - nome, email, informa√ß√µes pessoais', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/settings')

			// Verificar se p√°gina de configura√ß√µes carregou
			await expect(authenticatedPage.getByRole('heading', { name: /configura√ß√µes/i })).toBeVisible()

			// Ir para aba de perfil
			await authenticatedPage.getByRole('tab', { name: /perfil/i }).click()

			// Verificar se formul√°rio est√° vis√≠vel
			await expect(authenticatedPage.getByLabel('Nome completo')).toBeVisible()
			await expect(authenticatedPage.getByLabel('Email')).toBeVisible()

			// Modificar nome
			await authenticatedPage.getByLabel('Nome completo').clear()
			await authenticatedPage.getByLabel('Nome completo').fill('Usu√°rio Editado Playwright')

			// Modificar informa√ß√µes pessoais
			await authenticatedPage.getByLabel('Telefone').clear()
			await authenticatedPage.getByLabel('Telefone').fill('(11) 99999-9999')

			// Salvar altera√ß√µes
			await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

			// Verificar toast de sucesso
			await expect(authenticatedPage.getByText(/perfil atualizado|alterado com sucesso/i)).toBeVisible()

			// Verificar se altera√ß√µes foram salvas
			await expect(authenticatedPage.getByLabel('Nome completo')).toHaveValue('Usu√°rio Editado Playwright')
			await expect(authenticatedPage.getByLabel('Telefone')).toHaveValue('(11) 99999-9999')
		})

		test('‚úÖ Upload de avatar - via UploadThing, resize autom√°tico', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/settings')

			// Ir para aba de perfil
			await authenticatedPage.getByRole('tab', { name: /perfil/i }).click()

			// Verificar se √°rea de upload est√° vis√≠vel
			await expect(authenticatedPage.locator('[data-testid="avatar-upload"]')).toBeVisible()

			// Verificar se avatar atual est√° vis√≠vel
			await expect(authenticatedPage.locator('[data-testid="current-avatar"]')).toBeVisible()

			// Clicar em alterar avatar
			await authenticatedPage.getByRole('button', { name: 'Alterar Avatar' }).click()

			// Verificar se seletor de arquivo est√° vis√≠vel
			await expect(authenticatedPage.locator('input[type="file"]')).toBeVisible()

			// Upload de nova imagem
			const fileInput = authenticatedPage.locator('input[type="file"]')
			await fileInput.setInputFiles('tests/fixtures/avatar-image.jpg')

			// Verificar se preview da nova imagem aparece
			await expect(authenticatedPage.locator('[data-testid="avatar-preview"]')).toBeVisible()

			// Salvar altera√ß√µes
			await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

			// Verificar toast de sucesso
			await expect(authenticatedPage.getByText(/avatar atualizado|alterado com sucesso/i)).toBeVisible()

			// Verificar se novo avatar est√° vis√≠vel
			await expect(authenticatedPage.locator('[data-testid="current-avatar"]')).toBeVisible()
		})

		test('‚úÖ Salvamento - persiste altera√ß√µes', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/settings')

			// Ir para aba de perfil
			await authenticatedPage.getByRole('tab', { name: /perfil/i }).click()

			// Modificar dados
			await authenticatedPage.getByLabel('Nome completo').clear()
			await authenticatedPage.getByLabel('Nome completo').fill('Usu√°rio Persistente')

			// Salvar
			await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

			// Verificar sucesso
			await expect(authenticatedPage.getByText(/perfil atualizado|alterado com sucesso/i)).toBeVisible()

			// Recarregar p√°gina
			await authenticatedPage.reload()

			// Verificar se dados foram persistidos
			await expect(authenticatedPage.getByLabel('Nome completo')).toHaveValue('Usu√°rio Persistente')
		})
	})

	test.describe('üé® Prefer√™ncias', () => {
		test('‚úÖ Tema - Dark/light mode', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/settings')

			// Ir para aba de prefer√™ncias
			await authenticatedPage.getByRole('tab', { name: /prefer√™ncias/i }).click()

			// Verificar se seletor de tema est√° vis√≠vel
			await expect(authenticatedPage.getByRole('combobox', { name: /tema/i })).toBeVisible()

			// Verificar tema atual
			const currentTheme = authenticatedPage.getByRole('combobox', { name: /tema/i })
			const currentValue = await currentTheme.evaluate((el) => (el as HTMLSelectElement).value)

			// Alternar para tema oposto
			const newTheme = currentValue === 'light' ? 'dark' : 'light'
			await currentTheme.selectOption(newTheme)

			// Aguardar transi√ß√£o
			await authenticatedPage.waitForTimeout(1000)

			// Verificar se tema mudou
			await expect(currentTheme).toHaveValue(newTheme)

			// Salvar prefer√™ncias
			await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

			// Verificar toast de sucesso
			await expect(authenticatedPage.getByText(/prefer√™ncias salvas|alteradas com sucesso/i)).toBeVisible()

			// Recarregar p√°gina para verificar persist√™ncia
			await authenticatedPage.reload()

			// Verificar se tema foi persistido
			await expect(currentTheme).toHaveValue(newTheme)
		})

		test('‚úÖ Notifica√ß√µes - configura√ß√µes de alertas', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/settings')

			// Ir para aba de prefer√™ncias
			await authenticatedPage.getByRole('tab', { name: /prefer√™ncias/i }).click()

			// Verificar se configura√ß√µes de notifica√ß√µes est√£o vis√≠veis
			await expect(authenticatedPage.getByText(/notifica√ß√µes|alertas/i)).toBeVisible()

			// Verificar checkboxes de notifica√ß√µes
			const notificationCheckboxes = authenticatedPage.locator('[data-testid="notification-checkbox"]')
			if ((await notificationCheckboxes.count()) > 0) {
				// Marcar/desmarcar algumas notifica√ß√µes
				await notificationCheckboxes.first().check()
				await notificationCheckboxes.nth(1).uncheck()

				// Salvar prefer√™ncias
				await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

				// Verificar toast de sucesso
				await expect(authenticatedPage.getByText(/prefer√™ncias salvas|alteradas com sucesso/i)).toBeVisible()
			}
		})

		test('‚úÖ Auto-save - quando aplic√°vel', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/settings')

			// Ir para aba de prefer√™ncias
			await authenticatedPage.getByRole('tab', { name: /prefer√™ncias/i }).click()

			// Verificar se auto-save est√° configurado
			const autoSaveToggle = authenticatedPage.locator('[data-testid="auto-save-toggle"]')
			if ((await autoSaveToggle.count()) > 0) {
				// Ativar auto-save
				await autoSaveToggle.check()

				// Fazer altera√ß√£o
				await authenticatedPage.getByRole('combobox', { name: /tema/i }).selectOption('dark')

				// Aguardar auto-save
				await authenticatedPage.waitForTimeout(3000)

				// Verificar se foi salvo automaticamente
				await expect(authenticatedPage.getByText(/salvo automaticamente|auto-save/i)).toBeVisible()
			}
		})
	})

	test.describe('üîí Seguran√ßa', () => {
		test('‚úÖ Troca de senha - valida√ß√µes e confirma√ß√£o', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/settings')

			// Ir para aba de seguran√ßa
			await authenticatedPage.getByRole('tab', { name: /seguran√ßa/i }).click()

			// Verificar se formul√°rio de troca de senha est√° vis√≠vel
			await expect(authenticatedPage.getByLabel('Senha atual')).toBeVisible()
			await expect(authenticatedPage.getByLabel('Nova senha')).toBeVisible()
			await expect(authenticatedPage.getByLabel('Confirmar nova senha')).toBeVisible()

			// Preencher senha atual
			await authenticatedPage.getByLabel('Senha atual').fill('#Admin123')

			// Preencher nova senha
			await authenticatedPage.getByLabel('Nova senha').fill('novaSenha123')

			// Preencher confirma√ß√£o
			await authenticatedPage.getByLabel('Confirmar nova senha').fill('novaSenha123')

			// Salvar altera√ß√µes
			await authenticatedPage.getByRole('button', { name: 'Alterar Senha' }).click()

			// Verificar toast de sucesso
			await expect(authenticatedPage.getByText(/senha alterada|alterada com sucesso/i)).toBeVisible()

			// Fazer logout para testar nova senha
			await authenticatedPage.getByRole('button', { name: /configura√ß√µes|perfil/i }).click()
			await authenticatedPage.getByRole('menuitem', { name: 'Sair' }).click()

			// Tentar login com nova senha
			await authenticatedPage.getByLabel('Email').fill('mario.junior@inpe.br')
			await authenticatedPage.getByLabel('Senha').fill('novaSenha123')
			await authenticatedPage.getByRole('button', { name: 'Entrar' }).click()

			// Verificar se login funcionou
			await authenticatedPage.waitForURL('/admin/dashboard')
			await expect(authenticatedPage.getByText('Dashboard')).toBeVisible()

			// Voltar para senha original
			await authenticatedPage.goto('/admin/settings')
			await authenticatedPage.getByRole('tab', { name: /seguran√ßa/i }).click()
			await authenticatedPage.getByLabel('Senha atual').fill('novaSenha123')
			await authenticatedPage.getByLabel('Nova senha').fill('#Admin123')
			await authenticatedPage.getByLabel('Confirmar nova senha').fill('#Admin123')
			await authenticatedPage.getByRole('button', { name: 'Alterar Senha' }).click()
			await expect(authenticatedPage.getByText(/senha alterada|alterada com sucesso/i)).toBeVisible()
		})

		test('‚úÖ Valida√ß√µes de senha - requisitos m√≠nimos', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/settings')

			// Ir para aba de seguran√ßa
			await authenticatedPage.getByRole('tab', { name: /seguran√ßa/i }).click()

			// Tentar trocar para senha fraca
			await authenticatedPage.getByLabel('Senha atual').fill('#Admin123')
			await authenticatedPage.getByLabel('Nova senha').fill('123') // Senha muito curta
			await authenticatedPage.getByLabel('Confirmar nova senha').fill('123')

			// Tentar salvar
			await authenticatedPage.getByRole('button', { name: 'Alterar Senha' }).click()

			// Deve mostrar erro de senha fraca
			await expect(authenticatedPage.getByText(/senha muito curta|requisitos m√≠nimos/i)).toBeVisible()

			// Tentar com senha sem caracteres especiais
			await authenticatedPage.getByLabel('Nova senha').clear()
			await authenticatedPage.getByLabel('Nova senha').fill('senhafraca')
			await authenticatedPage.getByLabel('Confirmar nova senha').clear()
			await authenticatedPage.getByLabel('Confirmar nova senha').fill('senhafraca')

			// Tentar salvar
			await authenticatedPage.getByRole('button', { name: 'Alterar Senha' }).click()

			// Deve mostrar erro de requisitos
			await expect(authenticatedPage.getByText(/caracteres especiais|requisitos m√≠nimos/i)).toBeVisible()
		})

		test('‚úÖ Feedback - toast de sucesso/erro', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/settings')

			// Ir para aba de seguran√ßa
			await authenticatedPage.getByRole('tab', { name: /seguran√ßa/i }).click()

			// Tentar trocar senha com dados v√°lidos
			await authenticatedPage.getByLabel('Senha atual').fill('#Admin123')
			await authenticatedPage.getByLabel('Nova senha').fill('NovaSenha123!')
			await authenticatedPage.getByLabel('Confirmar nova senha').fill('NovaSenha123!')

			// Salvar
			await authenticatedPage.getByRole('button', { name: 'Alterar Senha' }).click()

			// Verificar toast de sucesso
			await expect(authenticatedPage.getByText(/senha alterada|alterada com sucesso/i)).toBeVisible()

			// Tentar com senha atual incorreta
			await authenticatedPage.getByLabel('Senha atual').clear()
			await authenticatedPage.getByLabel('Senha atual').fill('senhaerrada')
			await authenticatedPage.getByLabel('Nova senha').clear()
			await authenticatedPage.getByLabel('Nova senha').fill('OutraSenha123!')
			await authenticatedPage.getByLabel('Confirmar nova senha').clear()
			await authenticatedPage.getByLabel('Confirmar nova senha').fill('OutraSenha123!')

			// Tentar salvar
			await authenticatedPage.getByRole('button', { name: 'Alterar Senha' }).click()

			// Deve mostrar erro
			await expect(authenticatedPage.getByText(/senha atual incorreta|erro/i)).toBeVisible()
		})
	})

	test.describe('üîç Funcionalidades Avan√ßadas', () => {
		test('‚úÖ Navega√ß√£o entre abas', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/settings')

			// Verificar se todas as abas est√£o vis√≠veis
			await expect(authenticatedPage.getByRole('tab', { name: /perfil/i })).toBeVisible()
			await expect(authenticatedPage.getByRole('tab', { name: /prefer√™ncias/i })).toBeVisible()
			await expect(authenticatedPage.getByRole('tab', { name: /seguran√ßa/i })).toBeVisible()

			// Verificar se aba de perfil est√° ativa por padr√£o
			await expect(authenticatedPage.getByRole('tab', { name: /perfil/i })).toHaveAttribute('aria-selected', 'true')

			// Clicar na aba de prefer√™ncias
			await authenticatedPage.getByRole('tab', { name: /prefer√™ncias/i }).click()

			// Verificar se aba de prefer√™ncias est√° ativa
			await expect(authenticatedPage.getByRole('tab', { name: /prefer√™ncias/i })).toHaveAttribute('aria-selected', 'true')
			await expect(authenticatedPage.getByRole('tab', { name: /perfil/i })).not.toHaveAttribute('aria-selected', 'true')

			// Clicar na aba de seguran√ßa
			await authenticatedPage.getByRole('tab', { name: /seguran√ßa/i }).click()

			// Verificar se aba de seguran√ßa est√° ativa
			await expect(authenticatedPage.getByRole('tab', { name: /seguran√ßa/i })).toHaveAttribute('aria-selected', 'true')
			await expect(authenticatedPage.getByRole('tab', { name: /prefer√™ncias/i })).not.toHaveAttribute('aria-selected', 'true')
		})

		test('‚úÖ Responsividade em diferentes resolu√ß√µes', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/settings')

			// Testar resolu√ß√£o desktop
			await authenticatedPage.setViewportSize({ width: 1920, height: 1080 })
			await expect(authenticatedPage.getByRole('heading', { name: /configura√ß√µes/i })).toBeVisible()
			await expect(authenticatedPage.getByRole('tab', { name: /perfil/i })).toBeVisible()

			// Testar resolu√ß√£o tablet
			await authenticatedPage.setViewportSize({ width: 768, height: 1024 })
			await expect(authenticatedPage.getByRole('heading', { name: /configura√ß√µes/i })).toBeVisible()
			await expect(authenticatedPage.getByRole('tab', { name: /perfil/i })).toBeVisible()

			// Testar resolu√ß√£o mobile
			await authenticatedPage.setViewportSize({ width: 375, height: 667 })
			await expect(authenticatedPage.getByRole('heading', { name: /configura√ß√µes/i })).toBeVisible()
			await expect(authenticatedPage.getByRole('tab', { name: /perfil/i })).toBeVisible()

			// Voltar para desktop
			await authenticatedPage.setViewportSize({ width: 1920, height: 1080 })
		})

		test('‚úÖ Valida√ß√£o de campos obrigat√≥rios', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/settings')

			// Ir para aba de perfil
			await authenticatedPage.getByRole('tab', { name: /perfil/i }).click()

			// Limpar campo obrigat√≥rio
			await authenticatedPage.getByLabel('Nome completo').clear()

			// Tentar salvar
			await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

			// Deve mostrar erro de campo obrigat√≥rio
			await expect(authenticatedPage.getByText(/nome √© obrigat√≥rio|campo obrigat√≥rio/i)).toBeVisible()

			// Preencher campo obrigat√≥rio
			await authenticatedPage.getByLabel('Nome completo').fill('Usu√°rio V√°lido')

			// Tentar salvar novamente
			await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

			// Deve salvar com sucesso
			await expect(authenticatedPage.getByText(/perfil atualizado|alterado com sucesso/i)).toBeVisible()
		})

		test('‚úÖ Persist√™ncia de configura√ß√µes', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/settings')

			// Ir para aba de prefer√™ncias
			await authenticatedPage.getByRole('tab', { name: /prefer√™ncias/i }).click()

			// Alterar tema
			await authenticatedPage.getByRole('combobox', { name: /tema/i }).selectOption('dark')

			// Salvar
			await authenticatedPage.getByRole('button', { name: 'Salvar' }).click()

			// Verificar sucesso
			await expect(authenticatedPage.getByText(/prefer√™ncias salvas|alteradas com sucesso/i)).toBeVisible()

			// Navegar para outra p√°gina
			await authenticatedPage.goto('/admin/dashboard')

			// Voltar para configura√ß√µes
			await authenticatedPage.goto('/admin/settings')
			await authenticatedPage.getByRole('tab', { name: /prefer√™ncias/i }).click()

			// Verificar se configura√ß√£o foi persistida
			await expect(authenticatedPage.getByRole('combobox', { name: /tema/i })).toHaveValue('dark')
		})

		test('‚úÖ Integra√ß√£o com sistema de autentica√ß√£o', async ({ authenticatedPage }) => {
			await authenticatedPage.goto('/admin/settings')

			// Ir para aba de seguran√ßa
			await authenticatedPage.getByRole('tab', { name: /seguran√ßa/i }).click()

			// Verificar se informa√ß√µes de sess√£o est√£o vis√≠veis
			await expect(authenticatedPage.getByText(/sess√£o ativa|√∫ltimo acesso/i)).toBeVisible()

			// Verificar se bot√£o de logout est√° vis√≠vel
			await expect(authenticatedPage.getByRole('button', { name: /sair|logout/i })).toBeVisible()

			// Clicar em sair
			await authenticatedPage.getByRole('button', { name: 'Sair' }).click()

			// Verificar se foi redirecionado para login
			await authenticatedPage.waitForURL('/auth/login')
			await expect(authenticatedPage.getByText('Entrar')).toBeVisible()
		})
	})
})
