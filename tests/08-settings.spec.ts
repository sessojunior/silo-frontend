import { test, expect } from '@playwright/test'
import { fillFormField, clickButton } from './utils/auth-helpers'

test.describe('‚öôÔ∏è SISTEMA DE CONFIGURA√á√ïES', () => {
	test.beforeEach(async ({ page }) => {
		// Fazer login como administrador
		await page.goto('/auth/login')
		await page.getByLabel('Email').fill('admin@inpe.br')
		await page.getByLabel('Senha').fill('admin123')
		await page.getByRole('button', { name: 'Entrar' }).click()
		await page.waitForURL('/admin/dashboard')
	})

	test.describe('üë§ Perfil do Usu√°rio', () => {
		test('‚úÖ Editar dados - nome, email, informa√ß√µes pessoais', async ({ page }) => {
			await page.goto('/admin/settings')

			// Verificar se p√°gina de configura√ß√µes carregou
			await expect(page.getByRole('heading', { name: /configura√ß√µes/i })).toBeVisible()

			// Ir para aba de perfil
			await page.getByRole('tab', { name: /perfil/i }).click()

			// Verificar se formul√°rio est√° vis√≠vel
			await expect(page.getByLabel('Nome completo')).toBeVisible()
			await expect(page.getByLabel('Email')).toBeVisible()

			// Modificar nome
			await page.getByLabel('Nome completo').clear()
			await fillFormField(page, 'Nome completo', 'Usu√°rio Editado Playwright')

			// Modificar informa√ß√µes pessoais
			await page.getByLabel('Telefone').clear()
			await fillFormField(page, 'Telefone', '(11) 99999-9999')

			// Salvar altera√ß√µes
			await clickButton(page, 'Salvar')

			// Verificar toast de sucesso
			await expect(page.getByText(/perfil atualizado|alterado com sucesso/i)).toBeVisible()

			// Verificar se altera√ß√µes foram salvas
			await expect(page.getByLabel('Nome completo')).toHaveValue('Usu√°rio Editado Playwright')
			await expect(page.getByLabel('Telefone')).toHaveValue('(11) 99999-9999')
		})

		test('‚úÖ Upload de avatar - via UploadThing, resize autom√°tico', async ({ page }) => {
			await page.goto('/admin/settings')

			// Ir para aba de perfil
			await page.getByRole('tab', { name: /perfil/i }).click()

			// Verificar se √°rea de upload est√° vis√≠vel
			await expect(page.locator('[data-testid="avatar-upload"]')).toBeVisible()

			// Verificar se avatar atual est√° vis√≠vel
			await expect(page.locator('[data-testid="current-avatar"]')).toBeVisible()

			// Clicar em alterar avatar
			await clickButton(page, 'Alterar Avatar')

			// Verificar se seletor de arquivo est√° vis√≠vel
			await expect(page.locator('input[type="file"]')).toBeVisible()

			// Upload de nova imagem
			const fileInput = page.locator('input[type="file"]')
			await fileInput.setInputFiles('tests/fixtures/avatar-image.jpg')

			// Verificar se preview da nova imagem aparece
			await expect(page.locator('[data-testid="avatar-preview"]')).toBeVisible()

			// Salvar altera√ß√µes
			await clickButton(page, 'Salvar')

			// Verificar toast de sucesso
			await expect(page.getByText(/avatar atualizado|alterado com sucesso/i)).toBeVisible()

			// Verificar se novo avatar est√° vis√≠vel
			await expect(page.locator('[data-testid="current-avatar"]')).toBeVisible()
		})

		test('‚úÖ Salvamento - persiste altera√ß√µes', async ({ page }) => {
			await page.goto('/admin/settings')

			// Ir para aba de perfil
			await page.getByRole('tab', { name: /perfil/i }).click()

			// Modificar dados
			await page.getByLabel('Nome completo').clear()
			await fillFormField(page, 'Nome completo', 'Usu√°rio Persistente')

			// Salvar
			await clickButton(page, 'Salvar')

			// Verificar sucesso
			await expect(page.getByText(/perfil atualizado|alterado com sucesso/i)).toBeVisible()

			// Recarregar p√°gina
			await page.reload()

			// Verificar se dados foram persistidos
			await expect(page.getByLabel('Nome completo')).toHaveValue('Usu√°rio Persistente')
		})
	})

	test.describe('üé® Prefer√™ncias', () => {
		test('‚úÖ Tema - Dark/light mode', async ({ page }) => {
			await page.goto('/admin/settings')

			// Ir para aba de prefer√™ncias
			await page.getByRole('tab', { name: /prefer√™ncias/i }).click()

			// Verificar se seletor de tema est√° vis√≠vel
			await expect(page.getByRole('combobox', { name: /tema/i })).toBeVisible()

			// Verificar tema atual
			const currentTheme = page.getByRole('combobox', { name: /tema/i })
			const currentValue = await currentTheme.evaluate((el) => (el as HTMLSelectElement).value)

			// Alternar para tema oposto
			const newTheme = currentValue === 'light' ? 'dark' : 'light'
			await currentTheme.selectOption(newTheme)

			// Aguardar transi√ß√£o
			await page.waitForTimeout(1000)

			// Verificar se tema mudou
			await expect(currentTheme).toHaveValue(newTheme)

			// Salvar prefer√™ncias
			await clickButton(page, 'Salvar')

			// Verificar toast de sucesso
			await expect(page.getByText(/prefer√™ncias salvas|alteradas com sucesso/i)).toBeVisible()

			// Recarregar p√°gina para verificar persist√™ncia
			await page.reload()

			// Verificar se tema foi persistido
			await expect(currentTheme).toHaveValue(newTheme)
		})

		test('‚úÖ Notifica√ß√µes - configura√ß√µes de alertas', async ({ page }) => {
			await page.goto('/admin/settings')

			// Ir para aba de prefer√™ncias
			await page.getByRole('tab', { name: /prefer√™ncias/i }).click()

			// Verificar se configura√ß√µes de notifica√ß√µes est√£o vis√≠veis
			await expect(page.getByText(/notifica√ß√µes|alertas/i)).toBeVisible()

			// Verificar checkboxes de notifica√ß√µes
			const notificationCheckboxes = page.locator('[data-testid="notification-checkbox"]')
			if ((await notificationCheckboxes.count()) > 0) {
				// Marcar/desmarcar algumas notifica√ß√µes
				await notificationCheckboxes.first().check()
				await notificationCheckboxes.nth(1).uncheck()

				// Salvar prefer√™ncias
				await clickButton(page, 'Salvar')

				// Verificar toast de sucesso
				await expect(page.getByText(/prefer√™ncias salvas|alteradas com sucesso/i)).toBeVisible()
			}
		})

		test('‚úÖ Auto-save - quando aplic√°vel', async ({ page }) => {
			await page.goto('/admin/settings')

			// Ir para aba de prefer√™ncias
			await page.getByRole('tab', { name: /prefer√™ncias/i }).click()

			// Verificar se auto-save est√° configurado
			const autoSaveToggle = page.locator('[data-testid="auto-save-toggle"]')
			if ((await autoSaveToggle.count()) > 0) {
				// Ativar auto-save
				await autoSaveToggle.check()

				// Fazer altera√ß√£o
				await page.getByRole('combobox', { name: /tema/i }).selectOption('dark')

				// Aguardar auto-save
				await page.waitForTimeout(3000)

				// Verificar se foi salvo automaticamente
				await expect(page.getByText(/salvo automaticamente|auto-save/i)).toBeVisible()
			}
		})
	})

	test.describe('üîí Seguran√ßa', () => {
		test('‚úÖ Troca de senha - valida√ß√µes e confirma√ß√£o', async ({ page }) => {
			await page.goto('/admin/settings')

			// Ir para aba de seguran√ßa
			await page.getByRole('tab', { name: /seguran√ßa/i }).click()

			// Verificar se formul√°rio de troca de senha est√° vis√≠vel
			await expect(page.getByLabel('Senha atual')).toBeVisible()
			await expect(page.getByLabel('Nova senha')).toBeVisible()
			await expect(page.getByLabel('Confirmar nova senha')).toBeVisible()

			// Preencher senha atual
			await fillFormField(page, 'Senha atual', 'admin123')

			// Preencher nova senha
			await fillFormField(page, 'Nova senha', 'novaSenha123')

			// Preencher confirma√ß√£o
			await fillFormField(page, 'Confirmar nova senha', 'novaSenha123')

			// Salvar altera√ß√µes
			await clickButton(page, 'Alterar Senha')

			// Verificar toast de sucesso
			await expect(page.getByText(/senha alterada|alterada com sucesso/i)).toBeVisible()

			// Fazer logout para testar nova senha
			await page.getByRole('button', { name: /configura√ß√µes|perfil/i }).click()
			await page.getByRole('menuitem', { name: 'Sair' }).click()

			// Tentar login com nova senha
			await page.getByLabel('Email').fill('admin@inpe.br')
			await page.getByLabel('Senha').fill('novaSenha123')
			await page.getByRole('button', { name: 'Entrar' }).click()

			// Verificar se login funcionou
			await page.waitForURL('/admin/dashboard')
			await expect(page.getByText('Dashboard')).toBeVisible()

			// Voltar para senha original
			await page.goto('/admin/settings')
			await page.getByRole('tab', { name: /seguran√ßa/i }).click()
			await fillFormField(page, 'Senha atual', 'novaSenha123')
			await fillFormField(page, 'Nova senha', 'admin123')
			await fillFormField(page, 'Confirmar nova senha', 'admin123')
			await clickButton(page, 'Alterar Senha')
			await expect(page.getByText(/senha alterada|alterada com sucesso/i)).toBeVisible()
		})

		test('‚úÖ Valida√ß√µes de senha - requisitos m√≠nimos', async ({ page }) => {
			await page.goto('/admin/settings')

			// Ir para aba de seguran√ßa
			await page.getByRole('tab', { name: /seguran√ßa/i }).click()

			// Tentar trocar para senha fraca
			await fillFormField(page, 'Senha atual', 'admin123')
			await fillFormField(page, 'Nova senha', '123') // Senha muito curta
			await fillFormField(page, 'Confirmar nova senha', '123')

			// Tentar salvar
			await clickButton(page, 'Alterar Senha')

			// Deve mostrar erro de senha fraca
			await expect(page.getByText(/senha muito curta|requisitos m√≠nimos/i)).toBeVisible()

			// Tentar com senha sem caracteres especiais
			await page.getByLabel('Nova senha').clear()
			await fillFormField(page, 'Nova senha', 'senhafraca')
			await page.getByLabel('Confirmar nova senha').clear()
			await fillFormField(page, 'Confirmar nova senha', 'senhafraca')

			// Tentar salvar
			await clickButton(page, 'Alterar Senha')

			// Deve mostrar erro de requisitos
			await expect(page.getByText(/caracteres especiais|requisitos m√≠nimos/i)).toBeVisible()
		})

		test('‚úÖ Feedback - toast de sucesso/erro', async ({ page }) => {
			await page.goto('/admin/settings')

			// Ir para aba de seguran√ßa
			await page.getByRole('tab', { name: /seguran√ßa/i }).click()

			// Tentar trocar senha com dados v√°lidos
			await fillFormField(page, 'Senha atual', 'admin123')
			await fillFormField(page, 'Nova senha', 'NovaSenha123!')
			await fillFormField(page, 'Confirmar nova senha', 'NovaSenha123!')

			// Salvar
			await clickButton(page, 'Alterar Senha')

			// Verificar toast de sucesso
			await expect(page.getByText(/senha alterada|alterada com sucesso/i)).toBeVisible()

			// Tentar com senha atual incorreta
			await page.getByLabel('Senha atual').clear()
			await fillFormField(page, 'Senha atual', 'senhaerrada')
			await page.getByLabel('Nova senha').clear()
			await fillFormField(page, 'Nova senha', 'OutraSenha123!')
			await page.getByLabel('Confirmar nova senha').clear()
			await fillFormField(page, 'Confirmar nova senha', 'OutraSenha123!')

			// Tentar salvar
			await clickButton(page, 'Alterar Senha')

			// Deve mostrar erro
			await expect(page.getByText(/senha atual incorreta|erro/i)).toBeVisible()
		})
	})

	test.describe('üîç Funcionalidades Avan√ßadas', () => {
		test('‚úÖ Navega√ß√£o entre abas', async ({ page }) => {
			await page.goto('/admin/settings')

			// Verificar se todas as abas est√£o vis√≠veis
			await expect(page.getByRole('tab', { name: /perfil/i })).toBeVisible()
			await expect(page.getByRole('tab', { name: /prefer√™ncias/i })).toBeVisible()
			await expect(page.getByRole('tab', { name: /seguran√ßa/i })).toBeVisible()

			// Verificar se aba de perfil est√° ativa por padr√£o
			await expect(page.getByRole('tab', { name: /perfil/i })).toHaveAttribute('aria-selected', 'true')

			// Clicar na aba de prefer√™ncias
			await page.getByRole('tab', { name: /prefer√™ncias/i }).click()

			// Verificar se aba de prefer√™ncias est√° ativa
			await expect(page.getByRole('tab', { name: /prefer√™ncias/i })).toHaveAttribute('aria-selected', 'true')
			await expect(page.getByRole('tab', { name: /perfil/i })).not.toHaveAttribute('aria-selected', 'true')

			// Clicar na aba de seguran√ßa
			await page.getByRole('tab', { name: /seguran√ßa/i }).click()

			// Verificar se aba de seguran√ßa est√° ativa
			await expect(page.getByRole('tab', { name: /seguran√ßa/i })).toHaveAttribute('aria-selected', 'true')
			await expect(page.getByRole('tab', { name: /prefer√™ncias/i })).not.toHaveAttribute('aria-selected', 'true')
		})

		test('‚úÖ Responsividade em diferentes resolu√ß√µes', async ({ page }) => {
			await page.goto('/admin/settings')

			// Testar resolu√ß√£o desktop
			await page.setViewportSize({ width: 1920, height: 1080 })
			await expect(page.getByRole('heading', { name: /configura√ß√µes/i })).toBeVisible()
			await expect(page.getByRole('tab', { name: /perfil/i })).toBeVisible()

			// Testar resolu√ß√£o tablet
			await page.setViewportSize({ width: 768, height: 1024 })
			await expect(page.getByRole('heading', { name: /configura√ß√µes/i })).toBeVisible()
			await expect(page.getByRole('tab', { name: /perfil/i })).toBeVisible()

			// Testar resolu√ß√£o mobile
			await page.setViewportSize({ width: 375, height: 667 })
			await expect(page.getByRole('heading', { name: /configura√ß√µes/i })).toBeVisible()
			await expect(page.getByRole('tab', { name: /perfil/i })).toBeVisible()

			// Voltar para desktop
			await page.setViewportSize({ width: 1920, height: 1080 })
		})

		test('‚úÖ Valida√ß√£o de campos obrigat√≥rios', async ({ page }) => {
			await page.goto('/admin/settings')

			// Ir para aba de perfil
			await page.getByRole('tab', { name: /perfil/i }).click()

			// Limpar campo obrigat√≥rio
			await page.getByLabel('Nome completo').clear()

			// Tentar salvar
			await clickButton(page, 'Salvar')

			// Deve mostrar erro de campo obrigat√≥rio
			await expect(page.getByText(/nome √© obrigat√≥rio|campo obrigat√≥rio/i)).toBeVisible()

			// Preencher campo obrigat√≥rio
			await fillFormField(page, 'Nome completo', 'Usu√°rio V√°lido')

			// Tentar salvar novamente
			await clickButton(page, 'Salvar')

			// Deve salvar com sucesso
			await expect(page.getByText(/perfil atualizado|alterado com sucesso/i)).toBeVisible()
		})

		test('‚úÖ Persist√™ncia de configura√ß√µes', async ({ page }) => {
			await page.goto('/admin/settings')

			// Ir para aba de prefer√™ncias
			await page.getByRole('tab', { name: /prefer√™ncias/i }).click()

			// Alterar tema
			await page.getByRole('combobox', { name: /tema/i }).selectOption('dark')

			// Salvar
			await clickButton(page, 'Salvar')

			// Verificar sucesso
			await expect(page.getByText(/prefer√™ncias salvas|alteradas com sucesso/i)).toBeVisible()

			// Navegar para outra p√°gina
			await page.goto('/admin/dashboard')

			// Voltar para configura√ß√µes
			await page.goto('/admin/settings')
			await page.getByRole('tab', { name: /prefer√™ncias/i }).click()

			// Verificar se configura√ß√£o foi persistida
			await expect(page.getByRole('combobox', { name: /tema/i })).toHaveValue('dark')
		})

		test('‚úÖ Integra√ß√£o com sistema de autentica√ß√£o', async ({ page }) => {
			await page.goto('/admin/settings')

			// Ir para aba de seguran√ßa
			await page.getByRole('tab', { name: /seguran√ßa/i }).click()

			// Verificar se informa√ß√µes de sess√£o est√£o vis√≠veis
			await expect(page.getByText(/sess√£o ativa|√∫ltimo acesso/i)).toBeVisible()

			// Verificar se bot√£o de logout est√° vis√≠vel
			await expect(page.getByRole('button', { name: /sair|logout/i })).toBeVisible()

			// Clicar em sair
			await clickButton(page, 'Sair')

			// Verificar se foi redirecionado para login
			await page.waitForURL('/auth/login')
			await expect(page.getByText('Entrar')).toBeVisible()
		})
	})
})
