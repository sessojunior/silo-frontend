import { test, expect } from './utils/auth-helpers'

test.describe('üè∑Ô∏è Categorias de Problemas', () => {
	test('‚úÖ CRUD de categorias - criar/editar/excluir no offcanvas', async ({ authenticatedPage }) => {
		// Navegar diretamente para a p√°gina de problemas de um produto espec√≠fico
		await authenticatedPage.goto('/admin/products/bam/problems')
		await authenticatedPage.waitForLoadState('networkidle')

		// Clicar no bot√£o de gerenciar categorias
		await authenticatedPage.locator('button[aria-label="Gerenciar categorias"]').click()

		// Verificar se offcanvas abre - procurar pelo t√≠tulo
		await expect(authenticatedPage.locator('div.font-semibold:has-text("Gerenciar categorias de problemas")')).toBeVisible({ timeout: 10000 })

		// Criar nova categoria - usar o bot√£o correto
		await authenticatedPage.getByRole('button', { name: 'Cadastrar categoria' }).click()

		// Verificar se formul√°rio abre - procurar pelo t√≠tulo correto
		await expect(authenticatedPage.locator('div.font-semibold:has-text("Cadastrar categoria")')).toBeVisible({ timeout: 10000 })

		// Preencher formul√°rio - usar placeholder espec√≠fico
		await authenticatedPage.locator('input[placeholder="Rede externa"]').fill('Categoria Teste')
		await authenticatedPage.locator('button[type="submit"]:has-text("Cadastrar")').click()

		// Aguardar um pouco para o formul√°rio fechar
		await authenticatedPage.waitForTimeout(2000)

		// Verificar se categoria foi criada - procurar na lista ao inv√©s do toast
		await expect(authenticatedPage.getByText('Categoria Teste')).toBeVisible({ timeout: 10000 })
	})

	test('‚úÖ Valida√ß√£o de nomes √∫nicos - n√£o permite duplicatas', async ({ authenticatedPage }) => {
		// Navegar diretamente para a p√°gina de problemas de um produto espec√≠fico
		await authenticatedPage.goto('/admin/products/bam/problems')
		await authenticatedPage.waitForLoadState('networkidle')

		// Abrir configura√ß√µes de categorias
		await authenticatedPage.locator('button[aria-label="Gerenciar categorias"]').click()

		// Verificar se offcanvas abre
		await expect(authenticatedPage.locator('div.font-semibold:has-text("Gerenciar categorias de problemas")')).toBeVisible({ timeout: 10000 })

		// Tentar criar categoria com nome existente
		await authenticatedPage.getByRole('button', { name: 'Cadastrar categoria' }).click()
		await authenticatedPage.locator('input[placeholder="Rede externa"]').fill('Rede externa')
		await authenticatedPage.locator('button[type="submit"]:has-text("Cadastrar")').click()

		// Aguardar um pouco para o processo completar
		await authenticatedPage.waitForTimeout(2000)

		// Verificar se a categoria duplicada n√£o foi criada
		// Contar quantas categorias "Rede externa" existem na lista
		const redeExternaItems = authenticatedPage.getByText('Rede externa')
		const count = await redeExternaItems.count()
		
		// Deve haver apenas uma categoria "Rede externa" (a original)
		expect(count).toBe(1)
	})

	test('‚úÖ 6 categorias padr√£o presentes', async ({ authenticatedPage }) => {
		// Navegar diretamente para a p√°gina de problemas de um produto espec√≠fico
		await authenticatedPage.goto('/admin/products/bam/problems')
		await authenticatedPage.waitForLoadState('networkidle')

		// Abrir configura√ß√µes de categorias
		await authenticatedPage.locator('button[aria-label="Gerenciar categorias"]').click()

		// Verificar se offcanvas abre
		await expect(authenticatedPage.locator('div.font-semibold:has-text("Gerenciar categorias de problemas")')).toBeVisible({ timeout: 10000 })

		// Verificar se todas as categorias padr√£o est√£o presentes (conforme seed real)
		await expect(authenticatedPage.getByText('Rede externa')).toBeVisible()
		await expect(authenticatedPage.getByText('Rede interna')).toBeVisible()
		await expect(authenticatedPage.getByText('Servidor indispon√≠vel')).toBeVisible()
		await expect(authenticatedPage.getByText('Falha humana')).toBeVisible()
		await expect(authenticatedPage.getByText('Erro no modelo')).toBeVisible()
		await expect(authenticatedPage.getByText('Dados indispon√≠veis')).toBeVisible()
	})
})
