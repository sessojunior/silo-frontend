import { test, expect } from '@playwright/test';
import { fillFormField, clickButton } from './utils/auth-helpers';

test.describe('üìö SISTEMA DE AJUDA', () => {
  test.beforeEach(async ({ page }) => {
    // Fazer login como administrador
    await page.goto('/auth/login');
    await page.getByLabel('Email').fill('admin@inpe.br');
    await page.getByLabel('Senha').fill('admin123');
    await page.getByRole('button', { name: 'Entrar' }).click();
    await page.waitForURL('/admin/dashboard');
  });

  test.describe('üß≠ Navega√ß√£o e Conte√∫do', () => {
    test('‚úÖ Navega√ß√£o hier√°rquica - por t√≠tulos (#/##/###)', async ({ page }) => {
      await page.goto('/admin/help');
      
      // Verificar se p√°gina de ajuda carregou
      await expect(page.getByRole('heading', { name: /ajuda|documenta√ß√£o/i })).toBeVisible();
      
      // Verificar se sidebar de navega√ß√£o est√° vis√≠vel
      await expect(page.locator('[data-testid="help-sidebar"]')).toBeVisible();
      
      // Verificar se h√° t√≠tulos hier√°rquicos
      const headings = page.locator('[data-testid="help-heading"]');
      if (await headings.count() > 0) {
        await expect(headings.first()).toBeVisible();
        
        // Verificar se h√° diferentes n√≠veis de t√≠tulos
        const h1Headings = page.locator('h1');
        const h2Headings = page.locator('h2');
        const h3Headings = page.locator('h3');
        
        // Pelo menos um n√≠vel deve estar presente
        expect(await h1Headings.count() + await h2Headings.count() + await h3Headings.count()).toBeGreaterThan(0);
      }
    });

    test('‚úÖ Busca de conte√∫do - funcionalidade b√°sica', async ({ page }) => {
      await page.goto('/admin/help');
      
      // Verificar se campo de busca est√° vis√≠vel
      await expect(page.locator('[data-testid="help-search"]')).toBeVisible();
      
      // Buscar por termo
      await page.locator('[data-testid="help-search"]').fill('produto');
      await page.waitForTimeout(1000);
      
      // Verificar se resultados aparecem
      const searchResults = page.locator('[data-testid="search-result"]');
      if (await searchResults.count() > 0) {
        await expect(searchResults.first()).toBeVisible();
      }
      
      // Limpar busca
      await page.locator('[data-testid="help-search"]').clear();
      await page.waitForTimeout(1000);
      
      // Verificar se conte√∫do original voltou
      await expect(page.locator('[data-testid="help-content"]')).toBeVisible();
    });

    test('‚úÖ Organiza√ß√£o - se√ß√µes e cap√≠tulos', async ({ page }) => {
      await page.goto('/admin/help');
      
      // Verificar se estrutura organizacional est√° vis√≠vel
      await expect(page.locator('[data-testid="help-structure"]')).toBeVisible();
      
      // Verificar se h√° se√ß√µes principais
      const sections = page.locator('[data-testid="help-section"]');
      if (await sections.count() > 0) {
        await expect(sections.first()).toBeVisible();
        
        // Verificar se se√ß√£o tem t√≠tulo
        await expect(sections.first().locator('[data-testid="section-title"]')).toBeVisible();
        
        // Verificar se se√ß√£o tem conte√∫do
        await expect(sections.first().locator('[data-testid="section-content"]')).toBeVisible();
      }
      
      // Verificar se h√° cap√≠tulos
      const chapters = page.locator('[data-testid="help-chapter"]');
      if (await chapters.count() > 0) {
        await expect(chapters.first()).toBeVisible();
        
        // Verificar se cap√≠tulo tem t√≠tulo
        await expect(chapters.first().locator('[data-testid="chapter-title"]')).toBeVisible();
      }
    });
  });

  test.describe('‚úèÔ∏è Editor e Documenta√ß√£o', () => {
    test('‚úÖ Editor Markdown - funciona com preview', async ({ page }) => {
      await page.goto('/admin/help');
      
      // Verificar se editor est√° vis√≠vel
      await expect(page.locator('[data-testid="markdown-editor"]')).toBeVisible();
      
      // Verificar se preview est√° vis√≠vel
      await expect(page.locator('[data-testid="markdown-preview"]')).toBeVisible();
      
      // Digitar texto no editor
      await page.locator('[data-testid="markdown-editor"] textarea').fill('# T√≠tulo Teste\n\nConte√∫do de teste para o sistema de ajuda');
      
      // Verificar se preview atualiza
      await expect(page.getByText('T√≠tulo Teste')).toBeVisible();
      await expect(page.getByText('Conte√∫do de teste para o sistema de ajuda')).toBeVisible();
      
      // Verificar se formata√ß√£o Markdown funciona
      await page.locator('[data-testid="markdown-editor"] textarea').fill('## Subt√≠tulo\n\n**Texto em negrito** e *texto em it√°lico*');
      
      // Verificar se formata√ß√£o aparece no preview
      await expect(page.getByText('Subt√≠tulo')).toBeVisible();
      await expect(page.locator('strong')).toContainText('Texto em negrito');
      await expect(page.locator('em')).toContainText('texto em it√°lico');
    });

    test('‚úÖ Salvamento - persiste altera√ß√µes', async ({ page }) => {
      await page.goto('/admin/help');
      
      // Verificar se editor est√° vis√≠vel
      await expect(page.locator('[data-testid="markdown-editor"]')).toBeVisible();
      
      // Editar conte√∫do
      await page.locator('[data-testid="markdown-editor"] textarea').fill('# Conte√∫do Salvo\n\nEste conte√∫do deve ser salvo no sistema de ajuda');
      
      // Salvar
      await clickButton(page, 'Salvar');
      
      // Verificar toast de sucesso
      await expect(page.getByText(/ajuda salva|documenta√ß√£o salva|alterada com sucesso/i)).toBeVisible();
      
      // Recarregar p√°gina
      await page.reload();
      
      // Verificar se conte√∫do foi persistido
      await expect(page.getByText('Conte√∫do Salvo')).toBeVisible();
      await expect(page.getByText('Este conte√∫do deve ser salvo no sistema de ajuda')).toBeVisible();
    });

    test('‚úÖ Interface dual - sidebar + √°rea de conte√∫do', async ({ page }) => {
      await page.goto('/admin/help');
      
      // Verificar se layout dual est√° funcionando
      await expect(page.locator('[data-testid="help-sidebar"]')).toBeVisible();
      await expect(page.locator('[data-testid="help-content"]')).toBeVisible();
      
      // Verificar se sidebar tem navega√ß√£o
      const sidebarItems = page.locator('[data-testid="sidebar-item"]');
      if (await sidebarItems.count() > 0) {
        await expect(sidebarItems.first()).toBeVisible();
        
        // Clicar em um item da sidebar
        await sidebarItems.first().click();
        
        // Verificar se conte√∫do mudou
        await expect(page.locator('[data-testid="help-content"]')).toBeVisible();
      }
      
      // Verificar se √°rea de conte√∫do √© responsiva
      await expect(page.locator('[data-testid="help-content"]')).toBeVisible();
      
      // Verificar se h√° scroll na √°rea de conte√∫do
      const contentArea = page.locator('[data-testid="help-content"]');
      await expect(contentArea).toBeVisible();
    });
  });

  test.describe('üîç Funcionalidades Avan√ßadas', () => {
    test('‚úÖ Extra√ß√£o autom√°tica de t√≠tulos', async ({ page }) => {
      await page.goto('/admin/help');
      
      // Verificar se t√≠tulos s√£o extra√≠dos automaticamente
      const extractedTitles = page.locator('[data-testid="extracted-title"]');
      if (await extractedTitles.count() > 0) {
        await expect(extractedTitles.first()).toBeVisible();
        
        // Verificar se t√≠tulos t√™m links de navega√ß√£o
        const titleLinks = page.locator('[data-testid="title-link"]');
        if (await titleLinks.count() > 0) {
          await expect(titleLinks.first()).toBeVisible();
          
          // Clicar em um link de t√≠tulo
          await titleLinks.first().click();
          
          // Verificar se navegou para a se√ß√£o correta
          await expect(page.locator('[data-testid="help-content"]')).toBeVisible();
        }
      }
    });

    test('‚úÖ Scroll suave entre se√ß√µes', async ({ page }) => {
      await page.goto('/admin/help');
      
      // Verificar se h√° m√∫ltiplas se√ß√µes
      const sections = page.locator('[data-testid="help-section"]');
      if (await sections.count() > 1) {
        // Clicar em um link para se√ß√£o diferente
        const sectionLinks = page.locator('[data-testid="section-link"]');
        if (await sectionLinks.count() > 0) {
          await sectionLinks.first().click();
          
          // Aguardar scroll
          await page.waitForTimeout(1000);
          
          // Verificar se se√ß√£o est√° vis√≠vel
          await expect(page.locator('[data-testid="help-content"]')).toBeVisible();
        }
      }
    });

    test('‚úÖ Responsividade em diferentes resolu√ß√µes', async ({ page }) => {
      await page.goto('/admin/help');
      
      // Testar resolu√ß√£o desktop
      await page.setViewportSize({ width: 1920, height: 1080 });
      await expect(page.locator('[data-testid="help-sidebar"]')).toBeVisible();
      await expect(page.locator('[data-testid="help-content"]')).toBeVisible();
      
      // Testar resolu√ß√£o tablet
      await page.setViewportSize({ width: 768, height: 1024 });
      await expect(page.locator('[data-testid="help-sidebar"]')).toBeVisible();
      await expect(page.locator('[data-testid="help-content"]')).toBeVisible();
      
      // Testar resolu√ß√£o mobile
      await page.setViewportSize({ width: 375, height: 667 });
      await expect(page.locator('[data-testid="help-sidebar"]')).toBeVisible();
      await expect(page.locator('[data-testid="help-content"]')).toBeVisible();
      
      // Voltar para desktop
      await page.setViewportSize({ width: 1920, height: 1080 });
    });

    test('‚úÖ Temas dark/light', async ({ page }) => {
      await page.goto('/admin/help');
      
      // Verificar se sistema de temas est√° funcionando
      const themeToggle = page.locator('[data-testid="theme-toggle"]');
      if (await themeToggle.count() > 0) {
        // Verificar tema atual
        const currentTheme = await themeToggle.getAttribute('data-theme');
        
        // Alternar tema
        await themeToggle.click();
        await page.waitForTimeout(1000);
        
        // Verificar se tema mudou
        const newTheme = await themeToggle.getAttribute('data-theme');
        expect(newTheme).not.toBe(currentTheme);
        
        // Verificar se conte√∫do ainda est√° vis√≠vel
        await expect(page.locator('[data-testid="help-content"]')).toBeVisible();
      }
    });
  });

  test.describe('üìù Gest√£o de Conte√∫do', () => {
    test('‚úÖ Cria√ß√£o de nova se√ß√£o', async ({ page }) => {
      await page.goto('/admin/help');
      
      // Verificar se bot√£o de nova se√ß√£o est√° vis√≠vel
      const newSectionButton = page.locator('[data-testid="new-section-button"]');
      if (await newSectionButton.count() > 0) {
        // Clicar em nova se√ß√£o
        await newSectionButton.click();
        
        // Verificar se formul√°rio abre
        await expect(page.locator('[data-testid="section-form"]')).toBeVisible();
        
        // Preencher formul√°rio
        await fillFormField(page, 'T√≠tulo da Se√ß√£o', 'Nova Se√ß√£o Teste');
        await fillFormField(page, 'Conte√∫do', '# Nova Se√ß√£o\n\nConte√∫do da nova se√ß√£o de teste');
        
        // Salvar
        await clickButton(page, 'Salvar');
        
        // Verificar toast de sucesso
        await expect(page.getByText(/se√ß√£o criada|salva com sucesso/i)).toBeVisible();
        
        // Verificar se nova se√ß√£o aparece
        await expect(page.getByText('Nova Se√ß√£o Teste')).toBeVisible();
      }
    });

    test('‚úÖ Edi√ß√£o de se√ß√£o existente', async ({ page }) => {
      await page.goto('/admin/help');
      
      // Verificar se h√° se√ß√µes edit√°veis
      const editableSections = page.locator('[data-testid="editable-section"]');
      if (await editableSections.count() > 0) {
        // Clicar no bot√£o editar da primeira se√ß√£o
        await page.locator('[data-testid="edit-section"]).first().click();
        
        // Verificar se editor abre
        await expect(page.locator('[data-testid="markdown-editor"]')).toBeVisible();
        
        // Editar conte√∫do
        await page.locator('[data-testid="markdown-editor"] textarea').fill('# Se√ß√£o Editada\n\nConte√∫do editado da se√ß√£o');
        
        // Salvar
        await clickButton(page, 'Salvar');
        
        // Verificar toast de sucesso
        await expect(page.getByText(/se√ß√£o atualizada|alterada com sucesso/i)).toBeVisible();
        
        // Verificar se altera√ß√µes aparecem
        await expect(page.getByText('Se√ß√£o Editada')).toBeVisible();
        await expect(page.getByText('Conte√∫do editado da se√ß√£o')).toBeVisible();
      }
    });

    test('‚úÖ Exclus√£o de se√ß√£o', async ({ page }) => {
      await page.goto('/admin/help');
      
      // Verificar se h√° se√ß√µes exclu√≠veis
      const deletableSections = page.locator('[data-testid="deletable-section"]');
      if (await deletableSections.count() > 0) {
        // Clicar no bot√£o excluir da primeira se√ß√£o
        await page.locator('[data-testid="delete-section"]').first().click();
        
        // Verificar se dialog de confirma√ß√£o aparece
        await expect(page.getByText(/confirmar exclus√£o|excluir se√ß√£o/i)).toBeVisible();
        
        // Cancelar exclus√£o
        await clickButton(page, 'Cancelar');
        
        // Verificar se dialog fechou
        await expect(page.getByText(/confirmar exclus√£o|excluir se√ß√£o/i)).not.toBeVisible();
      }
    });
  });

  test.describe('üîó Integra√ß√£o com Sistema', () => {
    test('‚úÖ Acesso via menu principal', async ({ page }) => {
      await page.goto('/admin/dashboard');
      
      // Verificar se link para ajuda est√° no menu
      const helpLink = page.locator('[data-testid="help-link"]');
      if (await helpLink.count() > 0) {
        // Clicar no link de ajuda
        await helpLink.click();
        
        // Verificar se redirecionou para p√°gina de ajuda
        await page.waitForURL('/admin/help');
        await expect(page.getByRole('heading', { name: /ajuda|documenta√ß√£o/i })).toBeVisible();
      }
    });

    test('‚úÖ Contexto sens√≠vel ao sistema', async ({ page }) => {
      await page.goto('/admin/help');
      
      // Verificar se ajuda √© contextual ao sistema
      await expect(page.getByText(/sistema silo|produtos meteorol√≥gicos|cptec|inpe/i)).toBeVisible();
      
      // Verificar se h√° se√ß√µes espec√≠ficas do sistema
      const systemSections = page.locator('[data-testid="system-section"]');
      if (await systemSections.count() > 0) {
        await expect(systemSections.first()).toBeVisible();
        
        // Verificar se se√ß√£o tem conte√∫do relevante
        await expect(page.getByText(/produtos|problemas|solu√ß√µes|chat|projetos/i)).toBeVisible();
      }
    });

    test('‚úÖ Links para funcionalidades', async ({ page }) => {
      await page.goto('/admin/help');
      
      // Verificar se h√° links para funcionalidades do sistema
      const featureLinks = page.locator('[data-testid="feature-link"]');
      if (await featureLinks.count() > 0) {
        await expect(featureLinks.first()).toBeVisible();
        
        // Clicar em um link de funcionalidade
        await featureLinks.first().click();
        
        // Verificar se redirecionou para a funcionalidade
        await expect(page.locator('[data-testid="help-content"]')).toBeVisible();
      }
    });
  });

  test.describe('üìä Performance e Usabilidade', () => {
    test('‚úÖ Carregamento r√°pido', async ({ page }) => {
      const startTime = Date.now();
      
      await page.goto('/admin/help');
      
      // Aguardar carregamento completo
      await page.waitForLoadState('networkidle');
      
      const loadTime = Date.now() - startTime;
      
      // Verificar se carregou em tempo aceit√°vel (menos de 5 segundos)
      expect(loadTime).toBeLessThan(5000);
      
      // Verificar se todos os elementos est√£o vis√≠veis
      await expect(page.locator('[data-testid="help-sidebar"]')).toBeVisible();
      await expect(page.locator('[data-testid="help-content"]')).toBeVisible();
    });

    test('‚úÖ Navega√ß√£o intuitiva', async ({ page }) => {
      await page.goto('/admin/help');
      
      // Verificar se navega√ß√£o √© intuitiva
      await expect(page.locator('[data-testid="help-sidebar"]')).toBeVisible();
      
      // Verificar se h√° breadcrumbs ou indicadores de localiza√ß√£o
      const breadcrumbs = page.locator('[data-testid="help-breadcrumbs"]');
      if (await breadcrumbs.count() > 0) {
        await expect(breadcrumbs.first()).toBeVisible();
      }
      
      // Verificar se h√° bot√£o de voltar ao topo
      const backToTopButton = page.locator('[data-testid="back-to-top"]');
      if (await backToTopButton.count() > 0) {
        await expect(backToTopButton.first()).toBeVisible();
        
        // Clicar no bot√£o
        await backToTopButton.first().click();
        
        // Verificar se voltou ao topo
        await expect(page.locator('[data-testid="help-content"]')).toBeVisible();
      }
    });

    test('‚úÖ Busca eficiente', async ({ page }) => {
      await page.goto('/admin/help');
      
      // Verificar se busca √© eficiente
      const searchInput = page.locator('[data-testid="help-search"]');
      await expect(searchInput).toBeVisible();
      
      // Fazer busca
      await searchInput.fill('teste');
      await page.waitForTimeout(500);
      
      // Verificar se resultados aparecem rapidamente
      const searchResults = page.locator('[data-testid="search-result"]');
      if (await searchResults.count() > 0) {
        await expect(searchResults.first()).toBeVisible();
      }
      
      // Limpar busca
      await searchInput.clear();
      await page.waitForTimeout(500);
      
      // Verificar se conte√∫do original voltou
      await expect(page.locator('[data-testid="help-content"]')).toBeVisible();
    });
  });
});
