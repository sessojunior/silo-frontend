import { test, expect } from './utils/auth-helpers'

test.describe('üîó Integra√ß√£o - Logs e Observabilidade', () => {
	test('‚úÖ Emojis padronizados - ‚úÖ ‚ùå ‚ö†Ô∏è üîµ apenas', async ({ authenticatedPage }) => {
		// Este teste verifica se o sistema est√° usando apenas os emojis padronizados
		// nos logs e mensagens do frontend

		await authenticatedPage.goto('/admin/dashboard')

		// Verificar se n√£o h√° emojis n√£o padronizados
		const nonStandardEmojis = ['üöÄ', 'üéâ', 'üî•', 'üí™', '‚≠ê', 'üåü', 'üíØ', 'üî•', 'üíé']

		for (const emoji of nonStandardEmojis) {
			const emojiElements = authenticatedPage.locator(`text=${emoji}`)
			await expect(emojiElements).toHaveCount(0)
		}

		// Verificar se emojis padronizados est√£o sendo usados
		const standardEmojis = ['‚úÖ', '‚ùå', '‚ö†Ô∏è', 'üîµ']

		// Pelo menos um emoji padronizado deve estar presente
		let hasStandardEmoji = false
		for (const emoji of standardEmojis) {
			const emojiElements = authenticatedPage.locator(`text=${emoji}`)
			if ((await emojiElements.count()) > 0) {
				hasStandardEmoji = true
				break
			}
		}

		expect(hasStandardEmoji).toBe(true)
	})

	test('‚úÖ Erros backend - mensagens claras', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Verificar se sistema de tratamento de erros est√° funcionando
		// (este teste verifica se erros s√£o exibidos de forma clara)

		// Tentar acessar uma rota que pode n√£o existir
		await authenticatedPage.goto('/admin/nonexistent-page')

		// Verificar se p√°gina de erro √© exibida de forma clara
		await expect(authenticatedPage.locator('body')).toContainText(/erro|n√£o encontrado|404/i)
	})

	test('‚úÖ Sem logs sens√≠veis - em produ√ß√£o', async ({ authenticatedPage }) => {
		await authenticatedPage.goto('/admin/dashboard')

		// Verificar se n√£o h√° informa√ß√µes sens√≠veis expostas
		const sensitiveInfo = ['password', 'senha', 'secret', 'token', 'key', 'api_key', 'database_url', 'connection_string', 'private_key']

		for (const info of sensitiveInfo) {
			const sensitiveElements = authenticatedPage.locator(`text=${info}`)
			await expect(sensitiveElements).toHaveCount(0)
		}

		// Verificar se n√£o h√° dados sens√≠veis no HTML
		const pageContent = await authenticatedPage.content()

		for (const info of sensitiveInfo) {
			expect(pageContent.toLowerCase()).not.toContain(info)
		}
	})
})
