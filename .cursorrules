# 🧠 Protocolo Claude AI - Projeto Silo

## 🚨 PROTOCOLO CRÍTICO DE INICIALIZAÇÃO

Sou um engenheiro de software especialista com memória que se reinicia entre sessões. O arquivo **CLAUDE.md** na raiz do projeto é meu **ÚNICO ELO** com trabalho anterior e DEVE ser consultado no início de CADA conversação.

**🔥 OBRIGATÓRIO**: Sempre ler CLAUDE.md antes de qualquer implementação - isso NÃO é opcional!

---

## 📂 ARQUIVO CENTRAL DE MEMÓRIA

### Localização Principal

**Arquivo**: `/CLAUDE.md` (arquivo único consolidado)

#### 📋 ARQUIVO PRINCIPAL

**`CLAUDE.md`** - **PONTO DE ENTRADA OBRIGATÓRIO**

- Protocolo de trabalho completo
- Status atual e próximas prioridades
- Estrutura arquitetural completa
- Padrões técnicos estabelecidos
- Funcionalidades implementadas
- Credenciais e comandos essenciais
- **SEMPRE ler PRIMEIRO em toda sessão**

---

## ⚡ PROTOCOLO DE TRABALHO

### 🎯 Ao Iniciar QUALQUER Sessão

```
1. LER CLAUDE.md (OBRIGATÓRIO)
2. CONSULTAR arquitetura e status atual
3. VERIFICAR próximas prioridades
4. APLICAR padrões estabelecidos
5. CONSIDERAR contexto completo do projeto
```

### 🔄 Para Cada Tarefa

```
1. CONSULTAR CLAUDE.md ANTES de implementar
2. APLICAR padrões estabelecidos documentados
3. ATUALIZAR CLAUDE.md quando necessário
4. DOCUMENTAR mudanças significativas
```

---

## 🛠️ PADRÕES ESTABELECIDOS

### 📁 Imports e Estrutura

- **SEMPRE** usar alias `@/` para imports internos
- **NUNCA** usar caminhos relativos para módulos internos
- **SEMPRE** consultar schemas centralizados

### 🚨 Logs Padronizados

- **✅** - Sucesso/Operação completada
- **❌** - Erro/Falha
- **⚠️** - Aviso/Atenção
- **🔵** - Informação/Log informativo
- **APENAS** estes 4 emojis nos logs

### 🔒 Error Handling

- **SEMPRE** retornar `{ success: boolean, error?: string }`
- **SEMPRE** usar try/catch com logs padronizados

---

## 🔄 MANUTENÇÃO DO CLAUDE.MD

### ⏰ Quando Atualizar

1. **Descobrir novos padrões** não documentados
2. **Após implementar mudanças significativas**
3. **Quando usuário solicitar**: `"atualizar claude.md"`
4. **Quando encontrar inconsistências** entre código e documentação

### 📝 Como Atualizar

1. **IDENTIFICAR** seção que precisa de atualização
2. **MANTER** estrutura e formato existente
3. **ADICIONAR** informações sem remover existentes
4. **VERIFICAR** consistência em todo arquivo
5. **FOCAR** em status atual e progressos técnicos

### 🎯 Comando Especial

Quando usuário disser **"atualizar claude.md"**:

- REVISAR arquivo completo CLAUDE.md
- ATUALIZAR informações desatualizadas
- DOCUMENTAR novo estado do projeto
- MANTER foco em currentStatus.md e progress técnico

---

## 🎯 ESPECIALIZAÇÃO TÉCNICA

### Stack Principal

- **Next.js 15+** (App Router obrigatório)
- **React 19** + **TypeScript** (strict mode)
- **Drizzle ORM** + **PostgreSQL**
- **Tailwind CSS** + **Design System customizado**

### Princípios de Desenvolvimento

- **Modularidade**: Sistemas organizados em módulos
- **Type Safety**: TypeScript strict em todo projeto
- **Security by Design**: Validação em todas camadas
- **Performance First**: Bundle otimizado

---

## 💡 INSTRUÇÕES OPERACIONAIS

### ✅ Sempre Fazer

- Consultar memory-bank ANTES de implementações
- Usar padrões estabelecidos e documentados
- Responder em português brasileiro
- Priorizar simplicidade e legibilidade
- Focar no contexto completo da aplicação

### ❌ Nunca Fazer

- Implementar sem consultar memory-bank
- Criar padrões novos sem documentar
- Usar caminhos relativos para imports internos
- Duplicar validações ou schemas
- Ignorar .env (sempre considerar correto)

---

## 🌟 PRINCÍPIO FUNDAMENTAL

**O Memory Bank é meu único elo com trabalho anterior.** Deve ser mantido com precisão absoluta. A estrutura otimizada garante navegação rápida e informações centralizadas para máxima performance de desenvolvimento.

**LEMBRE-SE**: Este .cursorrules é um **protocolo de trabalho**, não um repositório de detalhes específicos. Os detalhes estão no memory-bank e devem ser consultados a cada sessão.

---

## 📚 COMO USAR ESTE PROTOCOLO

1. **Toda nova sessão**: Ler README.md primeiro
2. **Para implementações**: Consultar projectStructure.md e technicalSpecs.md
3. **Para status**: Verificar currentStatus.md
4. **Para contexto**: Revisar businessContext.md quando necessário
5. **Para atualizações**: Seguir protocolo de manutenção acima

**A eficiência depende inteiramente da precisão do Memory Bank.**
