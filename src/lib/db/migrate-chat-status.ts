import { db } from '@/lib/db'
import { sql } from 'drizzle-orm'

// Script de migra√ß√£o para adicionar sistema de status de leitura
export async function migrateChatStatus() {
	console.log('üîÑ Iniciando migra√ß√£o do sistema de status de leitura...')

	try {
		// 1. Adicionar campo deliveredAt na tabela chat_message se n√£o existir
		await db.execute(sql`
			ALTER TABLE chat_message 
			ADD COLUMN IF NOT EXISTS delivered_at TIMESTAMP
		`)
		console.log('‚úÖ Campo delivered_at adicionado √† tabela chat_message')

		// 2. Criar tabela chat_message_status se n√£o existir
		await db.execute(sql`
			CREATE TABLE IF NOT EXISTS chat_message_status (
				id TEXT PRIMARY KEY DEFAULT gen_random_uuid(),
				message_id TEXT NOT NULL REFERENCES chat_message(id) ON DELETE CASCADE,
				user_id TEXT NOT NULL REFERENCES auth_user(id) ON DELETE CASCADE,
				read_at TIMESTAMP NOT NULL DEFAULT NOW(),
				created_at TIMESTAMP NOT NULL DEFAULT NOW(),
				CONSTRAINT unique_message_user UNIQUE (message_id, user_id)
			)
		`)
		console.log('‚úÖ Tabela chat_message_status criada')

		// 3. Criar √≠ndices para performance
		await db.execute(sql`
			CREATE INDEX IF NOT EXISTS idx_chat_message_status_message_id 
			ON chat_message_status(message_id)
		`)

		await db.execute(sql`
			CREATE INDEX IF NOT EXISTS idx_chat_message_status_user_id 
			ON chat_message_status(user_id)
		`)

		await db.execute(sql`
			CREATE INDEX IF NOT EXISTS idx_chat_message_delivered_at 
			ON chat_message(delivered_at)
		`)

		console.log('‚úÖ √çndices criados para performance')

		// 4. Marcar mensagens existentes como entregues (opcional)
		const result = await db.execute(sql`
			UPDATE chat_message 
			SET delivered_at = created_at 
			WHERE delivered_at IS NULL
		`)

		console.log(`‚úÖ ${result.rowCount || 0} mensagens existentes marcadas como entregues`)

		console.log('üéâ Migra√ß√£o do sistema de status de leitura conclu√≠da com sucesso!')
		return true
	} catch (error) {
		console.log('‚ùå Erro na migra√ß√£o:', error)
		throw error
	}
}

// Script para reverter a migra√ß√£o (se necess√°rio)
export async function rollbackChatStatus() {
	console.log('üîÑ Revertendo migra√ß√£o do sistema de status de leitura...')

	try {
		// Remover √≠ndices
		await db.execute(sql`DROP INDEX IF EXISTS idx_chat_message_status_message_id`)
		await db.execute(sql`DROP INDEX IF EXISTS idx_chat_message_status_user_id`)
		await db.execute(sql`DROP INDEX IF EXISTS idx_chat_message_delivered_at`)

		// Remover tabela
		await db.execute(sql`DROP TABLE IF EXISTS chat_message_status`)

		// Remover campo (comentado pois pode ser perigoso)
		// await db.execute(sql`ALTER TABLE chat_message DROP COLUMN IF EXISTS delivered_at`)

		console.log('‚úÖ Migra√ß√£o revertida com sucesso!')
		return true
	} catch (error) {
		console.log('‚ùå Erro ao reverter migra√ß√£o:', error)
		throw error
	}
}

// Executar se chamado diretamente
if (require.main === module) {
	migrateChatStatus()
		.then(() => {
			console.log('‚úÖ Migra√ß√£o executada com sucesso!')
			process.exit(0)
		})
		.catch((error) => {
			console.log('‚ùå Erro ao executar migra√ß√£o:', error)
			process.exit(1)
		})
}
