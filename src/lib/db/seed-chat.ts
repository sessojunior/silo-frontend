import 'dotenv/config'
import { eq, inArray } from 'drizzle-orm'

import { db } from '@/lib/db'
import * as schema from '@/lib/db/schema'

async function seedChat() {
	console.log('üîµ Iniciando seed do sistema de chat...')

	// 1. Buscar grupos existentes
	console.log('üîµ Buscando grupos existentes...')
	const existingGroups = await db.select().from(schema.group)

	if (existingGroups.length === 0) {
		console.log('‚ùå Nenhum grupo encontrado! Execute primeiro o seed principal.')
		return
	}

	console.log(`‚úÖ ${existingGroups.length} grupos encontrados!`)

	// 2. Criar usu√°rios de teste para o chat
	console.log('üîµ Criando usu√°rios de teste para o chat...')

	const testUsers = [
		{
			name: 'Ana Silva',
			email: 'ana.silva@inpe.br',
			password: '$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password
			emailVerified: true,
			groupId: existingGroups.find((g) => g.name === 'Meteorologistas')?.id || null,
			isActive: true,
		},
		{
			name: 'Carlos Santos',
			email: 'carlos.santos@inpe.br',
			password: '$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password
			emailVerified: true,
			groupId: existingGroups.find((g) => g.name === 'Pesquisadores')?.id || null,
			isActive: true,
		},
		{
			name: 'Beatriz Lima',
			email: 'beatriz.lima@inpe.br',
			password: '$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password
			emailVerified: true,
			groupId: existingGroups.find((g) => g.name === 'Operadores')?.id || null,
			isActive: true,
		},
		{
			name: 'Diego Ferreira',
			email: 'diego.ferreira@inpe.br',
			password: '$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password
			emailVerified: true,
			groupId: existingGroups.find((g) => g.name === 'Suporte')?.id || null,
			isActive: true,
		},
		{
			name: 'Elena Costa',
			email: 'elena.costa@inpe.br',
			password: '$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password
			emailVerified: true,
			groupId: existingGroups.find((g) => g.name === 'Visitantes')?.id || null,
			isActive: false, // Usu√°rio inativo para teste
		},
		{
			name: 'Fernando Rocha',
			email: 'fernando.rocha@inpe.br',
			password: '$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password
			emailVerified: true,
			groupId: existingGroups.find((g) => g.name === 'Meteorologistas')?.id || null,
			isActive: true,
		},
	]

	// Verificar se usu√°rios de teste j√° existem
	const existingTestEmails = await db
		.select({ email: schema.authUser.email })
		.from(schema.authUser)
		.where(
			inArray(
				schema.authUser.email,
				testUsers.map((u) => u.email),
			),
		)

	const existingEmailSet = new Set(existingTestEmails.map((u) => u.email))
	const usersToCreate = testUsers.filter((u) => !existingEmailSet.has(u.email))

	if (usersToCreate.length > 0) {
		const insertedUsers = await db
			.insert(schema.authUser)
			.values(
				usersToCreate.map((u) => ({
					...u,
					id: crypto.randomUUID(),
					emailVerified: true,
				})),
			)
			.returning()
		console.log(`‚úÖ ${insertedUsers.length} usu√°rios de teste criados!`)

		// Log dos usu√°rios criados
		insertedUsers.forEach((user) => {
			console.log(`   - ${user.name} (${user.email})`)
		})
	} else {
		console.log('‚úÖ Usu√°rios de teste j√° existem!')
	}

	// 3. Verificar se canais j√° existem
	console.log('üîµ Verificando canais existentes...')
	const existingChannels = await db.select().from(schema.chatChannel)

	if (existingChannels.length > 0) {
		console.log(`‚ö†Ô∏è ${existingChannels.length} canais j√° existem! Pulando cria√ß√£o de canais.`)
	} else {
		// 4. Buscar usu√°rio para ser o criador dos canais
		console.log('üîµ Buscando usu√°rio para criar os canais...')
		const creatorUser = await db.select().from(schema.authUser).where(eq(schema.authUser.email, 'sessojunior@gmail.com')).limit(1)

		if (creatorUser.length === 0) {
			console.log('‚ùå Usu√°rio Mario Junior n√£o encontrado! Execute primeiro o seed principal.')
			return
		}

		const creatorUserId = creatorUser[0].id
		console.log(`‚úÖ Usu√°rio criador: ${creatorUser[0].name} (${creatorUserId})`)

		// 5. Criar canais de chat baseados nos grupos
		console.log('üîµ Criando canais de chat baseados nos grupos...')
		const channelsToCreate = existingGroups.map((group) => ({
			name: `#${group.name.toLowerCase().replace(/\s+/g, '-')}`,
			description: `Canal do grupo ${group.name} - ${group.description}`,
			type: 'group' as const,
			icon: group.icon,
			color: group.color,
			isActive: group.active,
		}))

		const insertedChannels = await db.insert(schema.chatChannel).values(channelsToCreate).returning()

		console.log(`‚úÖ ${insertedChannels.length} canais de chat criados com sucesso!`)

		// 6. Buscar todos os usu√°rios para adicionar como participantes
		console.log('üîµ Buscando todos os usu√°rios para adicionar como participantes...')
		const allUsers = await db.select().from(schema.authUser).where(eq(schema.authUser.isActive, true))
		console.log(`‚úÖ Encontrados ${allUsers.length} usu√°rios ativos`)

		// 7. Adicionar todos os usu√°rios como participantes de todos os canais
		console.log('üîµ Adicionando usu√°rios como participantes dos canais...')
		const participantRoles = []

		for (const channel of insertedChannels) {
			for (const user of allUsers) {
				// Determinar role baseado no email (tempor√°rio)
				let role = 'member'

				if (user.email === 'sessojunior@gmail.com') {
					role = 'admin'
				}

				participantRoles.push({
					channelId: channel.id,
					userId: user.id,
					role: role,
					lastReadAt: null,
				})
			}
		}

		await db.insert(schema.chatParticipant).values(participantRoles)
		console.log(`‚úÖ ${participantRoles.length} participa√ß√µes criadas (${allUsers.length} usu√°rios √ó ${insertedChannels.length} canais)!`)

		// 8. Criar status inicial para todos os usu√°rios no chat
		console.log('üîµ Criando status inicial dos usu√°rios no chat...')
		const userStatuses = allUsers.map((user) => ({
			userId: user.id,
			status: 'offline' as const,
			lastSeenAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000), // √öltimos 7 dias aleat√≥rio
		}))

		// Verificar se j√° existem status
		const existingStatuses = await db.select().from(schema.chatUserStatus)
		if (existingStatuses.length === 0) {
			await db.insert(schema.chatUserStatus).values(userStatuses)
			console.log(`‚úÖ Status inicial criado para ${userStatuses.length} usu√°rios!`)
		} else {
			console.log('‚úÖ Status dos usu√°rios j√° existem!')
		}
	}

	// 9. Criar algumas mensagens de exemplo nos canais
	console.log('üîµ Criando mensagens de exemplo...')

	// Buscar canais existentes (podem ter sido criados agora ou j√° existir)
	const allChannels = await db.select().from(schema.chatChannel)

	// Buscar usu√°rios para criar mensagens variadas
	const allUsers = await db.select().from(schema.authUser).where(eq(schema.authUser.isActive, true))

	if (allUsers.length > 0) {
		// Verificar se j√° existem mensagens
		const existingMessages = await db.select().from(schema.chatMessage).limit(1)

		if (existingMessages.length === 0) {
			// Criar mensagens de exemplo variadas com timestamps recentes
			const exampleMessages = []
			const now = new Date()

			for (const channel of allChannels.slice(0, 4)) {
				// Nos 4 primeiros canais
				// Diferentes usu√°rios enviando mensagens
				const channelUsers = allUsers.slice(0, 3) // Primeiros 3 usu√°rios

				for (let i = 0; i < channelUsers.length; i++) {
					const user = channelUsers[i]

					// Mensagens variadas baseadas no √≠ndice
					const messages = [`üéâ Ol√° pessoal! Bem-vindos ao canal ${channel.name}!`, `Sistema de chat funcionando perfeitamente! üöÄ`, `Que bom ter todos voc√™s aqui. Vamos come√ßar a colaborar! üí™`, `Teste de mensagem do usu√°rio ${user.name} üìù`, `Este canal vai ser muito √∫til para nossa equipe! üë•`]

					// Criar mensagens com timestamps escalonados (√∫ltima mensagem h√° poucos minutos)
					const minutesAgo = (channelUsers.length - i) * 5 // 15, 10, 5 minutos atr√°s
					const messageTime = new Date(now.getTime() - minutesAgo * 60 * 1000)

					exampleMessages.push({
						id: crypto.randomUUID(),
						channelId: channel.id,
						senderId: user.id,
						content: messages[i % messages.length],
						messageType: 'text',
						createdAt: messageTime,
					})
				}
			}

			await db.insert(schema.chatMessage).values(exampleMessages)
			console.log(`‚úÖ ${exampleMessages.length} mensagens de exemplo criadas!`)
		} else {
			console.log('‚ö†Ô∏è Mensagens j√° existem! Pulando cria√ß√£o de mensagens.')
		}
	}

	console.log('‚úÖ Seed do sistema de chat finalizado com sucesso!')
	console.log('üìä Resumo:')
	console.log(`   - Usu√°rios ativos: ${allUsers?.length || 'N/A'}`)
	console.log(`   - Canais criados: ${allChannels?.length || 'N/A'}`)
	console.log(`   - Sistema completo e pronto para uso!`)
}

seedChat().catch((err) => {
	console.error('‚ùå Erro ao rodar o seed do chat:', err)
	process.exit(1)
})
