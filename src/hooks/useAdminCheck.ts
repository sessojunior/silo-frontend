'use client'

import { useState, useEffect } from 'react'

interface AdminCheckResult {
	isAdmin: boolean
	loading: boolean
	error: string | null
}

/**
 * Hook para verificar se o usu√°rio atual √© administrador
 * @returns {AdminCheckResult} Estado da verifica√ß√£o de administrador
 */
export function useAdminCheck(): AdminCheckResult {
	const [isAdmin, setIsAdmin] = useState(false)
	const [loading, setLoading] = useState(true)
	const [error, setError] = useState<string | null>(null)

	useEffect(() => {
		checkAdminStatus()
	}, [])

	const checkAdminStatus = async () => {
		try {
			setLoading(true)
			setError(null)
			
			console.log('üîç Verificando se usu√°rio atual √© administrador...')
			
			// Fazer uma chamada para a API espec√≠fica de verifica√ß√£o de administrador
			const response = await fetch('/api/admin/check-admin')
			
			if (response.ok) {
				const data = await response.json()
				if (data.success) {
					setIsAdmin(data.isAdmin)
					console.log('‚úÖ Status de administrador verificado:', data.isAdmin)
				} else {
					setIsAdmin(false)
					setError(data.error || 'Erro ao verificar permiss√µes')
					console.log('‚ùå Erro na resposta da API:', data.error)
				}
			} else if (response.status === 401) {
				// Usu√°rio n√£o autenticado
				setIsAdmin(false)
				console.log('‚ùå Usu√°rio n√£o autenticado')
			} else {
				// Outros erros
				setIsAdmin(false)
				setError('Erro ao verificar permiss√µes')
				console.log('‚ö†Ô∏è Erro ao verificar permiss√µes:', response.status)
			}
		} catch (err) {
			console.error('‚ùå Erro ao verificar status de administrador:', err)
			setIsAdmin(false)
			setError('Erro ao verificar permiss√µes')
		} finally {
			setLoading(false)
		}
	}

	return { isAdmin, loading, error }
}
