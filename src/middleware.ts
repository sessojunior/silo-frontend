import { NextRequest, NextResponse } from 'next/server'

// Prote√ß√£o de rotas privadas
// Redireciona p√°ginas /admin/* sem sess√£o para login
// APIs /api/admin/* fazem verifica√ß√£o b√°sica de token no middleware + verifica√ß√£o completa nas pr√≥prias APIs

export async function middleware(req: NextRequest) {
	const { pathname } = req.nextUrl
	const token = req.cookies.get('session_token')?.value

	console.log('üîç [MIDDLEWARE] Requisi√ß√£o interceptada:', {
		pathname,
		method: req.method,
		tokenExists: !!token,
		tokenLength: token?.length || 0,
		tokenPrefix: token ? token.substring(0, 10) + '...' : 'N/A',
		referer: req.headers.get('referer'),
		timestamp: new Date().toISOString()
	})

	// Prote√ß√£o de p√°ginas administrativas
	if (pathname.startsWith('/admin')) {
		if (!token) {
			console.log('‚ùå [MIDDLEWARE] Token ausente para p√°gina admin, redirecionando para login:', { pathname })
			return NextResponse.redirect(new URL('/login', req.url))
		}
		console.log('‚úÖ [MIDDLEWARE] Token presente para p√°gina admin, permitindo acesso:', { pathname })
		return NextResponse.next()
	}

	// Prote√ß√£o de APIs administrativas - verifica√ß√£o b√°sica de token
	if (pathname.startsWith('/api/admin/')) {
		if (!token) {
			console.log('‚ùå [MIDDLEWARE] Token ausente para API admin:', { pathname })
			return NextResponse.json({ field: null, message: 'Usu√°rio n√£o autenticado.' }, { status: 401 })
		}

		console.log('‚úÖ [MIDDLEWARE] Token presente para API admin, permitindo acesso:', { pathname })
		// Verifica√ß√£o completa de autentica√ß√£o ser√° feita nas pr√≥prias APIs usando getAuthUser()
		// Middleware Edge Runtime n√£o pode acessar database diretamente
		return NextResponse.next()
	}

	return NextResponse.next()
}

export const config = {
	matcher: ['/admin/:path*', '/api/admin/:path*'],
}
